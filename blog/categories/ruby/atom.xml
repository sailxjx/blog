<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | CodeBean]]></title>
  <link href="http://jingxin.me/blog/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://jingxin.me/blog/"/>
  <updated>2016-06-18T21:02:21+08:00</updated>
  <id>http://jingxin.me/blog/</id>
  <author>
    <name><![CDATA[Xu Jingxin]]></name>
    <email><![CDATA[sailxjx@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[体验gollum]]></title>
    <link href="http://jingxin.me/blog/blog/2012/07/12/ti-yan-gollum/"/>
    <updated>2012-07-12T18:07:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2012/07/12/ti-yan-gollum</id>
    <content type="html"><![CDATA[<p>gollum是一个轻量级的wiki系统，使用git作为版本管理和跟踪工具，支持markdown，mediawiki，texttile等多种语法，由github开发并且已经投入到githubwiki的应用中。</p>

<ul>
  <li><a href="#gollum_install">安装</a></li>
  <li><a href="#gollum_deploy">部署</a></li>
  <li><a href="#gollum_bug">已发现的bug</a></li>
  <li><a href="#gollum_refer">参考资料</a></li>
</ul>

<h2 id="gollum_install">安装</h2>

<p>gollum与指环王中某个屌丝同名，不知道开发人员的命名灵感是不是来自那里，我们知道，程序员老是喜欢用一些稀奇古怪的东西来给自己的软件命名，像python（莽蛇），octopress（章鱼）等等，搞得好像人人都是动物保护主义者一样～</p>

<p>根据<a href="https://github.com/github/gollum">github主页</a>的说明，gollum的安装非常简单，一条命令解决</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>安装gollum  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="o">[</span>sudo<span class="o">]</span> gem install gollum
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>假如你喜欢追新，觉得这样安装的版本太老，想直接上HEAD的话，clone一个镜像使用<code>bundle install</code>安装好依赖之后，其bin文件夹下面的gollum就直接可以执行了，绝对绿色环保无污染。</p>

<p>现在就来体验一下gollum带来的不同与其他wiki的小清新感觉吧，在主目录下使用以下命令</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>执行gollum  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir gowiki
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>gowiki
</span><span class='line'><span class="nv">$ </span>git init
</span><span class='line'><span class="nv">$ </span>gollum
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="/u/image/gollum-exec-info.png"><img class="right" src="/u/image/gollum-exec-info.png" width="450" height="70" title="“gollum-exec-info”" ></a>
看到右图就说明gollum已经正确的运行了，gollum默认监听4567端口，并且提供了一个可交互的前端，这个时候用户可以通过浏览器打开<a href="http://localhost:4567">http://localhost:4567</a>来看一下gollum了</p>

<p><a href="/u/image/gollum-frontend.png"><img class="right" src="/u/image/gollum-frontend.png" width="450" height="115" title="“gollum-frontend”" ></a></p>

<p>界面实在是足够简洁，提供的几个button实现了wiki的基本功能增删改查，还能查看历史页面，而且还有一套开放的用户系统，name和email由git的使用者决定，头像则由gravatar生成。</p>

<p>除了通过页面编辑wiki以外，gollum还支持直接由git提交版本来更新页面。由于我们gollum默认读取master分支，而我们正checkout在master上，不方便其他人的编辑，所以我们暂时新建一个demo分支来避免冲突。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>用git来写wiki  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git branch demo
</span><span class='line'><span class="nv">$ </span>git checkout demo
</span><span class='line'><span class="nv">$ </span>mkdir ../gowiki2 &amp;amp;&amp;amp; <span class="nb">cd</span> ../gowiki2
</span><span class='line'><span class="nv">$ </span>git init &amp;amp;&amp;amp; git remote add origin ../gowiki
</span><span class='line'><span class="nv">$ </span>git pull
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>现在gowiki2中应该有了之前编辑过的几个页面，修改以后push到origin的master，就可以在wiki中看到刚刚的更新了。</p>

<!--more-->

<h2 id="gollum_deploy">部署</h2>

<p>虽然gollum提供了一个命令行工具监听端口来提供web服务，但是没有daemon选项，也没有容错机制，何况想来也没有多少人会使用4567端口来访问webserver。那有没有办法将gollum托管给我们的web服务器呢，答案是肯定的，下面以apache为例。</p>

<p>gollum由ruby写成，所以首先需要安装<a href="http://www.modrails.com">passenger(mod_rails)</a>模块，这个模块的安装在<a href="http://www.modrails.com/install.html">官网</a>上有详细的介绍，与其他apache模块的安装大同小异，下面主要介绍一下vhost的配置。</p>

<p>首先进入gollum的安装路径，不知道的可以用下面的命令找一下
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>查找gollum路径  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem which gollum
</span><span class='line'>/usr/local/ruby/lib/ruby/gems/1.9.1/gems/gollum-2.0.0/lib/gollum.rb
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>gollum的前端app在gollum/frontend/public/下(将这个uri跟在上面找出来的路径下就行了)，下面将用<code>frontpath=/usr/local/ruby/lib/ruby/gems/1.9.1/gems/gollum-2.0.0/lib/gollum/frontend/</code>来替代，然后配置vhost</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apache的virtual-hosts配置  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&amp;lt;VirtualHost *&amp;gt;
</span><span class='line'>    ServerName www.gollum.local.com  <span class="c">#替换成自己的域名</span>
</span><span class='line'>    DocumentRoot <span class="k">${</span><span class="nv">frontpath</span><span class="k">}</span>public/ <span class="c">#替换成本地路径</span>
</span><span class='line'>&amp;lt;/VirtualHost&amp;gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>然后在${frontpath}(同上，真实路径)下新建一个文件config.ru，写入下面的内容</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>config.ru  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/local/bin/env ruby</span>
</span><span class='line'><span class="nb">require</span> <span class="err">‘</span><span class="n">rubygems</span><span class="err">’</span>
</span><span class='line'><span class="nb">require</span> <span class="err">‘</span><span class="n">gollum</span><span class="o">/</span><span class="n">frontend</span><span class="o">/</span><span class="n">app</span><span class="err">’</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="err">“</span><span class="n">which</span> <span class="n">git</span><span class="err">”</span><span class="p">)</span> <span class="ow">or</span> <span class="k">raise</span> <span class="err">“</span><span class="no">Looks</span> <span class="n">like</span> <span class="n">I</span> <span class="n">can</span><span class="err">’</span><span class="n">t</span> <span class="n">find</span> <span class="n">the</span> <span class="n">git</span> <span class="no">CLI</span> <span class="k">in</span> <span class="n">your</span> <span class="n">path</span><span class="o">.</span><span class="p">\</span><span class="n">nYour</span> <span class="n">path</span> <span class="n">is</span><span class="p">:</span> <span class="c1">#{ENV[‘PATH’]}”</span>
</span><span class='line'><span class="n">gollum_path</span> <span class="o">=</span> <span class="err">‘</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="p">{</span><span class="n">user</span><span class="p">}</span><span class="o">/</span><span class="n">gowiki</span><span class="err">’</span> <span class="c1">#这里的路径替换成实际想存放wiki文档的git目录</span>
</span><span class='line'><span class="n">disable</span> <span class="ss">:run</span>
</span><span class='line'><span class="n">configure</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:staging</span><span class="p">,</span> <span class="ss">:production</span> <span class="k">do</span>
</span><span class='line'> <span class="n">set</span> <span class="ss">:raise_errors</span><span class="p">,</span> <span class="kp">true</span>
</span><span class='line'> <span class="n">set</span> <span class="ss">:show_exceptions</span><span class="p">,</span> <span class="kp">true</span>
</span><span class='line'> <span class="n">set</span> <span class="ss">:dump_errors</span><span class="p">,</span> <span class="kp">true</span>
</span><span class='line'> <span class="n">set</span> <span class="ss">:clean_trace</span><span class="p">,</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="vg">$path</span> <span class="o">=</span> <span class="n">gollum_path</span>
</span><span class='line'><span class="no">Precious</span><span class="o">::</span><span class="no">App</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="ss">:gollum_path</span><span class="p">,</span> <span class="n">gollum_path</span><span class="p">)</span>
</span><span class='line'><span class="no">Precious</span><span class="o">::</span><span class="no">App</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="ss">:wiki_options</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'><span class="n">run</span> <span class="no">Precious</span><span class="o">::</span><span class="no">App</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>为了使/home/{user}/gowiki目录具有写权限，可以将这个目录的权限这是设为777或者让passenger进程的用户组设为user，修改httpd.conf增加一行<code>PassengerDefaultUser user</code>，这样我们通过web端更新wiki的时候就不会报权限问题了。</p>

<p>现在重启apache，然后访问www.gollum.local.com，结果就与上面看到的页面一模一样啦～～。</p>

<h2 id="gollum_bug">已发现的bug</h2>

<p>gollum绑定的grit库中存在一个关于编码的错误[<a href="https://github.com/github/gollum/issues/147">issue</a>],当提交的文本中包含unicode字符时会导致一个fetal error。在grit2.5.0中修复了这个错误，所以在bundle之前需要先将grit版本设置为2.5.0。gollum最近的两个版本中需要修改的地方还不太一样，晕了～。输入<code>gollum --version</code>看一下版本，假如是2.0.0(gem安装的版本)，则修改gollum.gemspec，若是2.1.0(目前的HEAD版本)，则修改Gemfile.lock。将其中的grit版本改为2.5.0即可。</p>

<h2 id="gollum_refer">参考资料</h2>

<ul>
  <li><a href="https://github.com/github/gollum/blob/master/README.md">README</a></li>
  <li><a href="https://github.com/tecnh/gollum/wiki/Gollum-and-Passenger">Gollum and Passenger</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitpage and octopress]]></title>
    <link href="http://jingxin.me/blog/blog/2012/06/20/gitpage-and-octopress/"/>
    <updated>2012-06-20T20:45:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2012/06/20/gitpage-and-octopress</id>
    <content type="html"><![CDATA[<p>花了一天时间（上班时不务正业。。。），总算把gitpage主页和这个blog搭起来了</p>

<p>写一些备忘，免得以后忘了。。。</p>

<ul>
  <li><a href="#gitpage">gitpage</a></li>
  <li><a href="#octopress">octopress</a></li>
  <li><a href="#scss">scss</a></li>
  <li><a href="#markdown">markdown</a></li>
</ul>

<h2 id="gitpage">gitpage</h2>

<p>github给用户提供了一个非常cool的方式来搭建自己的主页，简单几步，就能完成网站的部署。</p>

<h4 id="section">1.建立分支</h4>

<p>github给每个用户提供了一个形似{user}.github.com的二级域名，只要首先在自己的帐号下建立名为{user}.github.com的分支，就可以通过git来维护自己的主页啦。</p>

<h4 id="clonecommit">2.clone和commit</h4>

<p>分支建立好之后，将{user}.github.com分支clone到本地，以方便编辑。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>本地gitpage  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone git@github.com:<span class="o">{</span>user<span class="o">}</span>/<span class="o">{</span>user<span class="o">}</span>.github.com <span class="o">{</span>your <span class="nb">local </span>dir<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>然后就是建立自己的index啦，gitpage使用纯静态的方式来管理页面，可以通过本地程序预先将这些静态页面生成好再丢给github嘛。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>编辑提交首页  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> “hello git-page” &amp;gt; index.html
</span><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -am ‘init’
</span><span class='line'><span class="nv">$ </span>git push origin master
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>提交以后可以在github的通知中心和邮箱中收到页面建立的通知。第一次提交可能需要10多分钟才能看到效果，以后的提交基本都是立即生效的。</p>

<p>现在访问<a href="http://sailxjx.github.com">{user}.github.com</a>看一下效果吧。</p>

<h4 id="section-1">3.建立项目页面</h4>

<p>除了首页，github还为用户的每一个项目提供了一个展示的平台，只需要在需要展示的项目下建立一个名为gh-pages的分支并push到github，剩余的操作就和首页如出一辙了。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>项目主页  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> <span class="o">{</span>project<span class="o">}</span>
</span><span class='line'><span class="nv">$ </span>git branch gh-pages
</span><span class='line'><span class="nv">$ </span>git checkout gh-pages
</span><span class='line'><span class="nv">$ </span>git push origin gh-pages
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>提交以后会在github产生一个类似{user}.github.com/{project}的域名，访问的其实是<a href="https://github.com/sailxjx/blog/tree/gh-pages">gh-pages</a>分支下的index文件，这个<a href="http://sailxjx.github.com/blog">blog</a>就是托管给gitpage的项目页面的。</p>

<h4 id="gitpage">4.使用gitpage模板</h4>

<p>github提供了一种最快捷的方式来建立pages</p>

<ul>
  <li>进入你的<a href="https://github.com/{user}/{project}/admin">项目管理页</a></li>
  <li>点击右下角的<a href="https://github.com/{user}/{project}/generated_pages/new">Automatic Page Generator</a></li>
  <li>编辑内容并选择自己喜欢的模板</li>
  <li>done</li>
</ul>

<p>然后就可以将gitpage clone到本地进行编辑并提交了</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>编辑项目主页  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> <span class="o">{</span>project<span class="o">}</span>
</span><span class='line'><span class="nv">$ </span>git fetch origin
</span><span class='line'><span class="nv">$ </span>git checkout gh-pages
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<!--more-->

<h2 id="octopress">octopress</h2>

<p><a href="http://octopress.org/">octopress</a>是基于<a href="http://github.com/mojombo/jekyll">Jekyll</a>的一个博客框架。所有的博文都用静态页面保存，不仅能很好的和gitpage集成，还有很高的可配置性，对于喜欢个性化的码农来说简直就是神器丫～</p>

<p>言归正传，安装octopress，必须保证系统中已经安装了git,ruby[1.9.2以上]。然后从github复制一份octopress的拷贝</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>安装octopress  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>octopress
</span><span class='line'><span class="nv">$ </span>gem install bundler
</span><span class='line'><span class="nv">$ </span>bundle install <span class="c">#安装依赖关系，在网络不好的情况下，这一步会相当相当的耗时，并且常有失败的情况。请一定要耐心，淡定。。。</span>
</span><span class='line'><span class="nv">$ </span>rake install <span class="c">#安装默认主题，以后可以用别的命令更新octopress的主题。不过官方的主题已经足够简洁大气了，遇到其他心仪的主题之前，我恐怕不会再去折腾这些了(&amp;gt;_&amp;lt;)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>ok，安装结束，除了蛋疼的网络等待，整个安装过程还是比较简单顺利的，下面进入配置阶段</p>

<p>在根目录下的配置文件有四个，_config.yml,config.rb,config.ru,Rakefile。其中Rakefile实现了部署更新的所有操作，一般情况下不需要修改。理想状态下只需要修改_config.yml文件就可以了。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>_config.yml中与用户相关的配置项 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span>                <span class="c1"># 需要部署的博客站链接</span>
</span><span class='line'><span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span>              <span class="c1"># 又短又二的博客标题，如XX的窝，孤独的根号三等等</span>
</span><span class='line'><span class="l-Scalar-Plain">subtitle</span><span class="p-Indicator">:</span>           <span class="c1"># 小标题，会显示在网站头部，用来辩解标题其实没有那么二</span>
</span><span class='line'><span class="l-Scalar-Plain">author</span><span class="p-Indicator">:</span>             <span class="c1"># 用户名，说明到底是谁写出了这么二的标题</span>
</span><span class='line'><span class="l-Scalar-Plain">simple_search</span><span class="p-Indicator">:</span>      <span class="c1"># 站内搜索的工具，例如http://google.com/search，当然也可以用一样二的baidu</span>
</span><span class='line'><span class="l-Scalar-Plain">description</span><span class="p-Indicator">:</span>        <span class="c1"># 网站说明，会加在meta中，给搜索引擎看的东东</span>
</span><span class='line'><span class="l-Scalar-Plain">subscribe_rss</span><span class="p-Indicator">:</span>      <span class="c1"># rss文件路径，默认atom.xml</span>
</span><span class='line'><span class="l-Scalar-Plain">subscribe_email</span><span class="p-Indicator">:</span>    <span class="c1"># 联系邮箱，这里填写的内容会直接带入页首的mailto链接中，如”mailto: sailxjx#gmail.com?subject=greeting”</span>
</span><span class='line'><span class="l-Scalar-Plain">email</span><span class="p-Indicator">:</span>              <span class="c1"># 这里就是填写完整的邮箱地址啦，显示在页脚</span>
</span><span class='line'><span class="l-Scalar-Plain">root</span>                <span class="c1"># 假如博客不是发布在根目录下，而是发布到类似domain.com/blog的二级目录，这里要设置成二级目录的名字(blog)。</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在下面还有一些第三方网站接入的配置，包括google，twitter，github，facebook，disqus等等。大部分都只需要填写注册的用户名和是否启用就行了。这里值得一提的是disqus，当填写了disqus用户名之后，在博文下面会加载disqus的回复功能，正好弥补了octopress缺少动态内容的缺陷。</p>

<p>在默认配置下，可以很轻松的将博客部署到主站下面，在这里我将octopress部署在blog二级目录下面(gitpage只给我提供了一个域名，被博客全占了，多亏啊～～～)，需要修改_config.yml和config.rb中的对应目录配置</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>_config.yml &amp;&amp; config.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1">## _config.yml 全站配置</span>
</span><span class='line'><span class="n">url</span><span class="p">:</span>    <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">sailxjx</span><span class="o">.</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">blog</span>
</span><span class='line'><span class="n">root</span><span class="p">:</span>   <span class="sr">/blog</span>
</span><span class='line'><span class="sr">## config.rb 这个文件主要影响一些静态文件的加载</span>
</span><span class='line'><span class="sr">http_path = “/</span><span class="n">blog</span><span class="err">”</span>
</span><span class='line'><span class="n">http_images_path</span> <span class="o">=</span> <span class="err">“</span><span class="o">/</span><span class="n">blog</span><span class="o">/</span><span class="n">images</span><span class="err">”</span>
</span><span class='line'><span class="n">http_fonts_path</span> <span class="o">=</span> <span class="err">“</span><span class="o">/</span><span class="n">blog</span><span class="o">/</span><span class="n">fonts</span><span class="err">”</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>现在开始写第一篇博客，只需要简单一个命令</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>new_post  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake new_post<span class="o">[</span>‘first blog’<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这条命令会在source/_posts中生成一个名为YYYY-MM-DD-first-blog.markdown文件，惊喜的是，假如使用中文作为博客标题，这里的文件名（包括deploy后的url）会自动转成拼音。</p>

<p>打开_posts中的文件，这是一个以<a href="http://daringfireball.net/projects/markdown/">markdown</a>语法写成的文档，具体语法下面再介绍，先看一下头部有用的信息</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>post设置 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>layout: post
</span><span class='line'>title: “gitpage and octopress”                          //标题
</span><span class='line'>date: 2012-06-20 20:45                                  //生成的时间，会作为发布时间显示在页底
</span><span class='line'>comments: true                                          //设置成false可以关闭评论
</span><span class='line'>categories: [gitpage, octopress, scss, ruby, markdown]  //博客分类，这些tag可以用来做筛选
</span><span class='line'>author: Your Name                                       //假如有多个作者，可以添加在这里</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>完成一篇博客以后，使用下面的命令可以将博客生成或者发布出去</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>发布博客  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake setup_github_pages   //这个命令会让你填写可读写的github分支作为远程仓库，然后在_deploy文件夹中生成一个gh-pages分支
</span><span class='line'><span class="nv">$ </span>rake generate             //在public文件夹中生成静态文件，可以在本地配置一个服务器指向这个文件夹预览博客发布后的样子
</span><span class='line'><span class="nv">$ </span>rake deploy               //在deploy中生成静态文件，然后会自动调用git push将博客发布到github上
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>写到这里基本已经完成了基本博客的发布，有兴趣可以学一学ruby，玩出自己的花样来。</p>

<h2 id="scss">scss</h2>
<h2 id="markdown">markdown</h2>

<p>to be continue…</p>
]]></content>
  </entry>
  
</feed>
