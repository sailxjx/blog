<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: translation | CodeBean]]></title>
  <link href="http://jingxin.me/blog/blog/categories/translation/atom.xml" rel="self"/>
  <link href="http://jingxin.me/blog/"/>
  <updated>2016-04-11T18:56:00+08:00</updated>
  <id>http://jingxin.me/blog/</id>
  <author>
    <name><![CDATA[Xu Jingxin]]></name>
    <email><![CDATA[sailxjx@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[回调 vs 协程]]></title>
    <link href="http://jingxin.me/blog/blog/2014/04/19/hui-diao-vs-xie-tong-cheng-xu/"/>
    <updated>2014-04-19T15:44:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2014/04/19/hui-diao-vs-xie-tong-cheng-xu</id>
    <content type="html"><![CDATA[<blockquote>
  <p>原文地址：<a href="https://medium.com/code-adventures/174f1fe66127">Callbacks vs Coroutines</a></p>
</blockquote>

<p>最近 Google V8 引擎的一个补丁提供了 <a href="http://wiki.ecmascript.org/doku.php?id=harmony:generators">ES6 生成器</a>，一篇叫做<a href="http://jlongster.com/A-Study-on-Solving-Callbacks-with-JavaScript-Generators">“用 Javascript 生成器来解决回调问题的研究”</a>的文章引发了很大的争议。虽然生成器到目前为止仍然需要 <code>--harmony</code> 或 <code>--harmony-generators</code> 选项才能激活，但是它已经值得你跃跃欲试！在这篇文章中我想要阐述的是自己对于<a href="http://en.wikipedia.org/wiki/Coroutine">协程</a>的体验，并且说明为什么我认为它们是一种好方法。</p>

<h2 id="section">回调和生成器</h2>

<p>在认识回调和生成器之间的不同之前，我们先来看看生成器在 Nodejs 或浏览器这种由回调主宰的环境中是怎样发挥作用的。</p>

<p>首先生成器是回调的一种扩展，有些类型的回调就是用来”模拟”生成器的。这些”futures”，”thunks”，或”promises” —- 无论你怎么称呼，都是用来延迟执行一小段逻辑的，就好比你 yield 了一个变量然后由生成器来处理其他的部分。</p>

<p>一旦这些变量 yield 给了调用方，这个调用方等待回调然后重新回到生成器。见仁见智，生成器的原理和回调其实是一样的，然而下面我们会说到使用它的一些好处。</p>

<p>假如你还是不太清楚该怎么使用生成器，这里有一个简单的例子实现了由生成器来控制流程。</p>

<p>```javascript
var fs = require(‘fs’);
function thread(fn) {
  var gen = fn();
  function next(err, res) {
    var ret = gen.next(res);
    if (ret.done) return;
    ret.value(next);
  }</p>

<p>next();
}
thread(function *(){
  var a = yield read(‘app.js’);
  var b = yield read(‘package.json’);
  console.log(a);
  console.log(b);
});
function read(path) {
  return function(done){
    fs.readFile(path, ‘utf8’, done);
  }
}
```</p>

<h2 id="section-1">为什么协程会使代码更健壮</h2>

<p>对于传统的浏览器或 Nodejs 环境，协程在自己的堆栈上运行每个”纤程”。这些纤程的实现各不相同，但是它们只需要一个很小的栈空间就能初始化（大约4kb），然后随需求增长。</p>

<p>为什么这样棒极了？错误处理！假如你使用过 Nodejs， 你就会知道错误处理不是那么简单。有些时候你会得到多个包含未知边际效应的回调，或者完全忘了回调这回事并且没有正确的处理和汇报异常。也许你忘了监听一个”error”事件，这样的话它就变成了一个未捕获的异常而让整个进程挂掉。</p>

<p>有些人喜欢使用进程，而且这样也挺好，但是作为一个在早期就使用 Nodejs 的人来说，在我看来这种流程有很多地方值得改进。Nodejs 在很多方面都很出色，但是这个就是它的阿喀琉斯之踵。</p>

<p>我们用一个简单的例子来看看由回调来读写同一个文件：</p>

<p><code>javascript
function read(path, fn) {
  fs.readFile(path, 'utf8', fn);
}
function write(path, str, fn) {
  fs.writeFile(path, str, fn);
}
function readAndWrite(fn) {
  read('Readme.md', function(err, str){
    if (err) return fn(err);
    str = str.replace('Something', 'Else');
    write('Readme.md', str, fn);
  });
}
</code></p>

<p>你可能会想这看起来也没那么糟糕，那是因为你整天看到这样的代码！好吧这是错误的:)为什么？应为大多数 node 核心方法，和多数第三方库都没有 try/catch 他们的回调。</p>

<p>下面的代码会抛出一个未捕获异常而且没有任何方法能捕获它。就算内核检测到这个异常并且告诉调用方这可能是一个错误点，大多数回调都有未知的行为。</p>

<p><code>javascript
function readAndWrite(fn) {
  read('Readme.md', function(err, str){
    throw new Error('oh no, reference error etc');
    if (err) return fn(err);
    str = str.replace('Something', 'Else');
    write('Readme.md', str, fn);
  });
}
</code></p>

<p>所以生成器是怎么来优化这一点的？下面的代码片段用生成器和 <a href="https://github.com/visionmedia/co">Co</a> 库来实现了相同的逻辑。你可能会想”这只是一些愚蠢的语法糖而已” - 但是你错了。只要我们将生成器传给 <code>Co()</code> 方法，所有委派给调用方的 yields，特别是强健的错误处理都会由 Co 来委派。</p>

<p><code>javascript
co(function *(){
  var str = yield read('Readme.md')
  str = str.replace('Something', 'Else')
  yield write('Readme.md', str)
})
</code></p>

<p>就像下面这样，Co 这样的库会将异常”抛”回给他们原本的流程，这意味着你可以用 try/catch 来捕获异常，或者任其自流由最后 Co 的回调来处理这些错误。</p>

<p><code>javascript
co(function *(){
  try {
    var str = yield read('Readme.md')
  } catch (err) {
    // whatever
  }
  str = str.replace('Something', 'Else')
  yield write('Readme.md', str)
})
</code></p>

<p>在编写 Co 的时候貌似只有它实现了健壮的错误处理，但是假如你看一下 Co 的<a href="https://github.com/visionmedia/co/blob/master/index.js#L30">源代码</a>你会注意到所有的 try/catch 代码块。假如你用生成器你需要将 try/catch 添加到每个你用过的库中，来保证代码的健壮性。这就是为什么在今天看来，用 Nodejs 编写健壮性代码是一件不可能完成的任务。</p>

<h2 id="section-2">生成器对于协程</h2>

<p>生成器有时会被当成”半协程”，一个不完善，仅对调用方有效的协程。这让使用生成器比协程的目的更明确，好比 yield 能被当成”线程”。</p>

<p>协程要更加灵活一些，看起来就像是普通代码块，而不需要 yield：</p>

<p><code>javascript
var str = read('Readme.md')
str = str.replace('Something', 'Else')
write('Readme.md', str)
console.log('all done!')
</code></p>

<p>有些人认为完整的协程是”危险的”，因为它不清楚哪个方法有没有延迟执行线程。个人来说我认为这种争论很可笑，大部分延迟执行的方法都很明显，比方说从文件或套接字中读写，http 请求，睡眠等等延迟执行不会让任何人感到惊讶。</p>

<p>假如有些不友善的方法，那么你就 “fork” 它们来强迫这些任务变成异步的，就像你在 Go 中做的一样。</p>

<p>在我看来生成器可能比协程更危险（当然比回调好得多）—-仅仅是忘记一个 yield 表达式就可能让你费解或在它执行下面的代码时导致未知的行为结果。半协程和协程两者各自有优缺点，但是我很高兴现在至少已经有了其一。</p>

<p>让我们来看看你用生成器可以怎样实现新的构造方法。</p>

<h2 id="section-3">用协程实现简单的异步流程</h2>

<p>你已经看到一个简单读/写表达式看起来比回调更优雅，我们来看看更多的内容。</p>

<p>假设所有操作默认按顺序执行简化了模型，有些人声称生成器或协程使状态变得复杂化，这事不正确的。用回调处理状态也是一样的。全局变量依然是全局变量，局部变量依然是局部变量，而闭包依然是闭包。</p>

<p>我们用例子来说明这个流程，假设你需要请求一个 web 页面，解析其中的链接，然后同步请求所有的链接并输出他们的 Content-types。</p>

<p>这里是一个使用传统回调的例子，没有使用第三方流程控制库。</p>

<p>```javascript
function showTypes(fn) {
 get(‘http://cloudup.com’, function(err, res){
   if (err) return fn(err);
   var done;
   var urls = links(res.text);
   var pending = urls.length;
   var results = new Array(pending);
   urls.forEach(function(url, i){
     get(url, function(err, res){
       if (done) return;
       if (err) return done = true, fn(err);
       results[i] = res.header[‘content-type’];
       —pending || fn(null, results);
     });
   });
 });
}</p>

<p>showTypes(function(err, types){
  if (err) throw err;
  console.log(types);
});
```</p>

<p>这么简单的一个任务被回调搞得毫无可读性。再加上错误处理，重复回调的预防，存储结果和他们本身的一些回调，你会完全搞不懂这个方法是用来干嘛的。假如你需要使代码更健壮，还需要在最后的方法处加上 try/catch 代码块。</p>

<p>现在下面有一个由生成器实现的相同的 showTypes() 方法。你会看到结果和用回调实现的方法是一样的，在这里例子中 Co 处理了所有我们在上面需要手工处理的错误和结果集的组装。被 urls.maps(get) 方法 yield 的数组被平行执行，但是结果集然后是保持不变的顺序。</p>

<p><code>javascript
function header(field) {
  return function(res){
    return res.headers[field]
  }
}
function showTypes(fn) {
  co(function *(){
    var res = yield get('http://cloudup.com')
    var responses = yield links(res.text).map(get)
    return responses.map(header('content-type'))
  })(fn)
}
</code></p>

<p>我并不是建议所有的 Npm 模块使用生成器并且强制依赖 Co，我仍然建议使用相反的方法 —- 但是在应用层面我强烈推荐它。</p>

<p>我希望这能说明协程在编写无阻塞的程序时是一个强有力的工具。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[金钱与开源(part2)]]></title>
    <link href="http://jingxin.me/blog/blog/2013/12/11/jin-qian-yu-kai-yuan-part2/"/>
    <updated>2013-12-11T17:14:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2013/12/11/jin-qian-yu-kai-yuan-part2</id>
    <content type="html"><![CDATA[<blockquote>
  <p>接上篇<a href="/blog/2013/12/08/jin-qian-yu-kai-yuan-part1/">金钱与开源(part1)</a></p>
</blockquote>

<h2 id="section">虚拟小费</h2>

<p>有一些项目设立了“小费”机制来展现你（对某人）的赏识。我比较熟悉的两个是<a href="http://tiptheweb.org/">TipTheWeb</a>和<a href="https://www.gittip.com/">GitTip</a>。我不确定TipTheWeb是否还有人维护。GitTip比较新一些，而且现在看起来更流行。</p>

<p>两者都建立在道德的基础上，TipTheWeb的Eric Ferraiuolo是个非常和善和高尚的人，他们的目标就和字面上看起来一样，为了使互联网变得更好。GitTip的Chad Whitacre看起来同样也是为互联网做一些好事。</p>

<p>给某人一些小费看起来就像是行善。这在你不知道什么是合适的礼物情况下，一种展现对某人爱心和赞誉的方式。能让人在精神上和物质上得到满足。</p>

<p>话虽如此，我仍旧怀疑这种方式能提高项目的创建量。难道程序员仅靠这些捐款就能付得起房租？我肯定是不行的。</p>

<p>金钱肯定是有来源的，所以我不认为完全靠这种方式能支持一个开源项目进行下去。某种程度上，GitTip上的一些人有“真实的工作”，并且决定将一部分钱用来做捐助。在GitTip上给小费，然后希望人们对你负责，这看起来有点尴尬。小费是果而非因，也就是说，“我喜欢你所以才给你小费”，而不是，“我希望你为我做点事情，所以才给你小费”。</p>

<p>我不反对捐助。事实上，我觉得它很重要，这是我们这些有经济自由的人的一种道德需要。然而，我做过计算，尝试找出一种能让我的捐助利益最大化的方式，每个月给某个开发者5美元并不能让我伤筋动骨。这看起来更像是一个游戏，对另一个人表示尊敬和赞扬，并附带一点点金钱奖励。</p>

<p>这与花大价钱雇佣开发者来创造软件不一样。但是缺少了一种交易关系，这里能得到的收益是很少的。做营销的方式林林总总，我不觉得这种方式能有很高的商业价值。为什么不去雇佣这些开发者，然后得到更高的回报呢？</p>

<p>给小费的方式既有趣，又让人感觉愉悦。但是我很怀疑它是否真的能改变世界。这并不能保证你过上无忧无虑的生活，而且我感觉假如你真的靠小费来生活，那么它可能会改变你(编写代码)的初衷。</p>

<p>这让我想到了另一种有前途但是同样存在问题的方式。</p>

<h2 id="section-1">奖金</h2>

<p>无论何时我们都得对于钱的问题万分小心。很多研究发现事物的动机有外因和内因之分。假如我为了五美元去做一些事情，我可能享受不到免费做这件事的乐趣。就像Merlin Mann说的：“世界上有两种价值：免费，和成本。”</p>

<p>当然，“我将花X美元来请你帮我写Y功能”在软件界是一种通行的方式。大部分情况下，就我经验而言，它并不能取得很好的效果。任何人都不可能给出一个等价的条件。</p>

<p>一旦延期很久，双方都不会满意。通常这个时候甲方和乙方就开始扯皮，事情就杯具了。</p>

<p><a href="https://www.bountysource.com/">BountySource</a>是这个领域的后起之秀，它有一些有趣的特征。“Backers”既可以是个人也可以是公司。利用融资的形式来支付小费的想法很有吸引力，这样你就不必为某个个体负责了。而且，集成Github Issues的想法也很聪明。</p>

<p>但是我仍然十分怀疑BountySource能改造开源软件现有的生态环境。一个显而易见的缺陷就是奖励实在是微乎其微。而且，现在钱被提到了前面，热情就被商业所取代了。</p>

<p>举个例子，我刚刚获知在这个实现<a href="http://semver.org/">SemVer 2.0规范</a>的<a href="https://github.com/isaacs/node-semver/issues/16">Issue</a>中有一笔87美元的赏金。</p>

<p>事实是，我已经和其他人一起着手写这样一份规范(在当时还很模糊)。一旦完成，我能遵守规范的唯一方式就是重写整个node-semver。这总共需要两周邹游的时间，包括将改动提交到npm上来让它起作用。</p>

<p>所以，虽然87美元看起来很诱人，但是我不能仅凭87美元来过两个礼拜。就算它有870美元，8700美元甚至87000美元，提高奖金也不是最好的办法。它尽最后的努力来使一个社区满足你的需求。假如社区根本不关心这事，那么他们也不会关心你或你的需求。</p>

<p>奖金机制在这里存在的问题就是，软件有时候并不是一个有着明确边界的产品。增加一个功能看上去更像收养一只小猫，而非投递一件包裹。假如你无论如何都想收养这只小猫，但是有些人想要花钱来让你收养另一只，就算能行，最后也会事与愿违。强扭的瓜不甜，最后可能导致的是一个糟糕的软件。</p>

<p>奖金可能在一个项目负责人希望激励成员找出bug或添加功能的时候有用。但是，项目负责人不可能给出组有的钱来请人开发(假如这样的话，还不如直接雇佣他们了)。假如一个项目负责人简单的声明，“我觉得x功能很有用，欢迎大家来实现它。”这已经起到了激励作用，奖金就完全没有必要了。最理想的情况，就像Mikeal Rogers出钱请人来找bug，这只是一种让人写代码的营销手段。</p>

<p>奖金只有在一个有明确目标的项目中才会起作用，就像查找安全漏洞。<a href="http://www.cs.berkeley.edu/~devdatta/papers/vrp-paper.pdf">漏洞奖励计划</a>发现给予奖金会比直接雇佣一个安全专家来的更行之有效。找出一些其他的有明确胜利目标的场景也是很有意思的。</p>

<p>然而，上面的只是一些例外，而不是常态。公司使用开源软件的时候通常并不会急着要某一个功能，或者在早期就发现一堆的bug。他们会与一些程序要保持联络来让他们的需求得以实现。这并不是明确的要求给程序加某个改动，而是在他们需要的时候，可以保证让程序加上这些特征。就像让某些人随时待命一样。</p>

<h2 id="section-2">顾问合同</h2>

<p>另一种给开源软件筹款的方式是签订一份顾问合同，用户可以向专家咨询，而专家则会仔细的对待这些问题。这可能包括登陆到某个系统或者临时帮程序员做debug，或解释一些稀奇古怪的错误消息，或检查代码来找出为什么它跑起来会这么奇怪。</p>

<p>Joyent付给我钱就是应为他们需要我来帮忙调试Node和npm的一些问题。</p>

<p>我想这应该是公司给开源软件开发者付钱的最通行的一种做法，相比于雇佣一个专业领域的开发者，这种做法更经济。</p>

<p>公司经常会使用很多不同的开源软件。假如签订顾问成本的开销比雇佣人来专管所有这些软件的成本要小，那么公司就可以从中获得好处了，他们可以花更少的钱，得到更好的服务。</p>

<p>此外，至少在理想情况下，这种激励并不让人反感。在产品中找问题是不可避免的，虽然这并不是很有趣。假如我知道我涉及其中，那么我会尽量写出强健，简单而容易调试的软件。这对每一个人都有好处，即使对于那些不为我的软件花钱的人。</p>

<p>当然，你任然可以发现有些不尽如人意的地方。但是“假如你给我X美元每个月，那么我会在24小时内回你邮件，并且每个月用N小时来解决你的问题。”要比“假如你现在给我X美元，我会在三个月内拿出你要的Y功能(而且不会有错)。”容易理解的多。在我平日的生活中，我仍然能感觉到在做着喜欢的工作，而且能帮助到有困难的用户。金钱是很有吸引力的一个东西，但不是至高无上的。</p>

<p>然而，这种方式任然存在很多问题。</p>

<p>我们的开源软件变得越来越模块化，而且相互依赖，“开发者”会变得很难追踪。这可能很快就会导致相互指责。假如你和某一个依赖我的代码的开发者签了合同，他们可能就会为了修改我的bug而迁怒于我，而且他们通常与我的想法不同。这种“分包”管理的方式看起来并不是很行之有效。</p>

<p>其次，大部分开源软件开发者并不擅长做顾问。擅长Javascript，运维或C语言不表示你就做给出最好的客户支持，或者你该做出那些改动。结果就是，开发者被大公司牵着鼻子走。软件变得越来越大而臃肿。这并不是一件很可怕的事，反正有大公司为它买单。但是它却忽略了中小型公司做需要的效率问题。</p>

<p>我们的软件变得越来越模块化和互相依赖，而且大部分开发者并不擅长推销他们的服务，那么第三个问题产生了。服务提供者必须很清楚明白自己能提供那些服务。比方说，你能对Node提供支持，但是你肯定不能保证对npm中的所有模块提供支持。</p>

<p>在理想世界中，这些都是可以解决的问题。这里有一大堆的问题，而且有无数的社会和技术问题等着人来解决。一个用户怎么可能找到合适的人来解决这些问题？又如何为这些问题公平的买单？你怎么才能避免开发者们在合作问题上起争端呢？</p>

<p>分出合理的技术水平，合理的分配收入，给正确的开发者分配任务，这是一个综合性的复杂问题。假设这不是很难而且现在已经有人能解决这个问题，是不现实的。</p>

<h2 id="section-3">未来</h2>

<p>我希望开源软件在某一天能被看成是一个“吃香的”职业，尤其是当你并没有在公司里获得一个“真正的”职位时。假如更多的人能享受自由的生活方式，而不用为他们的财政问题担心，这就更好了。这也可能应发更多的有趣的争论，像是为一个项目兼职，或是为开源软件的工作做出一些改变。</p>

<p>在技术行业中，人们始终能找到一起合作或创业的机会，或者给公司打工。我有很多很好的工作经历，通常是在不完全封闭的公司。然而，我并不认为这是让我们作为社会的一员而做出最大贡献的最佳方法。</p>

<p>那些自由软件开发者所得比不上其所付出，这是很可悲的。而更可悲的是某些人对这些做出巨大奉献的开发者的苛求。他们做出了巨大的贡献，而大部分却入不敷出。</p>

<p>大部分人都能做这类工作，而且可能会更有效率。但是，为了满足经济需要，他们最后还是找了份工作，这看起来是一种低效的做法。假如开源软件开发者能获得足够的动力和激励，谁能想象我们的发展会有多迅速？</p>

<h2 id="section-4">附录：没有提及的话题</h2>

<ol>
  <li>
    <p>为什么我做开源软件的时候更有创造力也更快乐？</p>
  </li>
  <li>
    <p>为什么开源软件对技术行业有帮助？</p>
  </li>
  <li>
    <p>对开放才算开源？“开放源代码” 对比 “开放式开发”</p>
  </li>
</ol>

<p>我不能对这些问题做出解答，应为这篇文章已经够长的了。我的目的不是在这里卖开源软件。请在今后的文章中关注这些话题。</p>

<h1 id="section-5">参考</h1>

<p><a href="https://medium.com/building-gittip/d44a1953749c">Money and Open Source</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[金钱与开源(part1)]]></title>
    <link href="http://jingxin.me/blog/blog/2013/12/08/jin-qian-yu-kai-yuan-part1/"/>
    <updated>2013-12-08T14:24:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2013/12/08/jin-qian-yu-kai-yuan-part1</id>
    <content type="html"><![CDATA[<blockquote>
  <p>注：本文作者是npm的作者<a href="http://blog.izs.me/">Isaac Z. Schlueter</a>，也是nodejs的主要作者之一</p>
</blockquote>

<p>“我们需要找到更好的方法来为开源软件筹资”，这是我近几年反复思考的一个问题，下面我要说的或许是一种解决方案。</p>

<p>大部分开发者在传统的合作方式下都干得不错。激励方式也很简单：努力工作，改善产品，帮助团队完成产品，然后取得共赢。当一切正常时，这种方式很好。你会发现自己很有归属感，而且在不断的自我提高。</p>

<p>但这并不适用于所有人。出于愚蠢的安全性考虑，你可能需要牺牲一些灵活性和创造力。至少，它会限制你的软件的适用范围，因此它能提供的价值也仅止于此。</p>

<p>自从我开始全身心投入编写开源软件，我感觉非常愉快，而且更有创造力了。事实上，我不会接受一份要求我放弃编写开源软件的工作，我也很有幸能有足够的资本来避免做出这种荒唐的决定。当然，这也可能导致很坏的结果，但是我很幸运的用这些时间来写了<a href="https://npmjs.org/">npm</a>，然后<a href="http://www.joyent.com/">Joyent</a>和<a href="http://nodejs.org/">Node.js</a>开始迅速发展起来，现在我在干的正是这些。</p>

<h2 id="section">艺术家和浪客</h2>

<p>可悲的是，很多有望成为开源软件界超级明星的人并没有我这么幸运。没有钱是万万不能的，而最实际的赚钱方式就是找一个工作。</p>

<p>很多雇主希望“让”雇员用“私人的”时间来处理自己的项目，或者至少能贡献给公司的项目（通着这些项目会带有一份公司的保密条款）。这并不是很明智，“自由(free)”时间并不“免费(free)”，将精力全花在工作上会让你失去应有的生活。</p>

<p>有些人则放弃了在公司工作的机会，成为了一个自由职业者，换句话说，一个挨着饿的艺术家。他们用最少的时间来接一些活，然后将剩余的时间和创造力花在开发开源软件上。但这是一种很窘迫的生活方式，特别是需要供孩子上学的时候，甚至连抚养孩子都有困难。</p>

<p>这就是我们和社会面临的困境。开源软件给软件工业带来了巨大的好处，也就意味着，给所有工业领域提供了巨大的帮助。假如专注于开源软件的都是一些幸运和热情的人，那么这里面就存在很多未经发掘的潜力股。</p>

<p>假如我们想继续从开源软件中得到好处，特别是想让这种好处最大化的话，我们就得找出一种为它买单的方式。除了能让开源软件开发者吃饱喝足以外，付款也能将他们的努力与现实世界联系在一起。</p>

<p>下面我会提到一些这个领域的开发现状。每一个都一些致命的缺点，而且我还能找到解决这些问题的办法。我不认为这会让我们觉得悲观，这些需要解决的问题反而让我们觉得正朝着正确的方向前进。</p>

<h2 id="section-1">合同，训练，咨询……</h2>

<p>许多开发者通过签订短期合同来为喜欢的项目工作。虽然这有时是一个不错的赚钱养家的方式。但是我并不认为它从根源上解决了开源软件筹资的问题。</p>

<p>这与成为一个传统雇员，然后用空余时间来处理开源项目没什么不同。这并不能让开发者直接通过他们的开源项目来盈利。就像做培训和别的一些活一样，这并没有真正的为开源软件筹资，这只不过是你通过开源软件找到了一份工作而已。</p>

<p>话虽如此，合同当然可以资助一个人其他的开源活动，同样提供临时援助也能帮助创业者步入正轨。</p>

<h2 id="section-2">专职员工</h2>

<p>一种为开源软件筹资的方式是让雇员在工作时间为开源项目做贡献。这正是Node核心项目的运作方式。Joyent，StrongLoop, Voxer, Mozilla, LearnBoost, 和Microsoft的雇员都会将他们的部分工作时间花在Node上面。</p>

<p>（注：我没有在这里囊括那些用私人时间开发项目的人。这当然也很重要，但是“动用你的私人时间来做项目”正是这里遇到的问题。）</p>

<p>这样的效果相当好，事实上带来的好处是，能让软件更符合他们大部分用户的需求。当公司付给你薪水的时候，你就会觉得有必要为自己的代码负责。假如一个团队完全不考虑用户需求的开发软件，这会显得相当的不靠谱。</p>

<p>任何能给开源软件生态系统带来益处的方法都值得鼓励。
但是这种方式也存在一些问题。</p>

<p>当一个社区项目由现实中的企业驱动时，往往企业会利用它的优势地位，来做出一些符合自己利益的改变。从长远来看，这会损害项目的可靠性和预期目标。Joyent的高级副总裁Bryan Cantrill对这些事情可能导致的严重后果有一个很精彩的演讲：<a href="http://smartos.org/2012/07/27/corporate-open-source-anti-patterns-doing-it-wrong/">企业反开源模式：大错特错</a></p>

<p>就算企业能考虑尽量避免上面的情况发生（这样做得很少），表面上（对企业）的优待条件也会给社区带来损害。开源社区的很多人认为企业的利益本质上就是邪恶的。这样说并不客观，但是考虑到这些企业的反开源模式，这样说也并不是毫无道理。</p>

<p>此外，这种解决方案的可能性微乎其微，作为企业雇员，开源项目完全符合企业利益的情况是微乎其微的。当然，大多数使用Node的公司可能不能让Nodejs核心开发者雇员做出一个像样的商业应用，嗯~，可能是运气的问题吧。</p>

<blockquote>
  <p>实在太长了，未完待续… :)</p>
</blockquote>

<h1 id="section-3">参考</h1>

<p><a href="https://medium.com/building-gittip/d44a1953749c">Money and Open Source</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[TDWTF] 我们相信傻瓜]]></title>
    <link href="http://jingxin.me/blog/blog/2013/06/20/tdwtf-wo-men-xiang-xin-sha-gua/"/>
    <updated>2013-06-20T16:06:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2013/06/20/tdwtf-wo-men-xiang-xin-sha-gua</id>
    <content type="html"><![CDATA[<p>一天早上，Stan去找他的上级Monty，他正在疯狂地的敲着键盘。这意味着两件事：明天他会收到一封讨厌的设计文档，而且那个设计中会用到一个从没用过的数据库。Monty是一个数据库“砖家”，没什么问题是他不能搞定的。Stan在这家公司的第一年，照做了Monty描述的每个设想，因为他不知道有哪些更好的办法。现在他对公司系统有了更多的了解，他渴望有个机会来做一些正确的事。</p>

<p>Stan在邮箱里找到了一份客户发给Monty的需求副本，要求两个ASP.NET应用之间能互相通信。Stan喜上心头，这是一个简单的web服务，既然他们用.NET，那么只要用<a href="http://en.wikipedia.org/wiki/Windows_Communication_Foundation">WCF</a>就行了。</p>

<p>Monty的介入绝对不可能玷污这个方案，他连.NET的基础都不懂。自从入职的第一天起，Stan就想着能对系统的设计有些话语权，这样才像一个“真正的开发”。最后，这个机会来了！</p>

<p>第二天，Monty的设计发到了Stan的邮箱。Stan心不在焉的打开它，就像一个验尸官掀开一张裹尸布。他翻开这份足足45页的“可扩展性数据库驱动进程内通讯框架”。这有点难理解，而且看起来有点像是重复造轮子。里面几乎没有提及客户的应用，因为它看起来想要将任意应用连接在一起。</p>

<p>这个设计需要用到11张数据表来传递元数据（发送，接收，时间戳，用户id，等等）和应用数据（统统被转成字符串并且储存在类似列1，列2等等的字段中）。当一个应用想要给另一个发送消息，它需要发送所有的会话/消息数据给一个存储过程。这个存储过程接收75个参数，大部分是可选的。另一个类似的存储过程允许发送者附加特殊的应用数据。而对于一个接收者，它需要调用<code>SP_CHECK_FOR_MESSAGES_POLLING_PROCEDURE</code>存储过程并传入它的<code>PK_INT_APPLICATION_IDENTIFIER</code>标识。当它消费完这条消息，还要调用<code>SP_MESSAGE_TRANSACTION_COMPLETE_PROCEDURE</code>存储过程来从“收件箱”中清除消息。Monty的系统会将这个事务中的所有数据移到一个结构相同的log表中，但是没有任何完整性可言。</p>

<p>在Stan砸碎屏幕之前，他听到Monty得意洋洋的说：“我对这事很兴奋，我希望这个能用在任何事上！”</p>

<p>“任何事？”Stan抑制住汹涌而来的恶心感。是时候让他坚持自己的原则，来表明他不再是那个毫无主见的职场新人了。“这个实现。。。很有趣，但是没必要用数据库来实现它”。</p>

<p>Monty一笑置之。</p>

<p>“.NET有个叫WCF的框架可以来帮助我们实现这个功能，”Stan继续说，“我们只需要写很少-”</p>

<p>“不行，”Monty不容置疑的说，虽然Stan知道假如他问Monty什么是“WCF”，Monty肯定会顾左右而言他。“我们在调试系统时会碰到一堆的问题。我们需要知道应用和应用之间是怎么通信的，谁，在什么时候，发送了消息。而且我们会将它储存在一个安全的地方。”</p>

<p>“但是，有一大堆的工具可以用来调试WC-”</p>

<p>“请实现我设计的系统。”Monty不留余地的走开了，以防Stan再有什么说辞。</p>

<p>Stan在与内心抗争中，花了几个礼拜的时间来实现这个冒牌的规范。错误不断的冒出来，而且没有什么好办法来解决强数据类型和同步性的问题。加入这种预防措施会让这庞然大物跑的更慢，虽然它已经够慢的了，而且仍然没法保证它按照预期工作。同时，Monty与客户的沟通不畅导致需求不断的变化。他的设计一天天的变化，最后成了一个64页的设计文档，需要14个数据表。</p>

<p>Stan受够了。他最后只能求助Monty的老板David。David实行开门迎客政策。Stan向David描述了现状。</p>

<p>“这不仅仅走了弯路，而且也不是客户想要的。用WCF的话我本来可以在几个礼拜前就完工，但是Monty不想这么干。”Stan总结到，“我觉得现在改正还为时不晚，但是Monty不赞成这样做。您能向他解释一下吗？”</p>

<p>David叹息道：“我知道了”。</p>

<p>终于！Stan兴奋地想他的建议成功了。</p>

<p>David停顿了一小会儿，然后像一个先知布道一样说，“你叫Stan是吧？Monty。。。有一些怪癖，有时候他会让你做一些毫无意义的事。我需要你继续下去并且相信一切都会好起来。他从公司成立时就在这儿了，我们的系统就像他的孩子一样，所以他知道哪种方式最合适。”</p>

<p>Stan明白现在最理智的是什么事情，他一言不发的回到自己的座位，经过一个小时的沉思，永远的离开了这个办公室。</p>

<h2 id="section">后记</h2>

<p>故事归故事，但很多公司的现状如此，如果不能在工作中提高自己，那么就想办法提高工作。后面的的<a href="http://thedailywtf.com/Comments/In-Fool-We-Trust.aspx">评论</a>也很有意思，可以看一下。</p>

<p>原文链接：<a href="http://thedailywtf.com/Articles/In-Fool-We-Trust.aspx">In Fool We Trust</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[nginx] if is evil]]></title>
    <link href="http://jingxin.me/blog/blog/2013/05/15/nginx-if-is-evil/"/>
    <updated>2013-05-15T17:36:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2013/05/15/nginx-if-is-evil</id>
    <content type="html"><![CDATA[<p>最近用nginx配置中使用if遇到一些问题，碰巧想起以前在wiki中看到的这个页面，虽然我的问题可能和wiki中提到的不同，但是if还是能避免就避免吧</p>

<p>下面的内容翻译自<a href="http://wiki.nginx.org/IfIsEvil">IfIsEvil</a></p>

<h1 id="ifisevil-">IfIsEvil (标题就不翻了，保持原汁原味的比较带感)</h1>

<h2 id="section">简介</h2>

<p><a href="http://wiki.nginx.org/NginxHttpRewriteModule#if"><code>if</code></a>指令在使用在<code>location</code>上下文中时有一些问题。有时候它不能如你所愿，而是做一些完全相反的事情。有时候甚至会引发分段错误。通常来说应该尽量避免使用<code>if</code>。</p>

<p>唯一100%可以安全的在<code>location</code>上下文中使用<code>if</code>的场景是：</p>

<ul>
  <li><a href="http://wiki.nginx.org/NginxHttpRewriteModule#return">return</a> …;</li>
  <li><a href="http://wiki.nginx.org/NginxHttpRewriteModule#rewrite">rewrite</a> … last;</li>
</ul>

<p>任何其他情况都可能引发不可预知的行为，包括潜在的分段错误。</p>

<p>需要注意的是<code>if</code>的行为并不是始终如一的。两个相同的请求不会在其中一个上失败而在另一个上成功，通过完善的测试并且对<code>if</code>有深刻理解的话，它可以使用。但是仍然强烈建议使用其他指令来代替。</p>

<p>这些情况下可能你不能轻易的避免使用<code>if</code>，比如说你想测试一个变量，就没有类似的指令可以替代。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">if</span> <span class="s">(</span><span class="nv">$request_method</span> <span class="p">=</span> <span class="s">POST</span> <span class="s">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kn">return</span> <span class="mi">405</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="s">(</span><span class="nv">$args</span> <span class="p">~</span> <span class="sr">post=140)</span><span class="p">{</span>
</span><span class='line'>  <span class="kn">rewrite</span> <span class="s">^</span> <span class="s">http://example.com/</span> <span class="s">permanent</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="section-1">用什么替代</h2>

<p>在符合你的需求前提下，可以用<a href="http://wiki.nginx.org/NginxHttpCoreModule#try_files"><code>try_files</code></a>代替。在其他情况下用”return …“或”rewrite … last”。在有些情况下可以将<code>if</code>移动到server级别（在这里它是安全的，只有其他重写模块指令允许写在它里面）。</p>

<p>例如，下面的的用法在处理请求时可以安全的修改<code>location</code>。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">location</span> <span class="s">/</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">error_page</span> <span class="mi">418</span> <span class="p">=</span> <span class="s">@other</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">recursive_error_pages</span> <span class="no">on</span><span class="p">;</span><span class="kn">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;if</span> <span class="s">(</span><span class="nv">$something</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">return</span> <span class="mi">418</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 一些配置</span>
</span><span class='line'><span class="kn">...</span> <span class="err">}</span>
</span><span class='line'><span class="s">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;location</span> <span class="s">@other</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1"># 其他配置</span>
</span><span class='line'>    <span class="kn">…</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>有些情况下，使用嵌入式脚本模块（<a href="http://wiki.nginx.org/EmbeddedPerlModule">嵌入式perl</a>，或其他<a href="http://wiki.nginx.org/3rdPartyModules">第三方模块</a>）来写这些脚本。</p>

<h2 id="section-2">例子</h2>

<p>下面是一些例子用来解释为什么”if is evil”。不要在家里尝试这些，你被警告过了。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="c1"># 下面用一些意想不到的bug来说明在location块中if is evil</span>
</span><span class='line'><span class="c1"># 只有第二个header会被输出到响应，这事实上不是bug，它就是这样工作的。&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">&lt;p&gt;location</span> <span class="s">/only-one-if</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">set</span> <span class="nv">$true</span> <span class="mi">1</span><span class="p">;</span><span class="kn">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">add_header</span> <span class="s">X-First</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">add_header</span> <span class="s">X-Second</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kn">return</span> <span class="mi">204</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;h1</span> <span class="s">id=&quot;uriif&quot;&gt;请求会被发送到后端但是uri不会改变为’/’，这是if造成的&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;location</span> <span class="s">/proxy-pass-uri</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:8080/</span><span class="p">;</span><span class="kn">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;set</span> <span class="nv">$true</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1"># nothing</span>
</span><span class='line'><span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="k">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;h1</span> <span class="s">id=&quot;iftryfiles&quot;&gt;因为if的问题，try_files不会起作用&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;location</span> <span class="s">/if-try-files</span> <span class="p">{</span>
</span><span class='line'>     <span class="kn">try_files</span>  <span class="s">/file</span>  <span class="s">@fallback</span><span class="p">;</span><span class="kn">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;</span> <span class="s">set</span> <span class="nv">$true</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="c1"># nothing</span>
</span><span class='line'> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="k">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;h1</span> <span class="s">id=&quot;nginx&quot;&gt;nginx会引发段冲突&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;location</span> <span class="s">/crash</span> <span class="p">{</span><span class="kn">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;set</span> <span class="nv">$true</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1"># fastcgi_pass here</span>
</span><span class='line'>    <span class="kn">fastcgi_pass</span>  <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">9000</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1"># no handler here</span>
</span><span class='line'><span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="k">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;h1</span> <span class="s">id=&quot;iflocation&quot;&gt;捕获的别名在if创造的嵌套location中不会被正确的继承&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;location</span> <span class="p">~</span><span class="sr">*</span> <span class="s">^/if-and-alias/(?&lt;file&gt;.*)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">alias</span> <span class="s">/tmp/</span><span class="nv">$file</span><span class="p">;</span><span class="kn">&lt;/file&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;set</span> <span class="nv">$true</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1"># nothing</span>
</span><span class='line'><span class="p">}</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>假如你发现了一个没有在上面列出来的例子 - 请将它报告给<a href="http://wiki.nginx.org/User:MaximDounin">MaximDounin</a>。</p>

<h2 id="section-3">为什么这些问题存在但没有被修复</h2>

<p><code>if</code>指令是重写模块的一部分而且是必须的。从另一方面说，nginx的配置通常来说是说明式的。有些用户希望尝试在<code>if</code>指令中使用非重写的指令，这造成了这种处境。它大部分时间是有效的，但是。。。瞧上面。</p>

<p>看起来唯一正确的方式就是完全避免在<code>if</code>中使用非重写指令。这会破坏很多已存在的配置，所以这没有被实施。</p>

<h2 id="if">假如你还是想用<code>if</code></h2>

<p>假如你读了上面的内容仍然想用<code>if</code>：</p>

<ul>
  <li>请确保你知道它是怎么工作的。一些基础知识可以<a href="http://agentzh.blogspot.com/2011/03/how-nginx-location-if-works.html">看这里</a></li>
  <li>做完整的测试</li>
</ul>

<p>你被警告过了。</p>

<p><a href="http://wiki.nginx.org/IfIsEvil">原文链接</a></p>
]]></content>
  </entry>
  
</feed>
