<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: translation | CodeBean]]></title>
  <link href="http://sailxjx.github.io/blog/blog/categories/translation/atom.xml" rel="self"/>
  <link href="http://sailxjx.github.io/blog/"/>
  <updated>2013-06-21T10:37:39+08:00</updated>
  <id>http://sailxjx.github.io/blog/</id>
  <author>
    <name><![CDATA[tristan]]></name>
    <email><![CDATA[sailxjx@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[TDWTF] 我们相信傻瓜]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2013/06/20/tdwtf-wo-men-xiang-xin-sha-gua/"/>
    <updated>2013-06-20T16:06:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2013/06/20/tdwtf-wo-men-xiang-xin-sha-gua</id>
    <content type="html"><![CDATA[<p>一天早上，Stan去找他的上级Monty，他正在疯狂地的敲着键盘。这意味着两件事：明天他会收到一封讨厌的设计文档，而且那个设计中会用到一个从没用过的数据库。Monty是一个数据库“砖家”，没什么问题是他不能搞定的。Stan在这家公司的第一年，照做了Monty描述的每个设想，因为他不知道有哪些更好的办法。现在他对公司系统有了更多的了解，他渴望有个机会来做一些正确的事。</p>

<p>Stan在邮箱里找到了一份客户发给Monty的需求副本，要求两个ASP.NET应用之间能互相通信。Stan喜上心头，这是一个简单的web服务，既然他们用.NET，那么只要用<a href="http://en.wikipedia.org/wiki/Windows_Communication_Foundation">WCF</a>就行了。</p>

<p>Monty的介入绝对不可能玷污这个方案，他连.NET的基础都不懂。自从入职的第一天起，Stan就想着能对系统的设计有些话语权，这样才像一个“真正的开发”。最后，这个机会来了！</p>

<p>第二天，Monty的设计发到了Stan的邮箱。Stan心不在焉的打开它，就像一个验尸官掀开一张裹尸布。他翻开这份足足45页的“可扩展性数据库驱动进程内通讯框架”。这有点难理解，而且看起来有点像是重复造轮子。里面几乎没有提及客户的应用，因为它看起来想要将任意应用连接在一起。</p>

<p>这个设计需要用到11张数据表来传递元数据（发送，接收，时间戳，用户id，等等）和应用数据（统统被转成字符串并且储存在类似列1，列2等等的字段中）。当一个应用想要给另一个发送消息，它需要发送所有的会话/消息数据给一个存储过程。这个存储过程接收75个参数，大部分是可选的。另一个类似的存储过程允许发送者附加特殊的应用数据。而对于一个接收者，它需要调用<code>SP_CHECK_FOR_MESSAGES_POLLING_PROCEDURE</code>存储过程并传入它的<code>PK_INT_APPLICATION_IDENTIFIER</code>标识。当它消费完这条消息，还要调用<code>SP_MESSAGE_TRANSACTION_COMPLETE_PROCEDURE</code>存储过程来从“收件箱”中清除消息。Monty的系统会将这个事务中的所有数据移到一个结构相同的log表中，但是没有任何完整性可言。</p>

<p>在Stan杂碎屏幕之前，他听到Monty得意洋洋的说：“我对这事很兴奋，我希望这个能用在任何事上！”</p>

<p>“任何事？”Stan抑制住汹涌而来的恶心感。是时候让他坚持自己的原则，来表明他不再是那个毫无主见的职场新人了。“这个实现。。。很有趣，但是没必要用数据库来实现它”。</p>

<p>Monty一笑置之。</p>

<p>“.NET有个叫WCF的框架可以来帮助我们实现这个功能，”Stan继续说，“我们只需要写很少-”</p>

<p>“不行，”Monty不容置疑的说，虽然Stan知道假如他问Monty什么是“WCF”，Monty肯定会顾左右而言他。“我们在调试系统时会碰到一堆的问题。我们需要知道应用和应用之间是怎么通信的，谁，在什么时候，发送了消息。而且我们会将它储存在一个安全的地方。”</p>

<p>“但是，有一大堆的工具可以用来调试WC-”</p>

<p>“请实现我设计的系统。”Monty不留余地的走开了，以防Stan再有什么说辞。</p>

<p>Stan在与内心抗争中，花了几个礼拜的时间来实现这个冒牌的规范。错误不断的冒出来，而且没有什么好办法来解决强数据类型和同步性的问题。加入这种预防措施会让这庞然大物跑的更慢，虽然它已经够慢的了，而且仍然没法保证它按照预期工作。同时，Monty与客户的沟通不畅导致需求不断的变化。他的设计一天天的变化，最后成了一个64页的设计文档，需要14个数据表。</p>

<p>Stan受够了。他最后只能求助Monty的老板David。David实行开门迎客政策。Stan向David描述了现状。</p>

<p>“这不仅仅走了弯路，而且也不是客户想要的。用WCF的话我本来可以在几个礼拜前就完工，但是Monty不想这么干。”Stan总结到，“我觉得现在改正还为时不晚，但是Monty不赞成这样做。您能向他解释一下吗？”</p>

<p>David叹息道：“我知道了”。</p>

<p>终于！Stan兴奋地想他的建议成功了。</p>

<p>David停顿了一小会儿，然后像一个先知布道一样说，“你叫Stan是吧？Monty。。。有一些怪癖，有时候他会让你做一些毫无意义的事。我需要你继续下去并且相信一切都会好起来。他从公司成立时就在这儿了，我们的系统就像他的孩子一样，所以他知道哪种方式最合适。”</p>

<p>Stan明白现在最理智的是什么事情，他一言不发的回到自己的座位，经过一个小时的沉思，永远的离开了这个办公室。</p>

<h2 id="section">后记</h2>

<p>故事归故事，但很多公司的现状如此，如果不能在工作中提高自己，那么就想办法提高工作。后面的的<a href="http://thedailywtf.com/Comments/In-Fool-We-Trust.aspx">评论</a>也很有意思，可以看一下。</p>

<p>原文链接：<a href="http://thedailywtf.com/Articles/In-Fool-We-Trust.aspx">In Fool We Trust</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[nginx] if is evil]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2013/05/15/nginx-if-is-evil/"/>
    <updated>2013-05-15T17:36:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2013/05/15/nginx-if-is-evil</id>
    <content type="html"><![CDATA[<p>最近用nginx配置中使用if遇到一些问题，碰巧想起以前在wiki中看到的这个页面，虽然我的问题可能和wiki中提到的不同，但是if还是能避免就避免吧</p>

<p>下面的内容翻译自<a href="http://wiki.nginx.org/IfIsEvil">IfIsEvil</a></p>

<h1 id="ifisevil-">IfIsEvil (标题就不翻了，保持原汁原味的比较带感)</h1>

<h2 id="section">简介</h2>

<p><a href="http://wiki.nginx.org/NginxHttpRewriteModule#if"><code>if</code></a>指令在使用在<code>location</code>上下文中时有一些问题。有时候它不能如你所愿，而是做一些完全相反的事情。有时候甚至会引发分段错误。通常来说应该尽量避免使用<code>if</code>。</p>

<p>唯一100%可以安全的在<code>location</code>上下文中使用<code>if</code>的场景是：</p>

<ul>
  <li><a href="http://wiki.nginx.org/NginxHttpRewriteModule#return">return</a> …;</li>
  <li><a href="http://wiki.nginx.org/NginxHttpRewriteModule#rewrite">rewrite</a> … last;</li>
</ul>

<p>任何其他情况都可能引发不可预知的行为，包括潜在的分段错误。</p>

<p>需要注意的是<code>if</code>的行为并不是始终如一的。两个相同的请求不会在其中一个上失败而在另一个上成功，通过完善的测试并且对<code>if</code>有深刻理解的话，它可以使用。但是仍然强烈建议使用其他指令来代替。</p>

<p>这些情况下可能你不能轻易的避免使用<code>if</code>，比如说你想测试一个变量，就没有类似的指令可以替代。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">if</span> <span class="s">(</span><span class="nv">$request_method</span> <span class="p">=</span> <span class="s">POST</span> <span class="s">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kn">return</span> <span class="mi">405</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="s">(</span><span class="nv">$args</span> <span class="p">~</span> <span class="sr">post=140)</span><span class="p">{</span>
</span><span class='line'>  <span class="kn">rewrite</span> <span class="s">^</span> <span class="s">http://example.com/</span> <span class="s">permanent</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="section-1">用什么替代</h2>

<p>在符合你的需求前提下，可以用<a href="http://wiki.nginx.org/NginxHttpCoreModule#try_files"><code>try_files</code></a>代替。在其他情况下用”return …“或”rewrite … last”。在有些情况下可以将<code>if</code>移动到server级别（在这里它是安全的，只有其他重写模块指令允许写在它里面）。</p>

<p>例如，下面的的用法在处理请求时可以安全的修改<code>location</code>。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">location</span> <span class="s">/</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">error_page</span> <span class="mi">418</span> <span class="p">=</span> <span class="s">@other</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">recursive_error_pages</span> <span class="no">on</span><span class="p">;</span><span class="kn">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;if</span> <span class="s">(</span><span class="nv">$something</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">return</span> <span class="mi">418</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 一些配置</span>
</span><span class='line'><span class="kn">...</span> <span class="err">}</span>
</span><span class='line'><span class="s">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;location</span> <span class="s">@other</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1"># 其他配置</span>
</span><span class='line'>    <span class="kn">…</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>有些情况下，使用嵌入式脚本模块（<a href="http://wiki.nginx.org/EmbeddedPerlModule">嵌入式perl</a>，或其他<a href="http://wiki.nginx.org/3rdPartyModules">第三方模块</a>）来写这些脚本。</p>

<h2 id="section-2">例子</h2>

<p>下面是一些例子用来解释为什么”if is evil”。不要在家里尝试这些，你被警告过了。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="c1"># 下面用一些意想不到的bug来说明在location块中if is evil</span>
</span><span class='line'><span class="c1"># 只有第二个header会被输出到响应，这事实上不是bug，它就是这样工作的。&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">&lt;p&gt;location</span> <span class="s">/only-one-if</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">set</span> <span class="nv">$true</span> <span class="mi">1</span><span class="p">;</span><span class="kn">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">add_header</span> <span class="s">X-First</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">add_header</span> <span class="s">X-Second</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kn">return</span> <span class="mi">204</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;h1</span> <span class="s">id=&quot;uriif&quot;&gt;请求会被发送到后端但是uri不会改变为’/’，这是if造成的&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;location</span> <span class="s">/proxy-pass-uri</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:8080/</span><span class="p">;</span><span class="kn">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;set</span> <span class="nv">$true</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1"># nothing</span>
</span><span class='line'><span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="k">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;h1</span> <span class="s">id=&quot;iftryfiles&quot;&gt;因为if的问题，try_files不会起作用&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;location</span> <span class="s">/if-try-files</span> <span class="p">{</span>
</span><span class='line'>     <span class="kn">try_files</span>  <span class="s">/file</span>  <span class="s">@fallback</span><span class="p">;</span><span class="kn">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;</span> <span class="s">set</span> <span class="nv">$true</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="c1"># nothing</span>
</span><span class='line'> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="k">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;h1</span> <span class="s">id=&quot;nginx&quot;&gt;nginx会引发段冲突&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;location</span> <span class="s">/crash</span> <span class="p">{</span><span class="kn">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;set</span> <span class="nv">$true</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1"># fastcgi_pass here</span>
</span><span class='line'>    <span class="kn">fastcgi_pass</span>  <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">9000</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1"># no handler here</span>
</span><span class='line'><span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="k">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;h1</span> <span class="s">id=&quot;iflocation&quot;&gt;捕获的别名在if创造的嵌套location中不会被正确的继承&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;location</span> <span class="p">~</span><span class="sr">*</span> <span class="s">^/if-and-alias/(?&lt;file&gt;.*)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">alias</span> <span class="s">/tmp/</span><span class="nv">$file</span><span class="p">;</span><span class="kn">&lt;/file&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;set</span> <span class="nv">$true</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1"># nothing</span>
</span><span class='line'><span class="p">}</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>假如你发现了一个没有在上面列出来的例子 - 请将它报告给<a href="http://wiki.nginx.org/User:MaximDounin">MaximDounin</a>。</p>

<h2 id="section-3">为什么这些问题存在但没有被修复</h2>

<p><code>if</code>指令是重写模块的一部分而且是必须的。从另一方面说，nginx的配置通常来说是说明式的。有些用户希望尝试在<code>if</code>指令中使用非重写的指令，这造成了这种处境。它大部分时间是有效的，但是。。。瞧上面。</p>

<p>看起来唯一正确的方式就是完全避免在<code>if</code>中使用非重写指令。这会破坏很多已存在的配置，所以这没有被实施。</p>

<h2 id="if">假如你还是想用<code>if</code></h2>

<p>假如你读了上面的内容仍然想用<code>if</code>：</p>

<ul>
  <li>请确保你知道它是怎么工作的。一些基础知识可以<a href="http://agentzh.blogspot.com/2011/03/how-nginx-location-if-works.html">看这里</a></li>
  <li>做完整的测试</li>
</ul>

<p>你被警告过了。</p>

<p><a href="http://wiki.nginx.org/IfIsEvil">原文链接</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql btree 与 hash 索引比较]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2013/05/07/mysql-btree-yu-hash-suo-yin-bi-jiao/"/>
    <updated>2013-05-07T11:45:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2013/05/07/mysql-btree-yu-hash-suo-yin-bi-jiao</id>
    <content type="html"><![CDATA[<p>mysql最常用的索引结构是btree(<code>O(log(n))</code>)，但是总有一些情况下我们为了更好的性能希望能使用别的类型的索引。hash就是其中一种选择，例如我们在通过用户名检索用户id的时候，他们总是一对一的关系，用到的操作符只是<code>=</code>而已，假如使用hash作为索引数据结构的话，时间复杂度可以降到<code>O(1)</code>。不幸的是，目前的mysql版本(5.6)中，hash只支持MEMORY和NDB两种引擎，而我们最常用的INNODB和MYISAM都不支持hash类型的索引。</p>

<p>不管怎样，还是要了解一下这两种索引的区别，下面翻译自<a href="http://dev.mysql.com/doc/refman/5.6/en/index-btree-hash.html">mysql官网文档</a>中对这两者的解释。</p>

<h2 id="b-tree-">B-Tree 索引特征</h2>
<p>B-Tree索引可以被用在像<code>=</code>,<code>&gt;</code>,<code>&gt;=</code>,<code>&lt;</code>,<code>&lt;=</code>和<code>BETWEEN</code>这些比较操作符上。而且还可以用于<code>LIKE</code>操作符，只要它的查询条件是一个不以通配符开头的常量。像下面的语句就可以使用索引：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">tbl_name</span> <span class="k">WHERE</span> <span class="n">key_col</span> <span class="k">LIKE</span> <span class="err">‘</span><span class="n">Patrick</span><span class="o">%</span><span class="err">’</span><span class="p">;</span>
</span><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">tbl_name</span> <span class="k">WHERE</span> <span class="n">key_col</span> <span class="k">LIKE</span> <span class="err">‘</span><span class="n">Pat</span><span class="o">%</span><span class="n">_ck</span><span class="o">%</span><span class="err">’</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>下面这两种情况不会使用索引：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">tbl_name</span> <span class="k">WHERE</span> <span class="n">key_col</span> <span class="k">LIKE</span> <span class="err">‘</span><span class="o">%</span><span class="n">Patrick</span><span class="o">%</span><span class="err">’</span><span class="p">;</span>
</span><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">tbl_name</span> <span class="k">WHERE</span> <span class="n">key_col</span> <span class="k">LIKE</span> <span class="n">other_col</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>第一条是因为它以通配符开头，第二条是因为没有使用常量。</p>

<p>假如你使用<code>... LIKE '%string%'</code>而且<code>string</code>超过三个字符，MYSQL使用<code>Turbo Boyer-Moore algorithm</code>算法来初始化查询表达式，然后用这个表达式来让查询更迅速。</p>

<p>一个这样的查询<code>col_name IS NULL</code>是可以使用<code>col_name</code>的索引的。</p>

<p>任何一个没有覆盖所有<code>WHERE</code>中<code>AND</code>级别条件的索引是不会被使用的。也就是说，要使用一个索引，这个索引中的第一列需要在每个<code>AND</code>组中出现。</p>

<p>下面的<code>WHERE</code>条件会使用索引：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="err">…</span> <span class="k">WHERE</span> <span class="n">index_part1</span><span class="o">=</span><span class="mi">1</span> <span class="k">AND</span> <span class="n">index_part2</span><span class="o">=</span><span class="mi">2</span> <span class="k">AND</span> <span class="n">other_column</span><span class="o">=</span><span class="mi">3</span>
</span><span class='line'>    <span class="cm">/* index = 1 OR index = 2 &lt;em&gt;/</span>
</span><span class='line'><span class="cm">… WHERE index=1 OR A=10 AND index=2</span>
</span><span class='line'><span class="cm">    /&lt;/em&gt; 优化成 “index_part1=’hello’” &lt;em&gt;/</span>
</span><span class='line'><span class="cm">… WHERE index_part1=’hello’ AND index_part3=5</span>
</span><span class='line'><span class="cm">    /&lt;/em&gt; 可以使用 index1 的索引但是不会使用 index2 和 index3 */</span>
</span><span class='line'><span class="err">…</span> <span class="k">WHERE</span> <span class="n">index1</span><span class="o">=</span><span class="mi">1</span> <span class="k">AND</span> <span class="n">index2</span><span class="o">=</span><span class="mi">2</span> <span class="k">OR</span> <span class="n">index1</span><span class="o">=</span><span class="mi">3</span> <span class="k">AND</span> <span class="n">index3</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>下面的<code>WHERE</code>条件不会使用索引：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'>    <span class="cm">/* index_part1 没有被使用到 */</span>
</span><span class='line'><span class="err">…</span> <span class="k">WHERE</span> <span class="n">index_part2</span><span class="o">=</span><span class="mi">1</span> <span class="k">AND</span> <span class="n">index_part3</span><span class="o">=</span><span class="mi">2</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/* 索引 index 没有出现在每个 where 子句中 */</span> <span class="p">...</span> <span class="k">WHERE</span> <span class="k">index</span><span class="o">=</span><span class="mi">1</span> <span class="k">OR</span> <span class="n">A</span><span class="o">=</span><span class="mi">10</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* 没有索引覆盖所有列 */</span> <span class="p">...</span> <span class="k">WHERE</span> <span class="n">index_part1</span><span class="o">=</span><span class="mi">1</span> <span class="k">OR</span> <span class="n">index_part2</span><span class="o">=</span><span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>有时候mysql不会使用索引，即使这个在可用的情况下。例如当mysql预估使用索引会读取大部分的行数据时。（在这种情况下，一次全表扫描可能比使用索引更快，因为它需要更少的检索）。然而，假如语句中使用<code>LIMIT</code>来限定返回的行数，mysql则会使用索引。因为当结果行数较少的情况下使用索引的效率会更高。</p>

<h2 id="hash-">Hash 索引特征</h2>

<p>Hash类型的索引有一些区别于以上所述的特征：</p>

<ul>
  <li>
    <p>它们只能用于对等比较，例如<code>=</code>和<code>&lt;=&gt;</code>操作符（但是快很多）。它们不能被用于像<code>&lt;</code>这样的范围查询条件。假如系统只需要使用像“键值对”的这样的存储结构，尽量使用hash类型索引。</p>
  </li>
  <li>
    <p>优化器不能用hash索引来为<code>ORDER BY</code>操作符加速。（这类索引不能被用于搜索下一个次序的值）</p>
  </li>
  <li>
    <p>mysql不能判断出两个值之间有多少条数据（这需要使用范围查询操作符来决定使用哪个索引）。假如你将一个<code>MyISAM</code>表转为一个依靠hash索引的<code>MEMORY</code>表，可能会影响一些语句（的性能）。</p>
  </li>
  <li>
    <p>只有完整的键才能被用于搜索一行数据。（假如用B-tree索引，任何一个键的片段都可以用于查找。我觉得可能意味着带通配符<code>LIKE</code>操作符会不起作用）。</p>
  </li>
</ul>

<h1 id="section">后记</h1>

<p>顺便记录一下在使用mysql过程中碰到的一些问题：</p>

<ul>
  <li>有时候使用脚本迁移数据时会碰到乱码的问题，即使将表字符集设置成<code>utf8</code>也无济于事，这个时候在执行sql之前加一句<code>set names utf8</code>即可。</li>
</ul>

<h1 id="section-1">参考文档</h1>

<ul>
  <li><a href="http://dev.mysql.com/doc/refman/5.6/en/index-btree-hash.html">index-btree-hash</a></li>
  <li><a href="http://dba.stackexchange.com/questions/2817/why-does-mysql-not-have-hash-indices-on-myisam-or-innodb">why-does-mysql-not-have-hash-indices-on-myisam-or-innodb</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[TDWTF] 耐心测试]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2013/04/25/tdwtf-nai-xin-ce-shi/"/>
    <updated>2013-04-25T12:09:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2013/04/25/tdwtf-nai-xin-ce-shi</id>
    <content type="html"><![CDATA[<p>在Eric的公司，发布流程中代码从来就没有经过正规的测试。不是说没有这些流程，当然得有。毕竟哪有公司会不经过测试就将代码发布给用户。但是“严格测试”和“健壮度检验”跟他们的公司从来不沾边。甚至连“成功的演示”和“满足用户”这些原则都没有，但这又是另一回事了。</p>

<p>其中一个原因是公司认为为了测试付出大量金钱没什么好处。难道开发人员不应该保证代码不出问题？这有什么难的？</p>

<p>虽然如此，公司里仍有一些谨慎的人认为需要在发布新的应用之前做一些测试。所以他们指派了一些测试人员。然而，这些测试人员仅仅是一些半吊子。除了测试外他们还干一些别的事情。比如 Mark，就是一个客户支持人员-特别一线客户支持。一个任何人都轻视或者想摆脱的家伙。</p>

<p>Mark 接到一个任务是测试 Eric 写的新应用。所以当 Eric 收到一个由 Mark 提交到跟踪系统的新 bug 时，并不感到奇怪。由于距离交付日期只剩下一个礼拜，Eric 赶快读了一遍描述。</p>

<blockquote>
  <p>概要：粘贴不起作用<br />
描述：我在记事本中选择了一些文本。然后到软件中去粘贴这些文本，但是不起作用。而且我发现粘贴菜单是灰的。</p>
</blockquote>

<p>Eric 有一点迷惑，也仅有“一点儿”。这已经不是他第一次忘了在剪贴板中有内容时开启粘贴功能了。他启动软件，然后照着 Mark 的步骤做。但是没用，他不能重现这个问题。他粗略的过了一遍代码发现粘贴功能是被启用了。所以他给 bug 加了个注释然后重新指派给 Mark。</p>

<blockquote>
  <p>我尝试重现你说的问题，但是没有效果。你还做了些别的操作吗？</p>
</blockquote>

<p>两天以后，这个问题被加了条注释，重新指派给 Eric</p>

<blockquote>
  <p>我可能忘了一个步骤，当我复制文本之后，我把软件关了。这对你有帮助吗？</p>
</blockquote>

<p>这消息可能有用，Eric 想。然后他回过头去 debug。他尝试关闭记事本，关闭并重启他的软件。他关闭 Visual Studio。他甚至想关闭当地的核电站。但是粘贴功能始终可用。即使他一行行的看代码也没找出问题在哪里。不得已，他在 bug 后加了另一条注释并重新指派给 Mark</p>

<blockquote>
  <p>我尝试了各种关闭的组合，仍然不能重现这个问题。你再想想还有别的操作忘了提吗？</p>
</blockquote>

<p>这次只用了两个小时就收到了回复</p>

<blockquote>
  <p>恐怕我忘了提一件事，在我关闭你的软件之后，我重启了我的电脑。希望这能对你有所帮助。:)</p>
</blockquote>

<p>Eric 愣住了。脑中呈现中一堆难以名状的复杂感情。他对这个公司没有合格和测试人员而感到愤怒，对于 Mark 而言，只是一个重要的 bug 被修复了。风平浪静之后，是剩下疲倦。Mark 慢吞吞的将 bug 的状态改为“关闭-设计如此”。</p>

<p><a href="http://thedailywtf.com/Articles/Testing-Patience.aspx">原文链接</a></p>

<h2 id="section">后记</h2>

<p>这篇文章有些句子不太好翻译，例如最后一段的</p>

<blockquote>
  <p>Rage at the company for not having competent testers. Pity for Mark because…well… Relief that a significant bug had been put to rest.</p>
</blockquote>

<p>只能靠上下文来猜个大概。心理描写这种虚幻的东西还是不太好直译啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[TDWTF] 苏格兰早餐]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2013/04/18/tdwtf-su-ge-lan-zao-can/"/>
    <updated>2013-04-18T11:32:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2013/04/18/tdwtf-su-ge-lan-zao-can</id>
    <content type="html"><![CDATA[<p>这几天Robert感觉自己简直像英国国王一样。他为一个开发加密软硬件的英国公司工作，并不时在欧洲各地的客户端间飞来飞去。一天，一个叫Willie的苏格兰客户打电话过来，气急败坏的说他的加密服务器挂掉了。“啊~我已经尽了一切奴力！但祂还是泡不起来！”Robert安抚了一下Willie，然后按部就班得问一些问题。（它安装上了吗？开关开了没有？是不是加密组件没有正确的连接上？还是你的服务器被一只巨大的海怪给吃了？）但是毫无结果。</p>

<p>Robert只能跟Willie说：只有上机服务能解决这个问题了，但是我这周没有时间。“我今天在法国处理另一个客户的问题。”</p>

<p>“这可不行，哥们！我需要在这周末我去亚伯丁看足球之前让它能工作起来！”当Robert跟Willie说周末的紧急服务会产生高昂的费用时，Willie毫不犹豫的答应了。</p>

<p>Robert周六搭上了红眼的航班，Willie付了一大笔钱让他乘头等舱。Robert一边享用着热腾腾的坚果和毛巾，一边思考是什么搞坏了Willie的加密系统。它没有记录任何错误日志，而且最近一直工作正常。证据的缺乏让Robert的思绪一团糟。这绝不可能是一个简单的问题。</p>

<p>下飞机之后，Robert在一家四星级酒店签了到，但是没有时间睡觉了。他匆匆吃了宾馆的“大餐”，吃起来像是肉馅羊肚，而不是他一开始以为的鸡蛋配面包。</p>

<p>Robert将他的出租车停在一座没有窗户的浅褐色仓库前。要不是Willie跑出来迎接他，他差点要怀疑自己是不是找到了正确的地方，离开这个地方。“怎么这么就！你是不是掉海里面去了！近来！”Willie带着他穿过一个昏暗的走廊，到一个巨大的仓库中。这个回荡着回音的房间空空荡荡，只有一个吊钟，服务器，还有加密机。“我已经拂过钱了，所以你最好快点给我解决问题！”Willie嚷道。</p>

<p>Robert扫了一边硬件，注意到连接这安全机器的电线松了。他将螺丝拧紧，打开开关，然后加密机就像一个苏格兰球霸吃了红牌一样起死回生了。“额，这就是你的问题。。。”Robert说，看都不看Willie。</p>

<p>“天呐，太棒了。哥们！你搞定他了！”Willie给了Robert一个粗暴的熊抱。Robert告别了Willie回英国。在回去的航班上，他给Willie准备了这次旅途和修复问题的发票。当他看到短短五分钟的事就赚到了几千镑，忍不住偷着乐起来。我好，他好，大家好才是真的好嘛~</p>

<p><a href="http://thedailywtf.com/Articles/The-Scottish-Breakfast.aspx?utm_source=feedly">原文连接</a></p>

<h2 id="section">后记</h2>

<p>这篇文章中居然碰到了一个有这浓重口音的苏格兰人？。这让我想到了前几天听到的一个笑话：</p>

<blockquote>
  <p>一个同事和一个印度人闲聊，当人家问他：“where is your balance?”，他一下子愣住了。这句话是什么意思？是问他有没有能不能找到生活的平衡点吗？他答道：“Sorry I don’t known.”那印度人很惊讶：“You don’t known your balance!”。后来那同事问了别人，人家告诉他，这是在问你“你的父母在那里”。</p>
</blockquote>

<p>讲方言真的很有喜感。</p>
]]></content>
  </entry>
  
</feed>
