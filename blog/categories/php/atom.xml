<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | CodeBean]]></title>
  <link href="http://jingxin.me/blog/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://jingxin.me/blog/"/>
  <updated>2016-09-20T11:33:29+08:00</updated>
  <id>http://jingxin.me/blog/</id>
  <author>
    <name><![CDATA[Xu Jingxin]]></name>
    <email><![CDATA[sailxjx@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[php 闭包：并不像看上去那么美好]]></title>
    <link href="http://jingxin.me/blog/blog/2013/07/05/php-bi-bao-bing-bu-xiang-kan-shang-qu-na-me-mei-hao/"/>
    <updated>2013-07-05T10:27:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2013/07/05/php-bi-bao-bing-bu-xiang-kan-shang-qu-na-me-mei-hao</id>
    <content type="html"><![CDATA[<p>最近一个叫<a href="http://laravel.com/">laravel</a>的php框架在社区讨论的风生水起，号称php界的rails，试用了一下，确实非常新鲜，但是又有种似曾相识的感觉。</p>

<p>例如路由中的一段代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>兄弟，你走错了，隔壁javascript出门左拐。</p>

<p>laravel号称将php5.3中新引入的闭包发扬光大，让代码变得更加灵活优雅，趣味十足。</p>

<p>在我看来，坑更多了。</p>

<p>为什么说php闭包没有看上去那么美好，因为他的生搬硬套。</p>

<p>闭包这个概念早已不新鲜，在函数是语言中被早已被用烂了，以至于现在lisp教徒抨击其他语言时都避而不谈closure和lambda，转而讨论currying，otp，metaprogramming等等更玄乎的东西。</p>

<p>php的闭包不能说引入的太晚，没有跟上编程发展的脚步，其实在php4时代，就已经有了这样的概念，<code>call_user_func</code>，<code>array_map</code>等等方法都是支持callback方法的。但是时至今日，它依然是不完善的。</p>

<p>在发展的过程中，php引入了很多舶来品，例如接口，命名空间，异常控制等等，每种都是对自身语言已有编程风格的颠覆，以至于现在同样是编写php，不同的人能写出完全不同风格的代码。自然闭包也非原创，同样很怪异。</p>

<h1 id="section">作用域</h1>

<p>在javascript中，闭包内的变量是继承上层的，这是一种很自然的做法，也相当的灵活。但是php有自身的一套作用域规则，于是在闭包中使用变量就变得非常怪异，例如下面的例子：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$v</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="nv">$arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span><span class='line'><span class="nb">array_map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$n</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$n</span> <span class="o">==</span> <span class="nv">$v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s1">&#39;exist&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'><span class="p">},</span> <span class="nv">$arr</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这个<code>use</code>就是用来解决作用域的问题的，使用时可得瞧准咯，每个要用到的变量都得用<code>use</code>引入哦。然后当闭包身处类中时，情况又不一样了，下面的做法在php5.3中是错误的：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">class Demo {&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;protected $val = &#39;v&#39;;</span>
</span><span class='line'>
</span><span class='line'><span class="x">public function getClosure() {</span>
</span><span class='line'><span class="x">    return function() {</span>
</span><span class='line'><span class="x">        return $this-&amp;gt;val;</span>
</span><span class='line'><span class="x">    };</span>
</span><span class='line'><span class="x">} }</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;$d = new Demo();</span>
</span><span class='line'><span class="x">echo call_user_func($d-&amp;gt;getClosure()), “\n”;</span>
</span><span class='line'><span class="x">?&amp;gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>因为php5.3不支持在闭包中使用<code>$this</code>或<code>self</code>关键字，但是在php5.4中得到了支持，所以上面的代码是可运行的，但是这让上面第一个例子情何以堪呢。</p>

<h1 id="section-1">绑定</h1>

<p>在5.4之后，php开始支持将一个闭包绑定到别的对象上，以便能直接调用这个对象的成员：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;class Clo {&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;public function __construct($val) {</span>
</span><span class='line'><span class="x">    $this-&amp;gt;val = $val;</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">function getClosure() {</span>
</span><span class='line'><span class="x">    return function() {</span>
</span><span class='line'><span class="x">        echo $this-&amp;gt;val, &quot;\n&quot;;</span>
</span><span class='line'><span class="x">    };</span>
</span><span class='line'><span class="x">} }</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;class Wrap {</span>
</span><span class='line'><span class="x">    protected $val = 3;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;public function bar($foo) {</span>
</span><span class='line'><span class="x">    call_user_func($foo);</span>
</span><span class='line'><span class="x">} }</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;$a = new Clo(1);</span>
</span><span class='line'><span class="x">$wrap = new Wrap();</span>
</span><span class='line'><span class="x">call_user_func($a-&amp;gt;getClosure());</span>
</span><span class='line'><span class="x">call_user_func($a-&amp;gt;getClosure()-&amp;gt;bindTo($wrap, $wrap));</span>
</span><span class='line'><span class="x">?&amp;gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这在某些场景下有用武之地，不过也要注意作用域，<code>bindTo</code>方法中的第二个参数是设置作用域的，向上面<code>Wrap</code>类中的变量<code>$val</code>是私有的，假如没有<code>bindTo</code>的第二个参数，是行不通滴。</p>

<h1 id="generator">Generator</h1>

<p>顺便再提一下php5.5中新增的Generator，其中的yield支持运行时自定义方法，这显然又是从隔壁python借鉴来的，调用方式同样不是很自然，foreach承担了迭代的责任，相比于ruby中yield的强大功能，更是差之千里了。</p>

<p>不过有总比没有要好，将来一定有创意丰富的人能玩出更多花样，哦，貌似又多了一种编程风格。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[细数 php 中的那些坑]]></title>
    <link href="http://jingxin.me/blog/blog/2013/05/10/xi-shu-php-zhong-de-na-xie-keng/"/>
    <updated>2013-05-10T15:59:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2013/05/10/xi-shu-php-zhong-de-na-xie-keng</id>
    <content type="html"><![CDATA[<p>Wow，有逮到一个黑PHP的，作为“宇宙中最好的编程语言”，被黑只会加速它的改进，所以偶尔黑一下也无妨嘛~正所谓世界上只有两种语言，一种是被人黑的，另一种是没人用的。</p>

<p>进入正题，下面开始罗列一些PHP需要防备的坑，以免一不小心掉了进去。(只包含在5.3中仍然存在的，5.4中已修复的会做一下说明)。</p>

<h2 id="section">变量类型</h2>
<p>说PHP入门门槛低，其中一个原因是我们不需要关心变量的类型，PHP为我们做了自动的转化。但事实上是这样吗？下面就是一个隐蔽的bug。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="s1">&#39;string&#39;</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">==&amp;gt; true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>很神奇吧，php在这里自动将字符串作为整数0来比较了。由此引发了一系列问题：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$a</span> <span class="o">=</span> <span class="s2">&quot;1234567&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$a</span><span class="p">[</span><span class="s1">&#39;test&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="o">==&gt;</span> <span class="mi">1</span>  <span class="c1">//坑爹的等同于$a[0], php5.4会给出一个非法索引warning，但是仍然返回1，php5.3则连warning都没有。</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$a</span><span class="p">[</span><span class="s1">&#39;test&#39;</span><span class="p">]));</span>
</span><span class='line'><span class="o">==&gt;</span> <span class="k">true</span>  <span class="c1">//这是一个完全错误的结果，在php5.4中得到修复</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nb">in_array</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;xxx&#39;</span><span class="p">)));</span>
</span><span class='line'><span class="o">==&gt;</span> <span class="k">true</span>  <span class="c1">//这也是一个令人费解的bug，暂且还是理解为php将&#39;xxx&#39;转化成0了吧</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nb">in_array</span><span class="p">(</span><span class="k">false</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;xxx&#39;</span><span class="p">)));</span>
</span><span class='line'><span class="o">==&gt;</span> <span class="k">false</span>  <span class="c1">//与之相对的，这个结果确是符合预料的。问题是，在php中0==false呀。</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>所以当一个表达式中同时包含0和字符串的时候就要特别留意了，以免被奇葩的bug坑了。</p>

<h2 id="section-1">比较符号</h2>

<h3 id="section-2">等号<code>==</code>与不等<code>!=</code></h3>

<p>严格的来说，PHP中的<code>==</code>符号完全没有作用，因为<code>'string' == true</code>，而且<code>'string' == 0</code>，<strong>但是</strong>，<code>true != 0</code>。</p>

<p>然后是<code>123 == "123foo"</code>，但是当你用引号将123包起来以明确说明这是一个字符串时，<code>'123' != "123foo"</code>，但是在现实中，谁会用常量比较呢，这个123换成了一个变量，而根据php的哲学，谁会在意这个变量是什么类型。</p>

<p>在使用其他进制的时候这种混淆尤其明显，像下面的例子:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="s2">&quot;133&quot;</span> <span class="o">==</span> <span class="s2">&quot;0133&quot;</span><span class="p">;</span>
</span><span class='line'><span class="mi">133</span> <span class="o">==</span> <span class="s2">&quot;0133&quot;</span><span class="p">;</span>
</span><span class='line'><span class="mi">133</span> <span class="o">==</span> <span class="mo">0133</span><span class="p">;</span>    <span class="c1">//因为0133是一个八进制数，转成十进制是91</span>
</span><span class='line'><span class="s2">&quot;0133&quot;</span> <span class="o">!=</span> <span class="mi">91</span><span class="p">;</span>   <span class="c1">//字符串中的数字始终是十进制的，这个也可以理解</span>
</span><span class='line'><span class="s2">&quot;0x10&quot;</span> <span class="o">==</span> <span class="mi">16</span><span class="p">;</span>   <span class="c1">//但是!，在十六进制中上面的说法又不成立了</span>
</span><span class='line'><span class="s2">&quot;1e3&quot;</span> <span class="o">==</span> <span class="mi">1000</span><span class="p">;</span>  <span class="c1">//科学计数表示也一样</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="section-3">大于<code>&gt;</code>小于<code>&lt;</code></h3>

<p>被搞糊涂的话，下面还有：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">null</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>  <span class="c1">//这个可以理解</span>
</span><span class='line'><span class="k">null</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>  <span class="c1">//但是你会想到这个吗？难道zend认为0&lt;-1？</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>使用<code>==</code>时，参照javascript中的做法，我们可以使用<code>===</code>让比较更规范一些，但是<code>&gt;</code>,<code>&lt;</code>这些怎么办？只能尽量避免。</p>

<h2 id="section-4">三元运算符</h2>

<p>很多语言都提供了三元运算符<code>?:</code>，因为它足够简洁，也够geek。但是php中的表现与其他语言中又不同：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$arg</span> <span class="o">=</span> <span class="s1">&#39;T&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$vehicle</span> <span class="o">=</span> <span class="p">(</span> <span class="p">(</span> <span class="nv">$arg</span> <span class="o">==</span> <span class="s1">&#39;B&#39;</span> <span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;bus&#39;</span> <span class="o">:</span>
</span><span class='line'>             <span class="p">(</span> <span class="nv">$arg</span> <span class="o">==</span> <span class="s1">&#39;A&#39;</span> <span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;airplane&#39;</span> <span class="o">:</span>
</span><span class='line'>             <span class="p">(</span> <span class="nv">$arg</span> <span class="o">==</span> <span class="s1">&#39;T&#39;</span> <span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;train&#39;</span> <span class="o">:</span>
</span><span class='line'>             <span class="p">(</span> <span class="nv">$arg</span> <span class="o">==</span> <span class="s1">&#39;C&#39;</span> <span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;car&#39;</span> <span class="o">:</span>
</span><span class='line'>             <span class="p">(</span> <span class="nv">$arg</span> <span class="o">==</span> <span class="s1">&#39;H&#39;</span> <span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;horse&#39;</span> <span class="o">:</span>
</span><span class='line'>             <span class="s1">&#39;feet&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$vehicle</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>猜猜结果是什么？’horse’，而我们预料中的（在其他语言中）应该是’train’。这种做法被称为”left associative”(左结合)，也即上面的表达式在php看来等同于<code>$vehicle = (condition) ? 'horse' : 'feet'</code>，所以你永远不可能得到中间的结果，这有违人的第一感觉，也与其他语言正好相反。</p>

<h2 id="empty">empty</h2>

<p>empty是我在php中非常喜欢的一个方法，这里我说错了，其实它是一个语言结构，而不是一个方法，但是它的使用方式又像一个方法。于是，empty()中包含运算式的话是会报错的，这也造成了它的局限性。</p>

<h2 id="section-5">数组</h2>

<p>php中的数组应该是一个’数组’,’hash表’,’集合’的结合体，这在使用上有它的方便之处，但是也造成了一些不易理解的地方，尤其体现在一些array相关的方法上。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">array</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;bar&quot;</span><span class="p">,</span> <span class="s2">&quot;foo&quot;</span><span class="p">);</span>  <span class="c1">//这个时候，array就是数组</span>
</span><span class='line'><span class="k">array</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;bar&quot;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;foo&quot;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>  <span class="c1">//这个时候，array又变成了无序hash表</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>好吧，其实php中的array就是一个hash表，无论什么情况下。<code>array('bar', 'foo')</code>就是<code>array('0'=&gt;'bar', '1'=&gt;'foo')</code>，这样对理解array的一些奇怪表现应该会有帮助，但是下面的方法，有推翻了上面的论述，我将它算做一个bug：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$first</span>  <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span> <span class="o">=&gt;</span> <span class="mi">123</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span> <span class="o">=&gt;</span> <span class="mi">456</span><span class="p">);</span>
</span><span class='line'><span class="nv">$second</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span> <span class="o">=&gt;</span> <span class="mi">456</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span> <span class="o">=&gt;</span> <span class="mi">123</span><span class="p">);</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nb">array_diff</span><span class="p">(</span><span class="nv">$first</span><span class="p">,</span> <span class="nv">$second</span><span class="p">));</span>
</span><span class='line'><span class="o">==&gt;</span> <span class="k">array</span><span class="p">()</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>看到了吧，如果array是个hash表的话，$first和$second显然是不一样的。但是diff的结果却认为这是两个一样的数组。所以在愉快的使用array时，别忘了停下来，测试一下这些隐含的bug。</p>

<h2 id="section-6"><code>++</code>与<code>--</code></h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$a</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'><span class="nv">$a</span> <span class="o">++</span><span class="p">;</span>  <span class="c1">// $a == 1, 可以理解</span>
</span><span class='line'><span class="nv">$a</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'><span class="nv">$a</span> <span class="o">--</span><span class="p">;</span>  <span class="c1">// $a == null, 凌乱了</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>解决这种<code>++</code>和<code>--</code>中的不一致的办法就是根本不用它们，用<code>+=</code>和<code>-=</code>代替。</p>

<h2 id="section-7">命名习惯</h2>

<p>下面这些就与bug无关了，而是php中过于随意的命名规则和变量顺序，像<code>htmlentities</code>和<code>html_entity_decode</code>，你能想象这两个方法是一张纸的两面吗？</p>

<p>其实方法的命名不规范问题也不大，但是变量顺序混乱就要人命了，比如array中的一大堆方法，看起来都以array打头，相当清晰。但是你能料到<code>array_filter($input, $callback)</code>和<code>array_map($callback, $input)</code>两个方法的回调方法位置正好相反吗？我就经常记错<code>strpos</code>中哪个参数才是该被搜索的字符串。</p>

<p>还有一个要命的地方就是很多参数的引用传递不明，比如上面的<code>array_filter</code>是对源对象的一个拷贝，但是<code>array_walk</code>却是一个引用。这些在<a href="http://www.php.net/">php.net</a>上有“粗略”的说明，我想谁也不希望一边翻文档一边写代码吧。</p>

<h2 id="section-8">错误控制</h2>

<p>关于php的错误控制其实是一个关于“配置优于约定”还是“约定优于配置”的讨论，而显然php选择了前者。在php中，有一个全局的配置文件“php.ini”，里面关于错误控制的两个选项<code>error_reporting</code>和<code>display_errors</code>分别代表错误等级和是否显示错误。</p>

<p>这没有问题，问题是这些配置在运行时是可以修改的。有些框架或有些人为了掩盖无处不在的<code>notice</code>，将<code>error_reporting</code>等级调高，或者索性将<code>display_errors</code>设置为<code>off</code>，这会让其他开发者困惑，让错误无迹可寻。</p>

<p>这也不是什么问题，最大的问题是php中还有<code>set_error_handler</code>和<code>set_exception_handler</code>，看字面意思，这两个都是用来控制错误的。但是在php中，<code>error</code>和<code>exception</code>却是不一样的。于是你要么在框架里写上两套一样的<code>handler</code>方法，要么就索性都不写，由php去决定这些错误该以什么形式表现。最糟糕的是只写一个或者写两套不一样的<code>handler</code>，这回让人困惑为什么有些错误以一种形式表现，而一些错误又以别的方式出现，而且要找到这些<code>handler</code>也不是一件容易的事，他们可能出现在任何一个文件的任何一个角落，除非你用<code>debug_backtrace</code>将堆栈信息都打印出来。</p>

<h2 id="section-9">后记</h2>

<p>以上大部分内容和例子来自<a href="http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/">PHP: a fractal of bad design</a>，一个狂热的python教徒。我不是python教徒，甚至连爱好者都说不上，所以写这篇文章只是为了记录php中存在的bug，以防一不小心被坑了。只有有了这些意识，才能在这门语言中更好的发挥，物尽其用。</p>

<h1 id="section-10">相关链接</h1>
<p><a href="http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/">PHP: a fractal of bad design</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[react.php 中的异步实现]]></title>
    <link href="http://jingxin.me/blog/blog/2013/03/05/react-dot-php-zhong-de-yi-bu-shi-xian/"/>
    <updated>2013-03-05T15:29:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2013/03/05/react-dot-php-zhong-de-yi-bu-shi-xian</id>
    <content type="html"><![CDATA[<p>在基于事件的异步模型大行其道的今天，各语言都相继推出了自己的异步框架，nodejs原生的异步模型当然是其中的翘楚，然后python有Twisted，ruby有EventMachine(名字俗了点)。php也有一个不错的异步框架，<a href="https://github.com/reactphp/react">react</a>。下面我们从内而外的看看这个异步模型是怎么实现的。</p>

<h3 id="vnement">événement</h3>

<p>首先react的事件模型是建立在一个叫<a href="https://github.com/igorw/evenement">événement</a>的框架上，也是react作者所作，代码只有短短的74行，实现了<code>on</code>(事件监听),<code>emit</code>(触发事件)等方法。下面就单就这两个事件方法分析一下。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">public function on($event, $listener)</span>
</span><span class='line'><span class="x">    {</span>
</span><span class='line'><span class="x">        if (!is_callable($listener)) {</span>
</span><span class='line'><span class="x">            throw new \InvalidArgumentException(‘The provided listener was not a valid callable.’);</span>
</span><span class='line'><span class="x">        }&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;    if (!isset($this-&amp;gt;listeners[$event])) {</span>
</span><span class='line'><span class="x">        $this-&amp;gt;listeners[$event] = array();</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'>
</span><span class='line'><span class="x">    $this-&amp;gt;listeners[$event][] = $listener;</span>
</span><span class='line'><span class="x">} public function emit($event, array $arguments = array())</span>
</span><span class='line'><span class="x">{</span>
</span><span class='line'><span class="x">    foreach ($this-&amp;gt;listeners($event) as $listener) {</span>
</span><span class='line'><span class="x">        call_user_func_array($listener, $arguments);</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">} ?&amp;gt; </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>上面的<code>$event</code>其实就是一个事件标识，一般是一个字符串，<code>$listener</code>是一个回调方法。调用<code>on</code>时用数组listeners记录所有回调方法，调用<code>emit</code>时再按次序触发，由此还衍生了<code>once</code>(只触发一次就解除绑定的事件)，<code>removeListener</code>(移除事件)等方法。</p>

<h3 id="eventloop">EventLoop</h3>

<p>更进一步，react事件模型的上一层是一个监听循环，叫做<code>EventLoop</code>，有了这个，就往消息队列或webserver的异步处理模型更近了一步。</p>

<p>下面可以看一下<code>EventLoop</code>的接口文件<code>LoopInterface.php</code>：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">namespace React\EventLoop;</span>
</span><span class='line'><span class="x">interface LoopInterface</span>
</span><span class='line'><span class="x">{</span>
</span><span class='line'><span class="x">    public function addReadStream($stream, $listener);</span>
</span><span class='line'><span class="x">    public function addWriteStream($stream, $listener);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;public function removeReadStream($stream);</span>
</span><span class='line'><span class="x">public function removeWriteStream($stream);</span>
</span><span class='line'><span class="x">public function removeStream($stream);</span>
</span><span class='line'>
</span><span class='line'><span class="x">public function addTimer($interval, $callback);</span>
</span><span class='line'><span class="x">public function addPeriodicTimer($interval, $callback);</span>
</span><span class='line'><span class="x">public function cancelTimer($signature);</span>
</span><span class='line'>
</span><span class='line'><span class="x">public function tick();</span>
</span><span class='line'><span class="x">public function run();</span>
</span><span class='line'><span class="x">public function stop(); } ?&amp;gt; </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p><code>react</code>支持php的社区库<code>libevent</code>提供的事件支持，同时有个<code>LibEventLoop.php</code>用来实现<code>LoopInterface</code>接口，但是<code>react</code>也有自己的实现方案<code>StreamSelectLoop</code>，与<code>LibEventLoop</code>不兼容，这点可以在<code>EventLoop\LibEventLoop\Factory</code>中看到。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">create</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// @codeCoverageIgnoreStart</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">function_exists</span><span class="p">(</span><span class="s1">&#39;event_base_new&#39;</span><span class="p">))</span> <span class="p">{</span> <span class="c1">//使用libevent</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nx">LibEventLoop</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nx">StreamSelectLoop</span><span class="p">();</span> <span class="c1">//不使用libevent</span>
</span><span class='line'>        <span class="c1">// @codeCoverageIgnoreEnd</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>我们主要来看看<code>StreamSelectLoop</code>的实现。<code>LoopInterface</code>中几个重要的方法<code>addReadStream</code>, <code>addWriteStream</code>, <code>addTimer</code>, <code>tick</code>都可以在<code>StreamSelectLoop</code>找到踪影。下面先说一下<code>addReadStream</code>中的两个参数：</p>

<p>*<code>$stream</code>是一个由<code>stream_socket_server</code>方法生成的socket句柄，支持tcp或文件socket等方式。
*<code>$listener</code>其实就是一个callback方法，在这个方法中就需要实现具体的应用逻辑了。</p>

<p><code>addWriteStream</code>与<code>addReadStream</code>方法差不多，这两个方法其实啥都没做，只是注册一下两个方法，以供后面调用。真正起作用的方法是<code>tick</code>和<code>runStreamSelect</code>。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">    protected function runStreamSelect()</span>
</span><span class='line'><span class="x">    {</span>
</span><span class='line'><span class="x">        $read = $this-&amp;gt;readStreams ?: null;</span>
</span><span class='line'><span class="x">        $write = $this-&amp;gt;writeStreams ?: null;</span>
</span><span class='line'><span class="x">        $except = null;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;    if (!$read &amp;amp;&amp;amp; !$write) {</span>
</span><span class='line'><span class="x">        $this-&amp;gt;sleepOnPendingTimers();</span>
</span><span class='line'>
</span><span class='line'><span class="x">        return;</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'>
</span><span class='line'><span class="x">    if (stream_select($read, $write, $except, 0, $this-&amp;gt;getNextEventTimeInMicroSeconds()) &amp;gt; 0) {</span>
</span><span class='line'><span class="x">        if ($read) {</span>
</span><span class='line'><span class="x">            foreach ($read as $stream) {</span>
</span><span class='line'><span class="x">                $listener = $this-&amp;gt;readListeners[(int) $stream];</span>
</span><span class='line'><span class="x">                if (call_user_func($listener, $stream, $this) === false) {</span>
</span><span class='line'><span class="x">                    $this-&amp;gt;removeReadStream($stream);</span>
</span><span class='line'><span class="x">                }</span>
</span><span class='line'><span class="x">            }</span>
</span><span class='line'><span class="x">        }</span>
</span><span class='line'>
</span><span class='line'><span class="x">        if ($write) {</span>
</span><span class='line'><span class="x">            foreach ($write as $stream) {</span>
</span><span class='line'><span class="x">                if (!isset($this-&amp;gt;writeListeners[(int) $stream])) {</span>
</span><span class='line'><span class="x">                    continue;</span>
</span><span class='line'><span class="x">                }</span>
</span><span class='line'>
</span><span class='line'><span class="x">                $listener = $this-&amp;gt;writeListeners[(int) $stream];</span>
</span><span class='line'><span class="x">                if (call_user_func($listener, $stream, $this) === false) {</span>
</span><span class='line'><span class="x">                    $this-&amp;gt;removeWriteStream($stream);</span>
</span><span class='line'><span class="x">                }</span>
</span><span class='line'><span class="x">            }</span>
</span><span class='line'><span class="x">        }</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">} ?&amp;gt; </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p><code>runStreamSelect</code>方法在<code>tick</code>方法中被调用，目的是在每个间隔中重复调用之前绑定的<code>$listener</code>方法，这个可以理解，因为本来<code>EventLoop</code>的目的就是实现事件的监听，监听的最简单方法就是通过轮询的方式来调用，假如某些方法不希望被重复调用或者希望在某次成功之后就不再调用，那么在定义<code>$listener</code>方法时，将返回值设置成false即可。至于这个间隔，则是通过<code>Timer</code>来实现的。</p>

<p>在<code>runStreamSelect</code>中调用了一个有意思的方法<a href="http://php.net/manual/en/function.stream-select.php"><code>stream_select</code></a>，用timeout取代传统的<code>sleep</code>，并兼具监听socket端口的功能，一旦有新的连接或者改动，<code>stream_select</code>会立刻返回read或write中被修改的socket连接总数。这样，既能合理的释放cpu资源，又能及时对事件发起响应。比起传统的<code>while+sleep</code>，实在是高明很多。</p>

<h3 id="timer">Timer</h3>

<p>说到<code>tick</code>就不得不提<code>Timer</code>，<code>react</code>中用一个<code>Timer</code>类来模拟步进操作。每隔一定的ticket会唤起一个事件，这样才能保证异步操作能正确的被调用，这个ticket的数量有讲究，设置的太小会让系统耗用大量资源，设置的太大又不能保证异步事件能及时的被调用。下面我们来看看<code>Timer</code>中的tick。</p>

<p><code>Timer</code>中使用一个队列来记录所有将触发的事件，并且将它们按照优先级(也就是触发事件)排序，最后每次调用优先级最高的事件。</p>

<p><code>react</code>中使用<code>SplPriorityQueue</code>类来做优先级队列，这是php5.3后新增的一个标准库类，其功能很简单，就是实现一个按照rank排序的队列，有点类似redis中的zset，但是其值是可以重复的，所以它不是一个集合。它实现了<code>insert</code>, <code>count</code>, <code>count</code>, <code>extract</code>等方法，通过<code>insert</code>往队列中插入的数据会自动按照优先级(priority)由大到小排序(<code>react</code>中根据interval时间取负，实现了由小到大排序)，免去了sort的麻烦，然后可以通过<code>extract</code>方法得到队列顶部优先级(priority)最高的数据。</p>

<p>有了Timer，用户就可以给<code>react</code>设置延迟事件，可以参考js中的<code>setTimeout</code>方法。</p>

<p>最后，<code>react</code>通过<code>EventLoop</code>中的<code>run</code>方法将tick放入一个while循环，实现了监听的目的。</p>

<p>总结一下，<code>react</code>的异步事件模型：</p>

<p>核心的on-emit事件模型 –&gt; EventLoop实现响应socket事件 –&gt; Timer实现事件优先级排序 –&gt; while循环来pending服务端的程序。</p>

<p><code>react</code>还提供了很多的示例文件，一个简单的http-server可以实现如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require</span> <span class="nx">__DIR__</span><span class="o">.</span><span class="s1">&#39;/../vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="nv">$app</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$request</span><span class="p">,</span> <span class="nv">$response</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="o">&amp;</span><span class="nv">$i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$text</span> <span class="o">=</span> <span class="s2">&quot;This is request number </span><span class="si">$i</span><span class="s2">.</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$headers</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="nv">$headers</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">(</span><span class="nv">$text</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nv">$loop</span> <span class="o">=</span> <span class="nx">React\EventLoop\Factory</span><span class="o">::</span><span class="na">create</span><span class="p">();</span>
</span><span class='line'><span class="nv">$socket</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">React\Socket\Server</span><span class="p">(</span><span class="nv">$loop</span><span class="p">);</span>
</span><span class='line'><span class="nv">$http</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">React\Http\Server</span><span class="p">(</span><span class="nv">$socket</span><span class="p">);</span>
</span><span class='line'><span class="nv">$http</span><span class="o">-&gt;</span><span class="na">on</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">,</span> <span class="nv">$app</span><span class="p">);</span>
</span><span class='line'><span class="nv">$socket</span><span class="o">-&gt;</span><span class="na">listen</span><span class="p">(</span><span class="mi">1337</span><span class="p">);</span>
</span><span class='line'><span class="nv">$loop</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="section">后记</h2>

<p><code>react</code>中用到了很多php5.3之后才出现的新特性(EventEmitter2甚至只支持5.4以上的php版本)，很多方法以前也没有接触过，可以说相比于国内对php的应用，老外对语言的研究更加透彻。想起国内这么普及的php应用，很多人只是略知皮毛，就喜欢大言不惭，甚至能人云亦云的挑出一堆语言的弊端。老外的钻研精神确实值得学习。</p>

<p>记录一下几个可能有用但是不常用的类或方法：</p>

<ul>
  <li><a href="http://php.net/manual/en/function.stream-socket-server.php"><code>stream_socket_server</code></a> 创建一个服务端套接字。</li>
  <li><a href="http://php.net/manual/en/function.stream-select.php"><code>stream_select</code></a> 监听读写socket状态的变化，带timeout时间</li>
  <li><a href="http://www.php.net/manual/en/splpriorityqueue.insert.php"><code>SplPriorityQueue</code></a> 创建一个带优先级的有序队列</li>
</ul>

<h2 id="section-1">参考文档</h2>

<p><a href="http://www.mwop.net/blog/253-Taming-SplPriorityQueue.html">Taming SplPriorityQueue</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php的命名空间]]></title>
    <link href="http://jingxin.me/blog/blog/2013/03/04/php-de-namespace/"/>
    <updated>2013-03-04T11:38:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2013/03/04/php-de-namespace</id>
    <content type="html"><![CDATA[<p>php中命名空间的概念出现的比较晚(&gt;=5.3)，这也造成了很多人写php程序的时候忽略了这个问题(包括我:)，不过，最近很多老外的开源项目中渐渐流行起在php中使用命名空间。于是我也跟风一把，看看究竟好在哪儿。</p>

<p>在php namespace语句出现之前，通行的做法是根据文件路径定义类名，某些特殊文件再加上后缀，比如存放controller的文件夹中有两个文件，分别存放在<code>controller/Base.php</code>和<code>controller/login/Base.php</code>，根据命名可以看出这是两个基类文件，文件名是一样的，它们的类名一般会写成<code>BaseController</code>和<code>Login_BaseController</code>(首字母大写也是一种约定)，这样就不存在类名冲突的问题了。这样做的一个缺点是类名会很长，用某些人的说法，就是不够优雅，于是命名空间就应运而生了。</p>

<p>命名空间的使用在别的语言中的使用历史不算短，其中微软系的c#由盛。在php中基本是照搬这种思想，下面先举个简单的栗子：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>myname1.php  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">namespace my\name1;</span>
</span><span class='line'><span class="x">class MyClass {} //定义类</span>
</span><span class='line'><span class="x">function myfunction() {echo “helloworld”;} //定义方法</span>
</span><span class='line'><span class="x">const MYCONST = 1; //定义常量</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>假如我们有另一个php文件myname2.php，需要include myname1.php。用下面几种方式是可以的。</p>

<p>一. 在同一namespace下
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">namespace my\name1;</span>
</span><span class='line'><span class="x">include ‘myname1.php’;</span>
</span><span class='line'><span class="x">print_r(new MyClass);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
从输出结果可以看出实例名已经变成了<code>my\name1\MyClass Object</code>，命名空间会自动的加到类名前面。</p>

<p>二. 在不同namespace下用<code>use</code>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">namespace my\name2; //不同的命名空间</span>
</span><span class='line'><span class="x">include ‘myname1.php’;</span>
</span><span class='line'><span class="x">use my\name1; //使用命名空间</span>
</span><span class='line'><span class="x">print_r(\my\name1\MYCONST); //这里用调用常量举例</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
需要注意的是，在使用namespace前需要以<code>\</code>开头，否则会自动加到当前的namespace后面，变成<code>my\name2\my\name1\MYCONST</code>，也就得不到正确的结果了。这个有点类似url或*nux系统中用<code>/</code>来表示PATH的根目录。</p>

<p>三. 在不同namespace下用<code>use .. as ..</code>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">namespace my\name2;</span>
</span><span class='line'><span class="x">include ‘myname1.php’;</span>
</span><span class='line'><span class="x">use my\name1 as m1; //使用命名空间别名</span>
</span><span class='line'><span class="x">m1\myfunction(); //调用方法举例</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
这就是命名空间的真正益处了，短啊~不过别名前就不能用<code>\</code>符号了，否则会把<code>m1</code>当做已存在的命名空间来处理。</p>

<h3 id="ps">P.S.</h3>
<ul>
  <li>php5.3之后还有一个全局常量<code>__NAMESPACE__</code>来表明当前文件所在的命名空间，至于用处？谁知道呢。</li>
  <li>在同一个文件中是可以使用多个namespace的。</li>
  <li>假如在命名空间中定义了与全局方法同名的方法，可以使用在前面加<code>\</code>符号的方式调用全局方法，例如在<code>fopen</code>中用<code>\fopen()</code>。而不使用命名空间的时候，重复定义是不允许的。遇到重定义常量也是一样。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP 验证码]]></title>
    <link href="http://jingxin.me/blog/blog/2013/01/13/php-yan-zheng-ma/"/>
    <updated>2013-01-13T14:20:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2013/01/13/php-yan-zheng-ma</id>
    <content type="html"><![CDATA[<p>gd是一个强大的php图像处理库，最近在做验证码加强的策略，才发现用php作图也能玩出很多花样来。</p>

<h2 id="section">几个重要函数</h2>
<ul>
  <li><a href="http://php.net/manual/en/function.imagecreatetruecolor.php">imagecreatetruecolor</a> 创建一张空的画布</li>
  <li><a href="http://cn2.php.net/manual/zh/function.imagecreatefrompng.php">imagecreatefrompng</a> 从文件创建一个图片句柄</li>
  <li><a href="http://cn2.php.net/manual/zh/function.imagecolorallocate.php">imagecolorallocate</a> 拾取一种颜色(rgb)</li>
  <li><a href="http://cn2.php.net/manual/zh/function.imagettftext.php">imagettftext</a> 向画布写入文字</li>
  <li><a href="http://cn2.php.net/manual/zh/function.imagecopy.php">imagecopy</a> 合并两张图片，可指定拷贝区域及大小</li>
  <li><a href="http://cn2.php.net/manual/zh/function.imagecolorat.php">imagecolorat</a> 从图片指定像素点拾取一种颜色</li>
  <li><a href="http://cn2.php.net/manual/zh/function.imagesetpixel.php">imagesetpixel</a> 画一个像素点</li>
  <li><a href="http://cn2.php.net/manual/zh/function.imagearc.php">imagearc</a> 画一个椭圆，截取部分可用来绘制曲线</li>
</ul>

<p>php绘图用的最频繁的地方大概就是生成验证码了，我们最常见的验证码数字加英文的组合，生成这种验证码很简单，下面几行代码就可以搞定</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">public function genCode($n = 4) {</span>
</span><span class='line'><span class="x">    $dict = ‘ABCDEFGHIJKLNMPQRSTUVWXYZ123456789’;</span>
</span><span class='line'><span class="x">    $dictlen = strlen($dict);</span>
</span><span class='line'><span class="x">    $image = $this-&amp;gt;image;</span>
</span><span class='line'><span class="x">    $verify = ‘’;</span>
</span><span class='line'><span class="x">    $fontfile = $this-&amp;gt;sourcedir . $this-&amp;gt;fonts[0];</span>
</span><span class='line'><span class="x">    $colors = array(</span>
</span><span class='line'><span class="x">        imagecolorallocate($image, 255, 0, 0) , //红</span>
</span><span class='line'><span class="x">        imagecolorallocate($image, 0, 0, 255) , //蓝</span>
</span><span class='line'><span class="x">        imagecolorallocate($image, 0, 0, 0) , //黑</span>
</span><span class='line'><span class="x">    );</span>
</span><span class='line'><span class="x">    for ($i = 0;$i &amp;lt; $n;$i++) {</span>
</span><span class='line'><span class="x">        $verify.= $code = substr($dict, mt_rand(0, $dictlen - 1) , 1);</span>
</span><span class='line'><span class="x">        imagettftext($image, 20, mt_rand(-15, 15) , ($i * 15) + 3, mt_rand(20, 25) , $colors[array_rand($colors) ], $fontfile, $code);</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">    return $this;</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>效果图：</p>

<blockquote>
  <p><img src="/u/image/verify-code-simple.png" title="“verify-code-simple”" ></p>
</blockquote>

<p>其中合并了一张纹理背景并随机绘制出文字的颜色。下面我们再加点料，</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">public function addNoise($n = 50) {</span>
</span><span class='line'><span class="x">    $image = $this-&amp;gt;image;</span>
</span><span class='line'><span class="x">    $color = imagecolorallocate($image, 0, 0, 0);</span>
</span><span class='line'><span class="x">    for ($i = 0;$i &amp;lt; $n;$i++) { //噪声点</span>
</span><span class='line'><span class="x">        imagesetpixel($image, mt_rand(0, $this-&amp;gt;width) , mt_rand(0, $this-&amp;gt;height) , $color);</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">    return $this;</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'><span class="x">public function addLine($n = 1) {</span>
</span><span class='line'><span class="x">    $image = $this-&amp;gt;image;</span>
</span><span class='line'><span class="x">    $color = imagecolorallocate($image, 0, 0, 0);</span>
</span><span class='line'><span class="x">    for ($i = 0;$i &amp;lt; $n;$i++) {</span>
</span><span class='line'><span class="x">        imagearc($image, rand(-10, $this-&amp;gt;width + 10) , rand(-10, 0) , rand($this-&amp;gt;width * 2 + 10, $this-&amp;gt;width * 2 + 40) , rand($this-&amp;gt;height, $this-&amp;gt;height + 20) , 0, 360, $color);</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">    return $this;</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>上面的方法往图像中加入了50个噪点和一条干扰曲线，于是验证码变成了这样：</p>

<blockquote>
  <p><img src="/u/image/verify-code-noise.png" title="“verify-code-noise”" ></p>
</blockquote>

<p>下面来实现汉字和带公式的验证码
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">public function genHanzi($n = 2) {</span>
</span><span class='line'><span class="x">    $dict = “的一是在了不和有大这主中人上为们地个用工时要”;</span>
</span><span class='line'><span class="x">    $dictlen = mb_strlen($dict, ‘UTF-8’);</span>
</span><span class='line'><span class="x">    $image = $this-&amp;gt;image;</span>
</span><span class='line'><span class="x">    $fontfile = $this-&amp;gt;sourcedir . $this-&amp;gt;fonts[array_rand($this-&amp;gt;fonts) ];</span>
</span><span class='line'><span class="x">    $color = imagecolorallocate($image, 0, 0, 0);</span>
</span><span class='line'><span class="x">    $verify = ‘’;</span>
</span><span class='line'><span class="x">    for ($i = 0;$i &amp;lt; $n;$i++) {</span>
</span><span class='line'><span class="x">        $verify.= $word = mb_substr($dict, mt_rand(0, $dictlen - 1) , 1, ‘UTF-8’);</span>
</span><span class='line'><span class="x">        imagettftext($image, rand(18, 22) , rand(-20, 20) , 5 + $i * 25, 25, $color, $fontfile, $word);</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">    $this-&amp;gt;verify = $verify;</span>
</span><span class='line'><span class="x">    return $this;</span>
</span><span class='line'><span class="x">}&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;public function genFomula() {</span>
</span><span class='line'><span class="x">    $symbols = array(</span>
</span><span class='line'><span class="x">        ‘＋’ =&amp;gt; ‘+’,’－’ =&amp;gt; ‘-‘,’×’ =&amp;gt; ‘&lt;em&gt;’,’加’ =&amp;gt; ‘+’,’减’ =&amp;gt; ‘-‘,’乘’ =&amp;gt; ‘&lt;/em&gt;’</span>
</span><span class='line'><span class="x">    );</span>
</span><span class='line'><span class="x">    $numbers = array(</span>
</span><span class='line'><span class="x">        ‘0’ =&amp;gt; 0,’1’ =&amp;gt; 1,’2’ =&amp;gt; 2,’3’ =&amp;gt; 3,’4’ =&amp;gt; 4,’5’ =&amp;gt; 5，’叁’ =&amp;gt; 3,’肆’ =&amp;gt; 4,’伍’ =&amp;gt; 5,’陆’ =&amp;gt; 6,’柒’ =&amp;gt; 7,’捌’ =&amp;gt; 8,’玖’ =&amp;gt; 9,</span>
</span><span class='line'><span class="x">    );</span>
</span><span class='line'><span class="x">    $image = $this-&amp;gt;image;</span>
</span><span class='line'><span class="x">    $fontfile = $this-&amp;gt;sourcedir . $this-&amp;gt;fonts[array_rand($this-&amp;gt;fonts) ];</span>
</span><span class='line'><span class="x">    $numidx1 = array_rand($numbers);</span>
</span><span class='line'><span class="x">    $num1 = $numbers[$numidx1];</span>
</span><span class='line'><span class="x">    $symbol = array_rand($symbols);</span>
</span><span class='line'><span class="x">    $color = imagecolorallocate($image, 0, 0, 0);</span>
</span><span class='line'><span class="x">    while (1) {</span>
</span><span class='line'><span class="x">        $numidx2 = array_rand($numbers);</span>
</span><span class='line'><span class="x">        $num2 = $numbers[$numidx2];</span>
</span><span class='line'><span class="x">        if ($symbols[$symbol] != ‘-‘ || $num2 &amp;lt;= $num1) { //减法结果不为负数</span>
</span><span class='line'><span class="x">            break;</span>
</span><span class='line'><span class="x">        }</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">    eval(“$verify = “ . “$num1” . $symbols[$symbol] . “$num2;”);</span>
</span><span class='line'><span class="x">    $verify = intval($verify);</span>
</span><span class='line'><span class="x">    $codelist = array(</span>
</span><span class='line'><span class="x">        $numidx1,</span>
</span><span class='line'><span class="x">        $symbol,</span>
</span><span class='line'><span class="x">        $numidx2,</span>
</span><span class='line'><span class="x">        ‘=’</span>
</span><span class='line'><span class="x">    );</span>
</span><span class='line'><span class="x">    foreach ($codelist as $i =&amp;gt; $code) {</span>
</span><span class='line'><span class="x">        imagettftext($image, mt_rand(14, 16) , mt_rand(-15, 15) , ($i * 18) + 3, mt_rand(20, 25) , $color, $fontfile, $code);</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">    return $this;</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>生成汉字和上面的英文组合差不多，加个字典就可以，然后可以加入一下随机的字体变换，生成公式呢，其实也是预先定义好数字和符号的字典，靠随机组合来生成图片，然后吧计算结果记录下来就行了。</p>

<blockquote>
  <p><img src="/u/image/verify-hanzi.png" title="“verify-hanzi”" >
<img src="/u/image/verify-fomula.png" title="“verify-fomula”" ></p>
</blockquote>

<p>很多验证码中还会对字体进行扭曲，这会让做的人和看的人都比较纠结。目前的方法大致是先生成一张正常的图，然后拾取图中每个像素点进行正弦变换位置后填入另一张相同大小的图，注意两张图的背景需要一致，否则边缘的图片就很不和谐咯。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">public function twist() {</span>
</span><span class='line'><span class="x">    $distImage = imagecreatetruecolor($this-&amp;gt;width, $this-&amp;gt;height);</span>
</span><span class='line'><span class="x">    imagecopy($distImage, $this-&amp;gt;backimg, 0, 0, 0, 0, $this-&amp;gt;width, $this-&amp;gt;height);</span>
</span><span class='line'><span class="x">    for ($x = 0;$x &amp;lt; $this-&amp;gt;width;$x++) {</span>
</span><span class='line'><span class="x">        for ($y = 0;$y &amp;lt; $this-&amp;gt;height;$y++) {</span>
</span><span class='line'><span class="x">            $rgb = imagecolorat($this-&amp;gt;image, $x, $y);</span>
</span><span class='line'><span class="x">            imagesetpixel($distImage, (int)($x + sin($y / $this-&amp;gt;height * 2 * M_PI - M_PI * 0.1) * 4) , $y, $rgb);</span>
</span><span class='line'><span class="x">        }</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">    $this-&amp;gt;image = $distImage;</span>
</span><span class='line'><span class="x">    return $this;</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>效果图：</p>

<blockquote>
  <p><img src="/u/image/verify-code-twist.png" title="“verify-code-twist”" ></p>
</blockquote>

<p>最后再加入一个gif动态图的例子，主要原理是预先生成每一帧的gif图像，然后合并为一张图片，对gif进行编码的类库使用的是网上下载的GIFEncoder，代码不多，但是够用。<code>less is more</code>嘛。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">public function genCodeAnimate($n = 4, $flags = 40) {</span>
</span><span class='line'><span class="x">    $dict = ‘ABCDEFGHIJKLNMPQRSTUVWXYZ123456789’;</span>
</span><span class='line'><span class="x">    $dictlen = strlen($dict);</span>
</span><span class='line'><span class="x">    $verify = ‘’;</span>
</span><span class='line'><span class="x">    $fontfile = $this-&amp;gt;sourcedir . $this-&amp;gt;fonts[0];</span>
</span><span class='line'><span class="x">    $colors = array(</span>
</span><span class='line'><span class="x">        imagecolorallocate($this-&amp;gt;image, 255, 0, 0) , //红</span>
</span><span class='line'><span class="x">        imagecolorallocate($this-&amp;gt;image, 0, 0, 255) , //蓝</span>
</span><span class='line'><span class="x">        imagecolorallocate($this-&amp;gt;image, 0, 0, 0) , //黑</span>
</span><span class='line'><span class="x">    );</span>
</span><span class='line'><span class="x">    $fontColors = array();</span>
</span><span class='line'><span class="x">    $fontSizes = array();</span>
</span><span class='line'><span class="x">    $gifs = array();</span>
</span><span class='line'><span class="x">    for ($i = 0;$i &amp;lt; $n;$i++) {</span>
</span><span class='line'><span class="x">        $verify.= substr($dict, mt_rand(0, $dictlen - 1) , 1);</span>
</span><span class='line'><span class="x">        $fontColors[$i] = $colors[array_rand($colors) ];</span>
</span><span class='line'><span class="x">        $fontSizes[$i] = rand(18, 22);</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">    for ($f = 0;$f &amp;lt; $flags;$f++) {</span>
</span><span class='line'><span class="x">        $image = $this-&amp;gt;imgClone($this-&amp;gt;image);</span>
</span><span class='line'><span class="x">        $angle = - 15 + abs($f - $flags / 2) * 2; //角度</span>
</span><span class='line'><span class="x">        $y = 20 + abs($f - $flags / 2) * 0.5;</span>
</span><span class='line'><span class="x">        for ($i = 0;$i &amp;lt; $n;$i++) {</span>
</span><span class='line'><span class="x">            $code = substr($verify, $i, 1);</span>
</span><span class='line'><span class="x">            imagettftext($image, $fontSizes[$i], $angle, ($i * 15) - 20 + abs($f - $flags / 2) * 5, $y, $fontColors[$i], $fontfile, $code);</span>
</span><span class='line'><span class="x">        }</span>
</span><span class='line'><span class="x">        header(“Content-type: image/gif”);</span>
</span><span class='line'><span class="x">        imagegif($image);</span>
</span><span class='line'><span class="x">        imagedestroy($image);</span>
</span><span class='line'><span class="x">        $gifs[] = ob_get_contents();</span>
</span><span class='line'><span class="x">        ob_clean();</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">    ob_start();</span>
</span><span class='line'><span class="x">    $gifEncoder = new GIFEncoder($gifs, 100, 0, 1, 0, 0, 1, ‘bin’);</span>
</span><span class='line'><span class="x">    header(‘Content-type: image/gif’);</span>
</span><span class='line'><span class="x">    echo $gifEncoder-&amp;gt;GetAnimation();</span>
</span><span class='line'><span class="x">    return $verify;</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>效果图：</p>

<blockquote>
  <p><img src="/u/image/verify-code-animate.gif" title="“verify-code-animate”" ></p>
</blockquote>

<h2 id="section-1">备忘</h2>
<ul>
  <li><code>imagecreate</code>也是一个创建图像的方法，不过相对于<code>imagecreatetruecolor</code>，它会使用第一次由<code>imagecolorallocate</code>生成的颜色作为背景色，比较坑爹，不推荐。</li>
</ul>

<h2 id="section-2">下载</h2>
<ul>
  <li><a href="/u/patch/verify.zip">源码</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
