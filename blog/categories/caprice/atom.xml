<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: caprice | CodeBean]]></title>
  <link href="http://jingxin.me/blog/blog/categories/caprice/atom.xml" rel="self"/>
  <link href="http://jingxin.me/blog/"/>
  <updated>2016-09-20T11:33:29+08:00</updated>
  <id>http://jingxin.me/blog/</id>
  <author>
    <name><![CDATA[Xu Jingxin]]></name>
    <email><![CDATA[sailxjx@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[存在的意义]]></title>
    <link href="http://jingxin.me/blog/blog/2016/07/04/cun-zai-de-yi-yi/"/>
    <updated>2016-07-04T16:14:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2016/07/04/cun-zai-de-yi-yi</id>
    <content type="html"><![CDATA[<p>外公走的时候 79 岁，从我上次见到外公已经有一段时间了，对于亲人的突然离去，本以为会是一件很难接受的事情，然而真的到了那时，内心却是非常的平静，仿佛一瞬间参透了生命存在的意义。</p>

<p>人这一生，大部分时间都是为别人活着。在社交中在意别人的眼光，在家庭中考虑家人的感受，很少有完全出于自主意愿的生活。这在心理学上也早已有了解释，只有在婴幼儿时期人们才会完全由「本我」驱使，而一旦进入了社会这个大熔炉，大部分的日常行为就由「超我」来驱使。</p>

<p>对于长生不老，自古以来就是人们的终极追求之一，而往常所说的长生基本等同于「本我」的长生。现代医学的发展确实也让人类的平均寿命在不断的提高，但是人力终须遵循自然的规则，生老病死也是人生完整的一个组成部分。与其期待形体的长生不老，不如常常思考怎样让自己的「超我 - 精神」绵延不绝。</p>

<p>纵观历史，有很多人确实做到了死而不朽，例如到现在还在折磨着广大考生的牛顿高斯等辈，让江山如此多娇的各代能人志士们。他们的思想和事迹传颂了千百年，而且想必还能传递到更久的将来。可以说他们的「超我」已经达到了永恒。</p>

<p>然而毕竟不是每个人都能达到这样的高度，即使有人有这样的天赋，也未必时运能济。所以我觉得只要让自己的行为能真实的符合「自我」的意愿，又能实现「超我」做出一点点努力，那么已经算是实现了自己的价值。</p>

<p>在生活和工作中，如果能保持高产，让家人和朋友感受到有你存在的快乐，自己也能在日常中发现自己的价值，那么这一生就是有意义的。</p>

<p>祝外公在天堂安息。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[竞技的乐趣]]></title>
    <link href="http://jingxin.me/blog/blog/2016/06/16/jing-ji-de-le-qu/"/>
    <updated>2016-06-16T13:51:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2016/06/16/jing-ji-de-le-qu</id>
    <content type="html"><![CDATA[<p>这本是在 <a href="/blog/2012/07/29/jing-ji-de-le-qu/">2012 年的时候准备写的一篇文章</a>，当时写了个标题就没下文了，现在想来，应该是忙着「竞技」去了，哪有这功夫来写文章嘛。</p>

<p>时过三年，最近开始常玩星际2，于是又想起这个主题，终于可以补全这篇文章。</p>

<p><a href="https://www.zhihu.com/question/39789792">打星际你快乐吗</a>，这是知乎上面的一个提问，回答的都是星际爱好者，答案自然是一边倒。如果是半年前，我的答案是模棱两可，因为水平实在是菜，被虐是常有的事情，自然也就很难体会到游戏的快乐。好在一段之后之后，总算入了门，也能和同一分组的人打的有来有回，并且开始思考战术，运营，操作，这个时候仿佛才真正感受到这个游戏的魅力，这种快乐不来自于游戏本身，来自和你对战的人，而最终则是来自自己的满足。</p>

<p>RTS 中你的对手是电脑和人，是两种截然不同的体验，电脑循规蹈矩，打的多了，你就会对什么时候会发生什么事情一清二楚，好比是参与考试，努力总能获得回报。而一旦对手换成了真人，变数就增加了很多，总能在一些比赛中出现意想不到的战术，也就是俗称的大招，将每场游戏的体验都变得不同，就好比是工作中遇到难解的问题，很多无法从书中找到答案，以往的知识解决不了，就要强迫你去思考和尝试。</p>

<p>星际2不是一个适合放松休闲的游戏，一场十分钟的游戏就包含了早中晚三个阶段，必须时时刻刻洞察局势调整战略。当战局陷入僵局时，又需要足够的耐心来等待胜利的时机，有无数次我的对手因为耐不住性子强冲而全军覆没，反之亦是如此。我本是一个不服输的人，然而在游戏过程中，却是胜负各半才能让人真正感受到竞技的挑战和乐趣。现在的游戏阶段中，我学到了耐心，尝到了胜利的喜悦，希望以后还能从游戏中得到更多。</p>

<p>只要比赛还没结束，永远不知道下一秒将发生什么。</p>

<p>最后推荐一个歌单，在上班时听着<a href="http://music.163.com/#/playlist?id=125968298">这张专辑</a>写代码，感觉真是爽到飞起。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CEO 的坏习惯]]></title>
    <link href="http://jingxin.me/blog/blog/2015/09/30/ceo-de-pi-xi-guan/"/>
    <updated>2015-09-30T09:34:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2015/09/30/ceo-de-pi-xi-guan</id>
    <content type="html"><![CDATA[<h2 id="section">不计后果的答应客户</h2>

<p>在签约或谈合作时为了取得订单，不考虑现有能力和需要投入的成本，盲目的满足客户的要求，这样的做法，和乡下金属加工厂的老板没有任何区别，订单来了，增加机器和工人，加班加点，就能满足需求了。软件行业不是劳动力密集型产业，一步考虑不周，就需要投入更大的成本去弥补。国内那么多员工众多的软件公司，却开发不出好用的软件，UI 和交互都停留在上个世纪，很大一部分原因，都是由急功近利的老板造成的。</p>

<h2 id="section-1">无法保持专注</h2>

<p>很多 CEO 觉得自己的学习能力比别人强，还兴趣广泛，对公司里的所有工作都喜欢亲自参与。这本无可厚非，问题就出在他是 CEO。到了任何一个部门，都是公认的 Leader，员工很难在这样的关系下保持“有自己的意见”，创新更无从谈起。在 CEO 亲身投入到这个部门的时期，员工可能会斗志满满，一旦离开这个部门，立刻就会回到六神无主的状态。做任何工作，都需要保持专注，在很长的一段时间，Leader 都要和大家共进退，浅尝辄止不如放任自流。不管在哪个时期，这些工作，都有比 CEO 更合适的人或团队存在。</p>

<p>这一点同样体现在产品上，CEO 会比员工体验到更多的竞争对手压力，而这个时候如果忙于追赶竞争对手，而不再从产品自身的实用性和设计理念出发，那么员工就变成了竞争的牺牲品，心力憔悴的复制着对手的功能。我们常说“好产品不愁没市场”，不忘初心，保持专注，才是打造好产品的前提啊。</p>

<h2 id="section-2">屏蔽不感兴趣的声音</h2>

<p>每个人都有自己的兴趣点，甚至在不同的年龄和时间，兴趣也不一样。CEO 就像一个公布在社交网络上的收件箱，每时每刻都有不同的声音到来。我们常说兼听则明，偏信则暗。上文提到要常对客户的需求说不，但是对于员工的声音，则要时时去鼓励。员工的声音，与公司息息相关，一个建议可能挽救一个产品，一个创意可能占领一个市场，CEO 如果不能从内部的建议中博采众长，那么难免陷入到一意孤行的境地。</p>

<h2 id="section-3">不能知人善用</h2>

<p>创业公司常常出现的一种情况就是一人需要干几个人的事，在创业萌芽期，这样做只能说是万不得已，而且因为功能少，事情也不显得复杂，一个人干多件事情也是一种磨练。到了公司业务走上正轨，产品越来越庞杂，再让一个人干几个人的事情，就不是那么合理了。我想每个人都希望成为某个领域的专家，这样不仅是为了个人前途考虑，对公司也有好处，如果能将员工培养成某一方向的专家，那么遇到问题自然不愁没人解决。业务拓展了，资金充裕了，公司就更应该给员工创造培养提高的环境。这个时候让与系统架构息息相关的运维去给客户装机部署，让开发去做社区运营，就不再是一个有远见的 CEO 干的事了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于吃饭]]></title>
    <link href="http://jingxin.me/blog/blog/2015/07/26/guan-yu-chi-fan/"/>
    <updated>2015-07-26T18:00:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2015/07/26/guan-yu-chi-fan</id>
    <content type="html"><![CDATA[<p>最近好像有款叫 Soylent 的食物（？）突然在网上流行起来，到哪儿都能看到有人推荐这款产品。保守如我，在心理上实在接受不了每天就靠喝这种芝麻糊过日子。</p>

<h2 id="section">什么时候吃饭变成了一件麻烦事</h2>

<p>生活节奏越来越快，我已经不记得上次做饭是什么时候了。我倒是不太排斥烧菜的过程，真正的麻烦都在准备食材的阶段，如果手边有现成洗净的食材，我是很愿意煎炒蒸煮一下的。在身体健康的年纪，吃遍天下美食应该是一种美好的享受吧，食物和调料带来的快乐可不是一大杯蛋白质糊可以比拟的。</p>

<p>就算在快节奏的工作日，吃一顿饭也占用不了太多的时间。Soylent 貌似并不比去路边吃顿饭更省事，如果专为懒人设计，我建议他们将冲泡壶设计成一次性的，吃完就丢，岂不更方便。</p>

<h2 id="section-1">吃饭真的只是为了饱腹吗</h2>

<p>吃饭也是一种社交活动，吃饭的时候和别人聊聊热门话题，开拓一下视野，转移一下注意力，既是休息，也是增进了解的一种方式。大家围成一桌喝着芝麻糊聊天的场景，画面太美，实在不敢想想。</p>

<p>不过这年头新产品和新概念层出不穷，不断刷新人们的世界观，出现 Soylent，也算是科技和互联网发展的一种副产品。也许以后该转换一下思路，能保持独立思考，同时接受新事物。</p>

<p>为了这个写一篇文章确实慢蛋疼的，晚饭加个蛋压压惊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[软件与配置]]></title>
    <link href="http://jingxin.me/blog/blog/2014/02/28/ruan-jian-yu-pei-zhi/"/>
    <updated>2014-02-28T13:07:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2014/02/28/ruan-jian-yu-pei-zhi</id>
    <content type="html"><![CDATA[<p>前段时间不间断的开发新项目，实际是想得多，写得少，最后落实到代码中，大概也就200多k文件。现在回头看一下，觉得还挺满意的，因为每个新项目会找出些不一样的地方，不求做到最好，但求标新立异，否则岂不是失去了开发的意义，也辜负了“程序猿”这个需要些许创造性的工作。</p>

<p>每次新项目达到一个阶段，能回顾一下，总是极好的。这次细想一下，有什么值得总结的地方，就又回到了“软件配置”这个极庸俗的话题上来了。</p>

<p>在我看来，任何软件都少不了配置，但是在之前的文章中我也提到过，<a href="/blog/2013/09/17/ruan-jian-ji-jian-zhu-yi/">配置是软件的大敌</a>。任何软件配置越复杂，学习成本也就越高，这是一种反人类的趋势，所以这种软件，要么被更新，更简单的软件取代，要么就根本无人问津，消失在软件的海洋中。</p>

<p>当然，配置也可以被广泛的定义，形式是多种多样的，有些还是群众们喜闻乐见的，不能一棒子打死了。下面谨罗列一下我心目中的配置文件类型，和它们的适用范围。</p>

<h2 id="key-value">第一阶段，单纯的key-value</h2>
<p>这应该是最常见的一种配置，也最接近配置文件的本意。所谓人各有所好，软件在部署的过程中会遭遇不同的平台，也会遇到不同的适用情况和环境，这个时候就需要依靠配置文件来告诉软件应该怎样正确的运行。操作系统中的环境变量就是一种最常见的配置，<code>PATH</code>定义了用户需要的可执行文件的搜索范围，<code>SHELL</code>决定了和人交互的shell版本。在web应用中，数据库连接，域名，api签名秘钥等等都应当以配置的形式出现，否则就是给懒惰的开发者增加麻烦。</p>

<p>为什么说是“懒惰的开发者”，应为这些配置其实都可以通过在源代码中通过<code>if-else</code>条件来解决，要是碰到个勤快的开发（也许也是愚蠢的开发），就会把签名秘钥写在代码中，通过<code>if-else</code>来判断哪种环境应该调用哪种签名生成规则。但是在编程界，“懒惰是一种美德”，前面的做法非但徒增开发的难度，也不够灵活，用逼格更高的话来说，就是“不够优雅”。</p>

<p>所以需要用到<code>key-value</code>类型的配置。通常情况下，这种配置文件的出现形式会是一个json文件或是一个xml文件。假如这种配置文件不需要做到跨语言调用的话，跟进一步的做法是直接使用软件可用的脚本语言，通常会于源代码的语言保持一致。像我们写nodejs应用，使用js文件来做配置，就会比用json来的更加灵活。</p>

<h2 id="section">第二阶段，预定义方法</h2>
<p>下面提到的配置类型都有别于狭义的配置文件。比如说某些预先定义好的方法。我们可以在软件中预先定义好一些方法，这些方法我们不知道会不会用到，也不知道什么时候会用到，唯一明确的一点就是，我们知道这些方法能接受哪些参数，并且会得到哪些输出。我们在定义这些方法时，假如能确保他们的参数形式保持一致，那就更好了。这样对于习惯拿来主义的用户或我们自己，就更加的便利了。</p>

<p>具体的例子，比方说rails中的路由就是个这样的例子（从routes.rb文件的位置也可以看出它就是个配置文件），作者给我们定义好了一系列的方法，<code>get</code>，<code>post</code>，最有意思的就是<code>resource</code>。我们知道这些方法需要什么样的参数，能得到什么样的效果，假如我们不用这些配置，那么写上完整的路由控制代码，也能达到一样的目的。但是不需要，因为我们“很懒惰”。</p>

<h2 id="section-1">第三阶段，钩子</h2>
<p>如果你对于软件的使用者有足够的信心或信任，那么完全可以将一些接口留给用户来实现，软件中的钩子就是一个很好的例子，这在很多full-stack的框架中是很常见的，另一个场景是git的hook，在每个命令的前后，git都预留了钩子由用户来实现，这样它的可玩性就高了很多，到了github上，网站把很多常用的钩子打包成一个个模块，用户只需要给需要的模块打上勾就行了，这也可以称为配置的一种形式。</p>

<h2 id="section-2">第四阶段，可编程性</h2>
<p>这已经脱离了配置的范畴了，一些软件提供强大的api，用户通过这些api来拓展软件，甚至集成到软件本身。比如nginx使用lua来作为对单纯配置的拓展，实现了任何你所需要的功能。而github有一个很有意思的项目，叫做<a href="https://github.com/github/hubot">hubot</a>，是一个智能机器人项目，以消息的输入输出作为基本要素，用户可以加上任意的adapter，为hubot增加应答规则。其核心非常简单，但是众人拾柴火焰高，也许日久天长，这种基于规则库的低级智能，真的能发展成影响到每个人生活方方面面的智能管家。</p>

<h2 id="section-3">第五阶段，无配置文件</h2>
<p>从智能的话题延伸出去，既然软件本身需要具有智慧，那么为什么不能领悟它自己的需求，而要由人来给它写好配置？最起码，软件要能记忆曾经执行的过的操作，记录过的配置。</p>

<p>以两个monitor软件为例，’supervisor’是一款老牌的进程监控软件，由python写成，’pm2’是后起之秀，由nodejs写成，但是他们都不局限于监控python或nodejs进程，而可以做到全平台任意进程的监控。</p>

<p>假如初次使用这两款软件，更多的人会习惯于’supervisor’的操作方式，先写好一个配置文件，也许叫做<code>supervisor.conf</code>，定义好有哪些程序需要运行，执行文件的路径，环境变量，等等。然后我们敲下’supervisord start’来让这些进程运行起来，一切看起都很完美。</p>

<p>然后我们开始使用pm2，一开始会惊奇于它没有要求任何配置文件，你找到需要执行的文件，敲下<code>pm2 start app.js</code>，程序就开始执行，然后我们就可以通过<code>start|restart|reload|kill</code>等一系列命令操作这个进程。这个过程没有任何要求编写配置文件的步骤。</p>

<p>这怎么可能？我一开始的反应是这样，然后开始在各个目录中翻找所谓的’默认配置’，发现一无所获，后来我阅读了pm2的<a href="https://github.com/Unitech/pm2">源代码</a>，发现其实所有的配置，都在第一次启动进程的时候被忠实的记录下来。事情本该如此，既然第一次我已经告诉了软件需要的所有参数和变量，为什么有那么多的软件，还需要进行人为的干预来决定需要的参数，这不是一个优秀软件应该具备的素质。</p>

<p>我最近在修改一个在团队内部用了一段时间的部署工具<a href="https://github.com/sailxjx/sneaky">sneaky</a>。一直以来它都工作的很好，唯一的烦恼是在发布一个新项目前需要编写一段配置文件，填上发布的目标地址，端口，必要的时候再加上一些钩子。近期的一次更新已经将原本需要的5到6个配置项缩减到最少1个。下一步，当然是干掉配置文件。我们告诉它，把软件部署到某某服务器，然后到了下次，我们需要干同样的事时，软件已经比我们先知道它要做的事。这才是软件的未来。</p>
]]></content>
  </entry>
  
</feed>
