<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: react | CodeBean]]></title>
  <link href="http://jingxin.me/blog/blog/categories/react/atom.xml" rel="self"/>
  <link href="http://jingxin.me/blog/"/>
  <updated>2016-06-18T21:02:21+08:00</updated>
  <id>http://jingxin.me/blog/</id>
  <author>
    <name><![CDATA[Xu Jingxin]]></name>
    <email><![CDATA[sailxjx@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[react.php 中的异步实现]]></title>
    <link href="http://jingxin.me/blog/blog/2013/03/05/react-dot-php-zhong-de-yi-bu-shi-xian/"/>
    <updated>2013-03-05T15:29:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2013/03/05/react-dot-php-zhong-de-yi-bu-shi-xian</id>
    <content type="html"><![CDATA[<p>在基于事件的异步模型大行其道的今天，各语言都相继推出了自己的异步框架，nodejs原生的异步模型当然是其中的翘楚，然后python有Twisted，ruby有EventMachine(名字俗了点)。php也有一个不错的异步框架，<a href="https://github.com/reactphp/react">react</a>。下面我们从内而外的看看这个异步模型是怎么实现的。</p>

<h3 id="vnement">événement</h3>

<p>首先react的事件模型是建立在一个叫<a href="https://github.com/igorw/evenement">événement</a>的框架上，也是react作者所作，代码只有短短的74行，实现了<code>on</code>(事件监听),<code>emit</code>(触发事件)等方法。下面就单就这两个事件方法分析一下。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">public function on($event, $listener)</span>
</span><span class='line'><span class="x">    {</span>
</span><span class='line'><span class="x">        if (!is_callable($listener)) {</span>
</span><span class='line'><span class="x">            throw new \InvalidArgumentException(‘The provided listener was not a valid callable.’);</span>
</span><span class='line'><span class="x">        }&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;    if (!isset($this-&amp;gt;listeners[$event])) {</span>
</span><span class='line'><span class="x">        $this-&amp;gt;listeners[$event] = array();</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'>
</span><span class='line'><span class="x">    $this-&amp;gt;listeners[$event][] = $listener;</span>
</span><span class='line'><span class="x">} public function emit($event, array $arguments = array())</span>
</span><span class='line'><span class="x">{</span>
</span><span class='line'><span class="x">    foreach ($this-&amp;gt;listeners($event) as $listener) {</span>
</span><span class='line'><span class="x">        call_user_func_array($listener, $arguments);</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">} ?&amp;gt; </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>上面的<code>$event</code>其实就是一个事件标识，一般是一个字符串，<code>$listener</code>是一个回调方法。调用<code>on</code>时用数组listeners记录所有回调方法，调用<code>emit</code>时再按次序触发，由此还衍生了<code>once</code>(只触发一次就解除绑定的事件)，<code>removeListener</code>(移除事件)等方法。</p>

<h3 id="eventloop">EventLoop</h3>

<p>更进一步，react事件模型的上一层是一个监听循环，叫做<code>EventLoop</code>，有了这个，就往消息队列或webserver的异步处理模型更近了一步。</p>

<p>下面可以看一下<code>EventLoop</code>的接口文件<code>LoopInterface.php</code>：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">namespace React\EventLoop;</span>
</span><span class='line'><span class="x">interface LoopInterface</span>
</span><span class='line'><span class="x">{</span>
</span><span class='line'><span class="x">    public function addReadStream($stream, $listener);</span>
</span><span class='line'><span class="x">    public function addWriteStream($stream, $listener);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;public function removeReadStream($stream);</span>
</span><span class='line'><span class="x">public function removeWriteStream($stream);</span>
</span><span class='line'><span class="x">public function removeStream($stream);</span>
</span><span class='line'>
</span><span class='line'><span class="x">public function addTimer($interval, $callback);</span>
</span><span class='line'><span class="x">public function addPeriodicTimer($interval, $callback);</span>
</span><span class='line'><span class="x">public function cancelTimer($signature);</span>
</span><span class='line'>
</span><span class='line'><span class="x">public function tick();</span>
</span><span class='line'><span class="x">public function run();</span>
</span><span class='line'><span class="x">public function stop(); } ?&amp;gt; </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p><code>react</code>支持php的社区库<code>libevent</code>提供的事件支持，同时有个<code>LibEventLoop.php</code>用来实现<code>LoopInterface</code>接口，但是<code>react</code>也有自己的实现方案<code>StreamSelectLoop</code>，与<code>LibEventLoop</code>不兼容，这点可以在<code>EventLoop\LibEventLoop\Factory</code>中看到。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">create</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// @codeCoverageIgnoreStart</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">function_exists</span><span class="p">(</span><span class="s1">&#39;event_base_new&#39;</span><span class="p">))</span> <span class="p">{</span> <span class="c1">//使用libevent</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nx">LibEventLoop</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nx">StreamSelectLoop</span><span class="p">();</span> <span class="c1">//不使用libevent</span>
</span><span class='line'>        <span class="c1">// @codeCoverageIgnoreEnd</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>我们主要来看看<code>StreamSelectLoop</code>的实现。<code>LoopInterface</code>中几个重要的方法<code>addReadStream</code>, <code>addWriteStream</code>, <code>addTimer</code>, <code>tick</code>都可以在<code>StreamSelectLoop</code>找到踪影。下面先说一下<code>addReadStream</code>中的两个参数：</p>

<p>*<code>$stream</code>是一个由<code>stream_socket_server</code>方法生成的socket句柄，支持tcp或文件socket等方式。
*<code>$listener</code>其实就是一个callback方法，在这个方法中就需要实现具体的应用逻辑了。</p>

<p><code>addWriteStream</code>与<code>addReadStream</code>方法差不多，这两个方法其实啥都没做，只是注册一下两个方法，以供后面调用。真正起作用的方法是<code>tick</code>和<code>runStreamSelect</code>。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">    protected function runStreamSelect()</span>
</span><span class='line'><span class="x">    {</span>
</span><span class='line'><span class="x">        $read = $this-&amp;gt;readStreams ?: null;</span>
</span><span class='line'><span class="x">        $write = $this-&amp;gt;writeStreams ?: null;</span>
</span><span class='line'><span class="x">        $except = null;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;    if (!$read &amp;amp;&amp;amp; !$write) {</span>
</span><span class='line'><span class="x">        $this-&amp;gt;sleepOnPendingTimers();</span>
</span><span class='line'>
</span><span class='line'><span class="x">        return;</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'>
</span><span class='line'><span class="x">    if (stream_select($read, $write, $except, 0, $this-&amp;gt;getNextEventTimeInMicroSeconds()) &amp;gt; 0) {</span>
</span><span class='line'><span class="x">        if ($read) {</span>
</span><span class='line'><span class="x">            foreach ($read as $stream) {</span>
</span><span class='line'><span class="x">                $listener = $this-&amp;gt;readListeners[(int) $stream];</span>
</span><span class='line'><span class="x">                if (call_user_func($listener, $stream, $this) === false) {</span>
</span><span class='line'><span class="x">                    $this-&amp;gt;removeReadStream($stream);</span>
</span><span class='line'><span class="x">                }</span>
</span><span class='line'><span class="x">            }</span>
</span><span class='line'><span class="x">        }</span>
</span><span class='line'>
</span><span class='line'><span class="x">        if ($write) {</span>
</span><span class='line'><span class="x">            foreach ($write as $stream) {</span>
</span><span class='line'><span class="x">                if (!isset($this-&amp;gt;writeListeners[(int) $stream])) {</span>
</span><span class='line'><span class="x">                    continue;</span>
</span><span class='line'><span class="x">                }</span>
</span><span class='line'>
</span><span class='line'><span class="x">                $listener = $this-&amp;gt;writeListeners[(int) $stream];</span>
</span><span class='line'><span class="x">                if (call_user_func($listener, $stream, $this) === false) {</span>
</span><span class='line'><span class="x">                    $this-&amp;gt;removeWriteStream($stream);</span>
</span><span class='line'><span class="x">                }</span>
</span><span class='line'><span class="x">            }</span>
</span><span class='line'><span class="x">        }</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">} ?&amp;gt; </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p><code>runStreamSelect</code>方法在<code>tick</code>方法中被调用，目的是在每个间隔中重复调用之前绑定的<code>$listener</code>方法，这个可以理解，因为本来<code>EventLoop</code>的目的就是实现事件的监听，监听的最简单方法就是通过轮询的方式来调用，假如某些方法不希望被重复调用或者希望在某次成功之后就不再调用，那么在定义<code>$listener</code>方法时，将返回值设置成false即可。至于这个间隔，则是通过<code>Timer</code>来实现的。</p>

<p>在<code>runStreamSelect</code>中调用了一个有意思的方法<a href="http://php.net/manual/en/function.stream-select.php"><code>stream_select</code></a>，用timeout取代传统的<code>sleep</code>，并兼具监听socket端口的功能，一旦有新的连接或者改动，<code>stream_select</code>会立刻返回read或write中被修改的socket连接总数。这样，既能合理的释放cpu资源，又能及时对事件发起响应。比起传统的<code>while+sleep</code>，实在是高明很多。</p>

<h3 id="timer">Timer</h3>

<p>说到<code>tick</code>就不得不提<code>Timer</code>，<code>react</code>中用一个<code>Timer</code>类来模拟步进操作。每隔一定的ticket会唤起一个事件，这样才能保证异步操作能正确的被调用，这个ticket的数量有讲究，设置的太小会让系统耗用大量资源，设置的太大又不能保证异步事件能及时的被调用。下面我们来看看<code>Timer</code>中的tick。</p>

<p><code>Timer</code>中使用一个队列来记录所有将触发的事件，并且将它们按照优先级(也就是触发事件)排序，最后每次调用优先级最高的事件。</p>

<p><code>react</code>中使用<code>SplPriorityQueue</code>类来做优先级队列，这是php5.3后新增的一个标准库类，其功能很简单，就是实现一个按照rank排序的队列，有点类似redis中的zset，但是其值是可以重复的，所以它不是一个集合。它实现了<code>insert</code>, <code>count</code>, <code>count</code>, <code>extract</code>等方法，通过<code>insert</code>往队列中插入的数据会自动按照优先级(priority)由大到小排序(<code>react</code>中根据interval时间取负，实现了由小到大排序)，免去了sort的麻烦，然后可以通过<code>extract</code>方法得到队列顶部优先级(priority)最高的数据。</p>

<p>有了Timer，用户就可以给<code>react</code>设置延迟事件，可以参考js中的<code>setTimeout</code>方法。</p>

<p>最后，<code>react</code>通过<code>EventLoop</code>中的<code>run</code>方法将tick放入一个while循环，实现了监听的目的。</p>

<p>总结一下，<code>react</code>的异步事件模型：</p>

<p>核心的on-emit事件模型 –&gt; EventLoop实现响应socket事件 –&gt; Timer实现事件优先级排序 –&gt; while循环来pending服务端的程序。</p>

<p><code>react</code>还提供了很多的示例文件，一个简单的http-server可以实现如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require</span> <span class="nx">__DIR__</span><span class="o">.</span><span class="s1">&#39;/../vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="nv">$app</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$request</span><span class="p">,</span> <span class="nv">$response</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="o">&amp;</span><span class="nv">$i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$text</span> <span class="o">=</span> <span class="s2">&quot;This is request number </span><span class="si">$i</span><span class="s2">.</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$headers</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="nv">$headers</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">(</span><span class="nv">$text</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nv">$loop</span> <span class="o">=</span> <span class="nx">React\EventLoop\Factory</span><span class="o">::</span><span class="na">create</span><span class="p">();</span>
</span><span class='line'><span class="nv">$socket</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">React\Socket\Server</span><span class="p">(</span><span class="nv">$loop</span><span class="p">);</span>
</span><span class='line'><span class="nv">$http</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">React\Http\Server</span><span class="p">(</span><span class="nv">$socket</span><span class="p">);</span>
</span><span class='line'><span class="nv">$http</span><span class="o">-&gt;</span><span class="na">on</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">,</span> <span class="nv">$app</span><span class="p">);</span>
</span><span class='line'><span class="nv">$socket</span><span class="o">-&gt;</span><span class="na">listen</span><span class="p">(</span><span class="mi">1337</span><span class="p">);</span>
</span><span class='line'><span class="nv">$loop</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="section">后记</h2>

<p><code>react</code>中用到了很多php5.3之后才出现的新特性(EventEmitter2甚至只支持5.4以上的php版本)，很多方法以前也没有接触过，可以说相比于国内对php的应用，老外对语言的研究更加透彻。想起国内这么普及的php应用，很多人只是略知皮毛，就喜欢大言不惭，甚至能人云亦云的挑出一堆语言的弊端。老外的钻研精神确实值得学习。</p>

<p>记录一下几个可能有用但是不常用的类或方法：</p>

<ul>
  <li><a href="http://php.net/manual/en/function.stream-socket-server.php"><code>stream_socket_server</code></a> 创建一个服务端套接字。</li>
  <li><a href="http://php.net/manual/en/function.stream-select.php"><code>stream_select</code></a> 监听读写socket状态的变化，带timeout时间</li>
  <li><a href="http://www.php.net/manual/en/splpriorityqueue.insert.php"><code>SplPriorityQueue</code></a> 创建一个带优先级的有序队列</li>
</ul>

<h2 id="section-1">参考文档</h2>

<p><a href="http://www.mwop.net/blog/253-Taming-SplPriorityQueue.html">Taming SplPriorityQueue</a></p>
]]></content>
  </entry>
  
</feed>
