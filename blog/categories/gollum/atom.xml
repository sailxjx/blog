<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gollum | CodeBean]]></title>
  <link href="http://jingxin.me/blog/blog/categories/gollum/atom.xml" rel="self"/>
  <link href="http://jingxin.me/blog/"/>
  <updated>2015-12-08T13:51:55+08:00</updated>
  <id>http://jingxin.me/blog/</id>
  <author>
    <name><![CDATA[Xu Jingxin]]></name>
    <email><![CDATA[sailxjx@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[体验gollum]]></title>
    <link href="http://jingxin.me/blog/blog/2012/07/12/ti-yan-gollum/"/>
    <updated>2012-07-12T18:07:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2012/07/12/ti-yan-gollum</id>
    <content type="html"><![CDATA[<p>gollum是一个轻量级的wiki系统，使用git作为版本管理和跟踪工具，支持markdown，mediawiki，texttile等多种语法，由github开发并且已经投入到githubwiki的应用中。</p>

<ul>
  <li><a href="#gollum_install">安装</a></li>
  <li><a href="#gollum_deploy">部署</a></li>
  <li><a href="#gollum_bug">已发现的bug</a></li>
  <li><a href="#gollum_refer">参考资料</a></li>
</ul>

<h2 id="gollum_install">安装</h2>

<p>gollum与指环王中某个屌丝同名，不知道开发人员的命名灵感是不是来自那里，我们知道，程序员老是喜欢用一些稀奇古怪的东西来给自己的软件命名，像python（莽蛇），octopress（章鱼）等等，搞得好像人人都是动物保护主义者一样～</p>

<p>根据<a href="https://github.com/github/gollum">github主页</a>的说明，gollum的安装非常简单，一条命令解决</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>安装gollum  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="o">[</span>sudo<span class="o">]</span> gem install gollum
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>假如你喜欢追新，觉得这样安装的版本太老，想直接上HEAD的话，clone一个镜像使用<code>bundle install</code>安装好依赖之后，其bin文件夹下面的gollum就直接可以执行了，绝对绿色环保无污染。</p>

<p>现在就来体验一下gollum带来的不同与其他wiki的小清新感觉吧，在主目录下使用以下命令</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>执行gollum  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir gowiki
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>gowiki
</span><span class='line'><span class="nv">$ </span>git init
</span><span class='line'><span class="nv">$ </span>gollum
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="/u/image/gollum-exec-info.png"><img class="right" src="/u/image/gollum-exec-info.png" width="450" height="70" title="“gollum-exec-info”" ></a>
看到右图就说明gollum已经正确的运行了，gollum默认监听4567端口，并且提供了一个可交互的前端，这个时候用户可以通过浏览器打开<a href="http://localhost:4567">http://localhost:4567</a>来看一下gollum了</p>

<p><a href="/u/image/gollum-frontend.png"><img class="right" src="/u/image/gollum-frontend.png" width="450" height="115" title="“gollum-frontend”" ></a></p>

<p>界面实在是足够简洁，提供的几个button实现了wiki的基本功能增删改查，还能查看历史页面，而且还有一套开放的用户系统，name和email由git的使用者决定，头像则由gravatar生成。</p>

<p>除了通过页面编辑wiki以外，gollum还支持直接由git提交版本来更新页面。由于我们gollum默认读取master分支，而我们正checkout在master上，不方便其他人的编辑，所以我们暂时新建一个demo分支来避免冲突。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>用git来写wiki  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git branch demo
</span><span class='line'><span class="nv">$ </span>git checkout demo
</span><span class='line'><span class="nv">$ </span>mkdir ../gowiki2 &amp;amp;&amp;amp; <span class="nb">cd</span> ../gowiki2
</span><span class='line'><span class="nv">$ </span>git init &amp;amp;&amp;amp; git remote add origin ../gowiki
</span><span class='line'><span class="nv">$ </span>git pull
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>现在gowiki2中应该有了之前编辑过的几个页面，修改以后push到origin的master，就可以在wiki中看到刚刚的更新了。</p>

<!--more-->

<h2 id="gollum_deploy">部署</h2>

<p>虽然gollum提供了一个命令行工具监听端口来提供web服务，但是没有daemon选项，也没有容错机制，何况想来也没有多少人会使用4567端口来访问webserver。那有没有办法将gollum托管给我们的web服务器呢，答案是肯定的，下面以apache为例。</p>

<p>gollum由ruby写成，所以首先需要安装<a href="http://www.modrails.com">passenger(mod_rails)</a>模块，这个模块的安装在<a href="http://www.modrails.com/install.html">官网</a>上有详细的介绍，与其他apache模块的安装大同小异，下面主要介绍一下vhost的配置。</p>

<p>首先进入gollum的安装路径，不知道的可以用下面的命令找一下
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>查找gollum路径  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem which gollum
</span><span class='line'>/usr/local/ruby/lib/ruby/gems/1.9.1/gems/gollum-2.0.0/lib/gollum.rb
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>gollum的前端app在gollum/frontend/public/下(将这个uri跟在上面找出来的路径下就行了)，下面将用<code>frontpath=/usr/local/ruby/lib/ruby/gems/1.9.1/gems/gollum-2.0.0/lib/gollum/frontend/</code>来替代，然后配置vhost</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apache的virtual-hosts配置  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&amp;lt;VirtualHost *&amp;gt;
</span><span class='line'>    ServerName www.gollum.local.com  <span class="c">#替换成自己的域名</span>
</span><span class='line'>    DocumentRoot <span class="k">${</span><span class="nv">frontpath</span><span class="k">}</span>public/ <span class="c">#替换成本地路径</span>
</span><span class='line'>&amp;lt;/VirtualHost&amp;gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>然后在${frontpath}(同上，真实路径)下新建一个文件config.ru，写入下面的内容</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>config.ru  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/local/bin/env ruby</span>
</span><span class='line'><span class="nb">require</span> <span class="err">‘</span><span class="n">rubygems</span><span class="err">’</span>
</span><span class='line'><span class="nb">require</span> <span class="err">‘</span><span class="n">gollum</span><span class="o">/</span><span class="n">frontend</span><span class="o">/</span><span class="n">app</span><span class="err">’</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="err">“</span><span class="n">which</span> <span class="n">git</span><span class="err">”</span><span class="p">)</span> <span class="ow">or</span> <span class="k">raise</span> <span class="err">“</span><span class="no">Looks</span> <span class="n">like</span> <span class="n">I</span> <span class="n">can</span><span class="err">’</span><span class="n">t</span> <span class="n">find</span> <span class="n">the</span> <span class="n">git</span> <span class="no">CLI</span> <span class="k">in</span> <span class="n">your</span> <span class="n">path</span><span class="o">.</span><span class="p">\</span><span class="n">nYour</span> <span class="n">path</span> <span class="n">is</span><span class="p">:</span> <span class="c1">#{ENV[‘PATH’]}”</span>
</span><span class='line'><span class="n">gollum_path</span> <span class="o">=</span> <span class="err">‘</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="p">{</span><span class="n">user</span><span class="p">}</span><span class="o">/</span><span class="n">gowiki</span><span class="err">’</span> <span class="c1">#这里的路径替换成实际想存放wiki文档的git目录</span>
</span><span class='line'><span class="n">disable</span> <span class="ss">:run</span>
</span><span class='line'><span class="n">configure</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:staging</span><span class="p">,</span> <span class="ss">:production</span> <span class="k">do</span>
</span><span class='line'> <span class="n">set</span> <span class="ss">:raise_errors</span><span class="p">,</span> <span class="kp">true</span>
</span><span class='line'> <span class="n">set</span> <span class="ss">:show_exceptions</span><span class="p">,</span> <span class="kp">true</span>
</span><span class='line'> <span class="n">set</span> <span class="ss">:dump_errors</span><span class="p">,</span> <span class="kp">true</span>
</span><span class='line'> <span class="n">set</span> <span class="ss">:clean_trace</span><span class="p">,</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="vg">$path</span> <span class="o">=</span> <span class="n">gollum_path</span>
</span><span class='line'><span class="no">Precious</span><span class="o">::</span><span class="no">App</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="ss">:gollum_path</span><span class="p">,</span> <span class="n">gollum_path</span><span class="p">)</span>
</span><span class='line'><span class="no">Precious</span><span class="o">::</span><span class="no">App</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="ss">:wiki_options</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'><span class="n">run</span> <span class="no">Precious</span><span class="o">::</span><span class="no">App</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>为了使/home/{user}/gowiki目录具有写权限，可以将这个目录的权限这是设为777或者让passenger进程的用户组设为user，修改httpd.conf增加一行<code>PassengerDefaultUser user</code>，这样我们通过web端更新wiki的时候就不会报权限问题了。</p>

<p>现在重启apache，然后访问www.gollum.local.com，结果就与上面看到的页面一模一样啦～～。</p>

<h2 id="gollum_bug">已发现的bug</h2>

<p>gollum绑定的grit库中存在一个关于编码的错误[<a href="https://github.com/github/gollum/issues/147">issue</a>],当提交的文本中包含unicode字符时会导致一个fetal error。在grit2.5.0中修复了这个错误，所以在bundle之前需要先将grit版本设置为2.5.0。gollum最近的两个版本中需要修改的地方还不太一样，晕了～。输入<code>gollum --version</code>看一下版本，假如是2.0.0(gem安装的版本)，则修改gollum.gemspec，若是2.1.0(目前的HEAD版本)，则修改Gemfile.lock。将其中的grit版本改为2.5.0即可。</p>

<h2 id="gollum_refer">参考资料</h2>

<ul>
  <li><a href="https://github.com/github/gollum/blob/master/README.md">README</a></li>
  <li><a href="https://github.com/tecnh/gollum/wiki/Gollum-and-Passenger">Gollum and Passenger</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
