<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: software | CodeBean]]></title>
  <link href="http://jingxin.me/blog/blog/categories/software/atom.xml" rel="self"/>
  <link href="http://jingxin.me/blog/"/>
  <updated>2014-09-16T22:45:19+08:00</updated>
  <id>http://jingxin.me/blog/</id>
  <author>
    <name><![CDATA[Xu Jingxin]]></name>
    <email><![CDATA[sailxjx@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[软件与配置]]></title>
    <link href="http://jingxin.me/blog/blog/2014/02/28/ruan-jian-yu-pei-zhi/"/>
    <updated>2014-02-28T13:07:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2014/02/28/ruan-jian-yu-pei-zhi</id>
    <content type="html"><![CDATA[<p>前段时间不间断的开发新项目，实际是想得多，写得少，最后落实到代码中，大概也就200多k文件。现在回头看一下，觉得还挺满意的，因为每个新项目会找出些不一样的地方，不求做到最好，但求标新立异，否则岂不是失去了开发的意义，也辜负了“程序猿”这个需要些许创造性的工作。</p>

<p>每次新项目达到一个阶段，能回顾一下，总是极好的。这次细想一下，有什么值得总结的地方，就又回到了“软件配置”这个极庸俗的话题上来了。</p>

<p>在我看来，任何软件都少不了配置，但是在之前的文章中我也提到过，<a href="/blog/2013/09/17/ruan-jian-ji-jian-zhu-yi/">配置是软件的大敌</a>。任何软件配置越复杂，学习成本也就越高，这是一种反人类的趋势，所以这种软件，要么被更新，更简单的软件取代，要么就根本无人问津，消失在软件的海洋中。</p>

<p>当然，配置也可以被广泛的定义，形式是多种多样的，有些还是群众们喜闻乐见的，不能一棒子打死了。下面谨罗列一下我心目中的配置文件类型，和它们的适用范围。</p>

<h2 id="key-value">第一阶段，单纯的key-value</h2>
<p>这应该是最常见的一种配置，也最接近配置文件的本意。所谓人各有所好，软件在部署的过程中会遭遇不同的平台，也会遇到不同的适用情况和环境，这个时候就需要依靠配置文件来告诉软件应该怎样正确的运行。操作系统中的环境变量就是一种最常见的配置，<code>PATH</code>定义了用户需要的可执行文件的搜索范围，<code>SHELL</code>决定了和人交互的shell版本。在web应用中，数据库连接，域名，api签名秘钥等等都应当以配置的形式出现，否则就是给懒惰的开发者增加麻烦。</p>

<p>为什么说是“懒惰的开发者”，应为这些配置其实都可以通过在源代码中通过<code>if-else</code>条件来解决，要是碰到个勤快的开发（也许也是愚蠢的开发），就会把签名秘钥写在代码中，通过<code>if-else</code>来判断哪种环境应该调用哪种签名生成规则。但是在编程界，“懒惰是一种美德”，前面的做法非但徒增开发的难度，也不够灵活，用逼格更高的话来说，就是“不够优雅”。</p>

<p>所以需要用到<code>key-value</code>类型的配置。通常情况下，这种配置文件的出现形式会是一个json文件或是一个xml文件。假如这种配置文件不需要做到跨语言调用的话，跟进一步的做法是直接使用软件可用的脚本语言，通常会于源代码的语言保持一致。像我们写nodejs应用，使用js文件来做配置，就会比用json来的更加灵活。</p>

<h2 id="section">第二阶段，预定义方法</h2>
<p>下面提到的配置类型都有别于狭义的配置文件。比如说某些预先定义好的方法。我们可以在软件中预先定义好一些方法，这些方法我们不知道会不会用到，也不知道什么时候会用到，唯一明确的一点就是，我们知道这些方法能接受哪些参数，并且会得到哪些输出。我们在定义这些方法时，假如能确保他们的参数形式保持一致，那就更好了。这样对于习惯拿来主义的用户或我们自己，就更加的便利了。</p>

<p>具体的例子，比方说rails中的路由就是个这样的例子（从routes.rb文件的位置也可以看出它就是个配置文件），作者给我们定义好了一系列的方法，<code>get</code>，<code>post</code>，最有意思的就是<code>resource</code>。我们知道这些方法需要什么样的参数，能得到什么样的效果，假如我们不用这些配置，那么写上完整的路由控制代码，也能达到一样的目的。但是不需要，因为我们“很懒惰”。</p>

<h2 id="section-1">第三阶段，钩子</h2>
<p>如果你对于软件的使用者有足够的信心或信任，那么完全可以将一些接口留给用户来实现，软件中的钩子就是一个很好的例子，这在很多full-stack的框架中是很常见的，另一个场景是git的hook，在每个命令的前后，git都预留了钩子由用户来实现，这样它的可玩性就高了很多，到了github上，网站把很多常用的钩子打包成一个个模块，用户只需要给需要的模块打上勾就行了，这也可以称为配置的一种形式。</p>

<h2 id="section-2">第四阶段，可编程性</h2>
<p>这已经脱离了配置的范畴了，一些软件提供强大的api，用户通过这些api来拓展软件，甚至集成到软件本身。比如nginx使用lua来作为对单纯配置的拓展，实现了任何你所需要的功能。而github有一个很有意思的项目，叫做<a href="https://github.com/github/hubot">hubot</a>，是一个智能机器人项目，以消息的输入输出作为基本要素，用户可以加上任意的adapter，为hubot增加应答规则。其核心非常简单，但是众人拾柴火焰高，也许日久天长，这种基于规则库的低级智能，真的能发展成影响到每个人生活方方面面的智能管家。</p>

<h2 id="section-3">第五阶段，无配置文件</h2>
<p>从智能的话题延伸出去，既然软件本身需要具有智慧，那么为什么不能领悟它自己的需求，而要由人来给它写好配置？最起码，软件要能记忆曾经执行的过的操作，记录过的配置。</p>

<p>以两个monitor软件为例，’supervisor’是一款老牌的进程监控软件，由python写成，’pm2’是后起之秀，由nodejs写成，但是他们都不局限于监控python或nodejs进程，而可以做到全平台任意进程的监控。</p>

<p>假如初次使用这两款软件，更多的人会习惯于’supervisor’的操作方式，先写好一个配置文件，也许叫做<code>supervisor.conf</code>，定义好有哪些程序需要运行，执行文件的路径，环境变量，等等。然后我们敲下’supervisord start’来让这些进程运行起来，一切看起都很完美。</p>

<p>然后我们开始使用pm2，一开始会惊奇于它没有要求任何配置文件，你找到需要执行的文件，敲下<code>pm2 start app.js</code>，程序就开始执行，然后我们就可以通过<code>start|restart|reload|kill</code>等一系列命令操作这个进程。这个过程没有任何要求编写配置文件的步骤。</p>

<p>这怎么可能？我一开始的反应是这样，然后开始在各个目录中翻找所谓的’默认配置’，发现一无所获，后来我阅读了pm2的<a href="https://github.com/Unitech/pm2">源代码</a>，发现其实所有的配置，都在第一次启动进程的时候被忠实的记录下来。事情本该如此，既然第一次我已经告诉了软件需要的所有参数和变量，为什么有那么多的软件，还需要进行人为的干预来决定需要的参数，这不是一个优秀软件应该具备的素质。</p>

<p>我最近在修改一个在团队内部用了一段时间的部署工具<a href="https://github.com/sailxjx/sneaky">sneaky</a>。一直以来它都工作的很好，唯一的烦恼是在发布一个新项目前需要编写一段配置文件，填上发布的目标地址，端口，必要的时候再加上一些钩子。近期的一次更新已经将原本需要的5到6个配置项缩减到最少1个。下一步，当然是干掉配置文件。我们告诉它，把软件部署到某某服务器，然后到了下次，我们需要干同样的事时，软件已经比我们先知道它要做的事。这才是软件的未来。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[软件极简主义]]></title>
    <link href="http://jingxin.me/blog/blog/2013/09/17/ruan-jian-ji-jian-zhu-yi/"/>
    <updated>2013-09-17T21:03:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2013/09/17/ruan-jian-ji-jian-zhu-yi</id>
    <content type="html"><![CDATA[<p>今天回家的路上，竟然刮起了大风，虽然骑行艰难，但是想想公交中的闷热，倒是觉得凉爽多了。</p>

<p>在路上的时间是无聊的，于是就喜欢胡思乱想，很多自以为很棒的点子其实都是在这种不经意间想到的，办公室里的久坐反而显得效率低下了。回味一下最近做的几个项目，高屋建瓴的想想当初的设计，突然很想写一些关于软件设计的文章。就着饮料和巧克力（来点酒么？），今天就来写写软件极简主义吧。</p>

<p>Google了一圈，也没找到对“软件极简主义”的定义，姑且当做是我的独创吧。一般认为“极简主义”是设计界的一种风潮，但是软件发展至今，好像也渐渐有了这样的趋势，甚至我认为这是未来的必然，我们经常听人说“flexible”这个词，字面上来看就是“灵活的”，但是具体到这个软件是否灵活，就不太好判断了。但是，简单的软件，一定是灵活的。</p>

<h2 id="section">极简主义的的大敌</h2>

<p>软件极简主义的三个大敌：配置文件，冗余的参数，和大量复杂的接口。</p>

<p>很多人热爱配置，迷恋配置，认为越多的配置项意味着软件越强大，适用范围越广，但这是九十年代的事了。实际我们仔细翻翻常用的软件，90%的配置都是多余，没有人明白他是做什么的，也没有人希望去改变他。比方很多软件的configure文件，常常能列出上百个配置项，但是我们真的需要这么多吗？不，我们需要默认的那些值就行了。何谓默认？因为软件的设计者觉得这些是最优化也最有可能被选择的配置，那么既然是最优配置，我们又有什么理由去改变他们？</p>

<p>再说说冗余的参数，linux中有一个非常强大的命令’tar’，从man文件看来他起码有二十来个参数，但是我真的需要这么多参数吗？其实我只要记住压缩是<code>-c</code>，解压是<code>-x</code>就可以了，那么何必为了1%的功能而去加上这99%的参数呢。</p>

<p>最后是复杂的接口，举个栗子，全文搜索引擎solr非常强大，能满足我们对于文档索引的各种需求。但是他使用起来可不简单，原因我想就是因为他那种sql式的查询接口，把一件很单纯的事情搞复杂了。我们来设想一下，需要找出包含某几个关键词的文章，必要的条件是什么？关键词，文档，没了。而文档是存储在服务器的，为什么我们提供了关键词之后，仍需加上各种条件，他才能告诉我们想要的答案呢？我想软件发展到一定的智能，他就应该像一部能说话的百科全书，提问，然后告诉我们答案即可。</p>

<p>凡事都要对比着看，所以我们找点软件来对比一下。</p>

<h2 id="redis--sql">redis 与 sql</h2>

<p>redis很灵巧，所有源代码加起来不满5M，但是他很强大，hash结构能取代我们80%对于sql的需求。他也有配置文件，但是选项很少，而且每一项都有详尽的注释，并且使用默认配置就可以应对大部分的情况。唯一值得诟病的就是他的接口种类繁多，但好在这些接口很有规律可循，你只需了解了redis的基础数据结构，那么跟着官网的文档就很容易搞懂所有接口的用途，而且大部分的接口都只接受3个以内的参数，这可好记多了。我刚接触redis的时候，只花了半个小时就能玩得起来，我想面对sql恐怕没人能这么轻松的掌握吧。</p>

<h2 id="cake--grunt">cake 与 grunt</h2>
<p><a href="https://github.com/jashkenas/coffee-script/blob/master/src/cake.coffee">cake</a>和<a href="https://github.com/gruntjs/grunt">grunt</a>是nodejs中两个管理任务的模块，后者的名声更大一些，前者甚至不能说是一个模块，他只是coffeescript中附带的一个小工具。我曾尝试使用grunt来做任务管理，但是当我看到grunt官网那长长的一段initConfig时，就望而却步了。就像是我希望在墙里敲个钉子，你却给了我一台破城锤。我只不过想要给每个任务起个名字方便我以后调用和查阅而已，所以cake的一行命令足矣。</p>

<h2 id="zmq--rabbitmq">zmq 与 rabbitmq</h2>
<p>zmq是我见过的最具有极简主义风格的软件（组件）。一方面他要面对的任务非常繁杂，在异步通信中所有我们可能遇到的情况，他都为我们考虑到了，但是他又将底层的复杂问题掩盖起来，让我们看到一个光滑的表面，深藏功与名。同样来看看他的同行rabbitmq，关键词：中心服务，多线程，模式单一，最后一个特点，慢！而仅有1.7M的zmq，快是最直观的感觉，而分布式和扩展性则是锦上添花。有人说zmq就像乐高积木，每个人都能搭出他想要的形状，这话一点都不错。</p>

<h2 id="section-1">不是结束的结语</h2>
<p>软件的设计日新月异，将来肯定会接触到更多优秀的软件，也许哪天我想法变了，也许哪天遇到了更神奇的方案，可能我会补充在这里。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 mac 中安装 wine]]></title>
    <link href="http://jingxin.me/blog/blog/2013/04/28/zai-mac-zhong-an-zhuang-wine/"/>
    <updated>2013-04-28T12:39:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2013/04/28/zai-mac-zhong-an-zhuang-wine</id>
    <content type="html"><![CDATA[<p>公司用奇葩的imo，由于没有mac版本，只能用web版。最近imo web版升级之后老是不稳定，又不想装一个笨重的windows虚拟机，于是曲线救国，找找mac上的<a href="http://www.winehq.org/">wine</a>该怎么用。</p>

<p>在mac上安装wine需要备齐三样神器：</p>

<ul>
  <li><a href="http://xquartz.macosforge.org/landing/">xquartz</a>，在mac上提供对x11的支持，由于mountain lion之后不在预装x11，所以这个需要手动下载。</li>
  <li><a href="http://winebottler.kronenberg.org/">winebottler</a>，这个包里两个软件，wine和winebottler，winebottler算是一个wine的管理器，里面预设了一些各种wine应用下需要的类库模板。</li>
</ul>

<p>安装顺序是xquartz-&gt;winebottler-&gt;wine，后面两个从包中直接拖到Application中就行了。安装完后需要先启动xquartz，然后启动wine之后在上面的panel中会有一个酒杯的图标，里面可以打开资源管理器等等，第一次打开时会在用户目录里生成一个Wine Files文件夹，这个就是winebottler中所谓的prefix，里面模拟了一套windows下面的环境。可以通过在winebottler中安装不同的prefix来切换不同应用环境。不过每个prefix都是一个完整的windows环境，非常占空间，没有必要的话，用默认的就行。然后增加类库可以点击wine图标，选择wine trick来安装，还是比较方便的。</p>

<p>youtube上有个<a href="http://www.youtube.com/watch?v=m0BBkISOcEA">视频</a>介绍了如何在mac上安装wine，按照上面说的一步步来，基本不会出错。</p>

<p>但是wine的种种缺点还是很明显的，一个是字体界面都很丑，在mac下更甚，即使想各种办法优化也无济于事。第二个就是很多库都没有，这是最致命的，imo最后还是没有安装成功，按照错误提示装了.net和vcrun2008等等之后还是不能正常启动，也是预料之中的事。wine还是只能算是一个玩具，给喜欢折腾的geek玩玩而已，真要用来跑wow之类的应用，那肯定是闲的蛋疼了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitlabhq 部署小记]]></title>
    <link href="http://jingxin.me/blog/blog/2012/11/14/gitlabhq-bu-shu-xiao-ji/"/>
    <updated>2012-11-14T20:12:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2012/11/14/gitlabhq-bu-shu-xiao-ji</id>
    <content type="html"><![CDATA[<p>冬天来了，不知github是不是也去冬眠了，速度慢的像在爬，没办法，屌丝买不起vps，只能自己内网部一套开源的。</p>

<p>gitlabhq是github的一个开源版本，虽然不是官方的，但是已经做的有模有样，总之能想到的功能都已具备，放在国内随便改改UI就能上线建站的那种。安装文档那是写的相当滴详细，体现了码农罕有的耐性，查看文档请移步<a href="https://github.com/gitlabhq/gitlabhq/blob/master/doc/install/installation.md">gitlab文档</a></p>

<p>以前部署中在ssh上碰到一些问题，这次在<a href="https://github.com/mk-qi">@mk-qi</a>童鞋的点拨下，进展是相当滴顺利，下面记录一些部署过程中的问题和解决方法。</p>

<p>自动部署脚本如下，基本由文档转成，可以省掉很多事情(但是遇到问题要学会google哦)，假如使用的是ubuntu，官方以前也提供了一个一键安装脚本，后来不知怎么又去掉了，估计是计划赶不上变化吧</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>gitlabhq自动化部署脚本  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># add user git</span>
</span><span class='line'>sudo adduser –system –shell /bin/bash –gecos ‘git version control’ –group –disabled-password –home /home/git git
</span><span class='line'><span class="c"># add user gitlab</span>
</span><span class='line'>sudo adduser –disabled-login –gecos ‘gitlab system’ gitlab
</span><span class='line'><span class="c"># move user gitlab to group git</span>
</span><span class='line'>sudo usermod -a -G git gitlab
</span><span class='line'>sudo usermod -a -G gitlab git
</span><span class='line'><span class="c"># generate key</span>
</span><span class='line'>sudo -H -u gitlab ssh-keygen -q -N ‘’ -t rsa -f /home/gitlab/.ssh/id_rsa
</span><span class='line'><span class="c"># clone gitlab’s fork to the gitolite source code</span>
</span><span class='line'><span class="nb">cd</span> /home/git
</span><span class='line'>sudo -H -u git git clone -b gl-v304 https://github.com/gitlabhq/gitolite.git /home/git/gitolite
</span><span class='line'><span class="c"># setup</span>
</span><span class='line'><span class="nb">cd</span> /home/git
</span><span class='line'>sudo -u git -H mkdir bin
</span><span class='line'>sudo -u git sh -c ‘echo -e “PATH<span class="o">=</span><span class="nv">$PATH</span>:/home/git/bin<span class="se">\n</span>export PATH” » /home/git/.profile’
</span><span class='line'>sudo -u git sh -c ‘gitolite/install -ln /home/git/bin’
</span><span class='line'>sudo cp /home/gitlab/.ssh/id_rsa.pub /home/git/gitlab.pub
</span><span class='line'>sudo chmod 0444 /home/git/gitlab.pub
</span><span class='line'>sudo -u git -H sh -c “PATH<span class="o">=</span>/home/git/bin:<span class="nv">$PATH</span>; gitolite setup -pk /home/git/gitlab.pub”
</span><span class='line'><span class="c"># permissions</span>
</span><span class='line'>sudo chmod -R g+rwX /home/git/repositories/
</span><span class='line'>sudo chown -R git:git /home/git/repositories/
</span><span class='line'>sudo -u gitlab -H git clone git@localhost:gitolite-admin.git /tmp/gitolite-admin&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="o">[[</span> <span class="nv">$?</span> !<span class="o">=</span> 0 <span class="o">]]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> “error: gitolite is not installed correct, or the ssh key is not right”
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;sudo rm -rf /tmp/gitolite-admin
</span><span class='line'><span class="c"># clone gitlab source and install prerequisites</span>
</span><span class='line'>sudo gem install charlock_holmes
</span><span class='line'>sudo pip install pygments
</span><span class='line'><span class="nb">cd</span> /home/gitlab
</span><span class='line'>sudo -H -u gitlab git clone git://github.com/51fanli/gitlabhq.git gitlab
</span><span class='line'><span class="nb">cd </span>gitlab
</span><span class='line'>sudo -u gitlab cp config/gitlab.yml.example config/gitlab.yml
</span><span class='line'><span class="c"># mysql databases init</span>
</span><span class='line'><span class="nb">echo</span> “connect to mysql”
</span><span class='line'>mysql -h127.0.0.1 -uroot -p
</span><span class='line'><span class="c"># CREATE DATABASE IF NOT EXISTS &lt;code&gt;gitlabhq_production&lt;/code&gt; DEFAULT CHARACTER SET &lt;code&gt;utf8&lt;/code&gt; COLLATE &lt;code&gt;utf8_unicode_ci&lt;/code&gt;;</span>
</span><span class='line'><span class="c"># CREATE USER ‘gitlab’@’localhost’ IDENTIFIED BY ‘123456’;</span>
</span><span class='line'><span class="c"># GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON &lt;code&gt;gitlabhq_production&lt;/code&gt;.* TO ‘gitlab’@’localhost’;</span>
</span><span class='line'>sudo -u gitlab cp config/database.yml.example config/database.yml
</span><span class='line'>sudo -u gitlab -H bundle install –without development <span class="nb">test </span>sqlite postgres –deployment
</span><span class='line'>sudo -u gitlab -H git config –global user.email “gitlab@localhost”
</span><span class='line'>sudo -u gitlab -H git config –global user.name “Gitlab”
</span><span class='line'>sudo -u gitlab cp config/resque.yml.example config/resque.yml
</span><span class='line'>sudo -u gitlab cp config/unicorn.rb.example config/unicorn.rb
</span><span class='line'><span class="c"># init tables</span>
</span><span class='line'>sudo -u gitlab bundle <span class="nb">exec </span>rake gitlab:app:setup <span class="nv">RAILS_ENV</span><span class="o">=</span>production
</span><span class='line'>sudo cp ./lib/hooks/post-receive /home/git/.gitolite/hooks/common/post-receive
</span><span class='line'>sudo chown git:git /home/git/.gitolite/hooks/common/post-receive
</span><span class='line'><span class="c"># check status</span>
</span><span class='line'>sudo -u gitlab bundle <span class="nb">exec </span>rake gitlab:app:status <span class="nv">RAILS_ENV</span><span class="o">=</span>production
</span><span class='line'>sudo wget https://raw.github.com/gitlabhq/gitlab-recipes/master/init.d/gitlab -P /etc/init.d/
</span><span class='line'>sudo chmod +x /etc/init.d/gitlab
</span><span class='line'>sudo update-rc.d gitlab defaults 21
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>gitlabhq3.0后改用unicorn(紧跟github步伐)作为默认的启动server,要将它与nginx或apache一起使用请参考<a href="https://wiki.archlinux.org/index.php/Gitlab#Web_server_configuration">archwiki的gitlab手册</a>,下面是apache中的vhost配置(需要预先编译proxy模块)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apache vhost配置  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&amp;lt;VirtualHost *:80&amp;gt;
</span><span class='line'>  ServerName gitlab.myserver.com
</span><span class='line'>  ServerAlias www.gitlab.myserver.com
</span><span class='line'>  DocumentRoot /home/gitlab/gitlab/public
</span><span class='line'>  ErrorLog /var/log/httpd/gitlab_error_log
</span><span class='line'>  CustomLog /var/log/httpd/gitlab_access_log combined&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&amp;lt;Proxy balancer://unicornservers&amp;gt;
</span><span class='line'>      BalancerMember http://127.0.0.1:8080
</span><span class='line'>  &amp;lt;/Proxy&amp;gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&amp;lt;Directory /home/gitlab/gitlab/public&amp;gt;
</span><span class='line'>    AllowOverride All
</span><span class='line'>    Options -MultiViews
</span><span class='line'>  &amp;lt;/Directory&amp;gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;RewriteEngine on
</span><span class='line'>  RewriteCond %<span class="o">{</span>DOCUMENT_ROOT<span class="o">}</span>/%<span class="o">{</span>REQUEST_FILENAME<span class="o">}</span> !-f
</span><span class='line'>  RewriteRule ^/<span class="o">(</span>.*<span class="o">)</span><span class="nv">$ </span>balancer://unicornservers%<span class="o">{</span>REQUEST_URI<span class="o">}</span> <span class="o">[</span>P,QSA,L<span class="o">]</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ProxyPass /uploads !
</span><span class='line'>  ProxyPass / balancer://unicornservers/
</span><span class='line'>  ProxyPassReverse / balancer://unicornservers/
</span><span class='line'>  ProxyPreserveHost on&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&amp;lt;Proxy *&amp;gt;
</span><span class='line'>      Order deny,allow
</span><span class='line'>      Allow from all
</span><span class='line'>   &amp;lt;/Proxy&amp;gt;
</span><span class='line'>&amp;lt;/VirtualHost&amp;gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>unicorn的配置文件在config/unicorn.rb，修改其中的 <code>listen="127.0.0.1:8080"</code>，然后重启apache，通过 <code>service gitlab start</code> 重启unicorn，访问一下gitlab.myserver.com吧，看到登录页面就说明大功告成啦。</p>

<h2 id="qa">Q&amp;A</h2>
<p>### Q: 在装完gitolite后尝试<code>git clone git@localhost:gitolite-admin.git /tmp/gitolite-admin</code>遇到’remote hang-up unexpected’(貌似是这么写，意会。。。)
A: 我在centos6.2上遇到过这个问题，其他发行版上不知道有没有这个问题，修改</p>

<p><code>sudo chmod 400 /home/git/.ssh/authorized_keys</code></p>

<p>可以修复这个问题。貌似是centos的安全策略造成ssh私钥不生效</p>

<h2 id="section">参考资料</h2>
<ul>
  <li><a href="https://github.com/gitlabhq/gitlabhq/blob/master/doc/install/installation.md">gitlab安装手册官方版</a></li>
  <li><a href="https://wiki.archlinux.org/index.php/Gitlab">gitlab手册archwiki版</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
