<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nginx | CodeBean]]></title>
  <link href="http://sailxjx.github.io/blog/blog/categories/nginx/atom.xml" rel="self"/>
  <link href="http://sailxjx.github.io/blog/"/>
  <updated>2014-04-19T18:06:12+08:00</updated>
  <id>http://sailxjx.github.io/blog/</id>
  <author>
    <name><![CDATA[tristan]]></name>
    <email><![CDATA[sailxjx@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[nginx] if is evil]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2013/05/15/nginx-if-is-evil/"/>
    <updated>2013-05-15T17:36:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2013/05/15/nginx-if-is-evil</id>
    <content type="html"><![CDATA[<p>最近用nginx配置中使用if遇到一些问题，碰巧想起以前在wiki中看到的这个页面，虽然我的问题可能和wiki中提到的不同，但是if还是能避免就避免吧</p>

<p>下面的内容翻译自<a href="http://wiki.nginx.org/IfIsEvil">IfIsEvil</a></p>

<h1 id="ifisevil-">IfIsEvil (标题就不翻了，保持原汁原味的比较带感)</h1>

<h2 id="section">简介</h2>

<p><a href="http://wiki.nginx.org/NginxHttpRewriteModule#if"><code>if</code></a>指令在使用在<code>location</code>上下文中时有一些问题。有时候它不能如你所愿，而是做一些完全相反的事情。有时候甚至会引发分段错误。通常来说应该尽量避免使用<code>if</code>。</p>

<p>唯一100%可以安全的在<code>location</code>上下文中使用<code>if</code>的场景是：</p>

<ul>
  <li><a href="http://wiki.nginx.org/NginxHttpRewriteModule#return">return</a> …;</li>
  <li><a href="http://wiki.nginx.org/NginxHttpRewriteModule#rewrite">rewrite</a> … last;</li>
</ul>

<p>任何其他情况都可能引发不可预知的行为，包括潜在的分段错误。</p>

<p>需要注意的是<code>if</code>的行为并不是始终如一的。两个相同的请求不会在其中一个上失败而在另一个上成功，通过完善的测试并且对<code>if</code>有深刻理解的话，它可以使用。但是仍然强烈建议使用其他指令来代替。</p>

<p>这些情况下可能你不能轻易的避免使用<code>if</code>，比如说你想测试一个变量，就没有类似的指令可以替代。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">if</span> <span class="s">(</span><span class="nv">$request_method</span> <span class="p">=</span> <span class="s">POST</span> <span class="s">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kn">return</span> <span class="mi">405</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="s">(</span><span class="nv">$args</span> <span class="p">~</span> <span class="sr">post=140)</span><span class="p">{</span>
</span><span class='line'>  <span class="kn">rewrite</span> <span class="s">^</span> <span class="s">http://example.com/</span> <span class="s">permanent</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="section-1">用什么替代</h2>

<p>在符合你的需求前提下，可以用<a href="http://wiki.nginx.org/NginxHttpCoreModule#try_files"><code>try_files</code></a>代替。在其他情况下用”return …“或”rewrite … last”。在有些情况下可以将<code>if</code>移动到server级别（在这里它是安全的，只有其他重写模块指令允许写在它里面）。</p>

<p>例如，下面的的用法在处理请求时可以安全的修改<code>location</code>。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">location</span> <span class="s">/</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">error_page</span> <span class="mi">418</span> <span class="p">=</span> <span class="s">@other</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">recursive_error_pages</span> <span class="no">on</span><span class="p">;</span><span class="kn">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;if</span> <span class="s">(</span><span class="nv">$something</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">return</span> <span class="mi">418</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 一些配置</span>
</span><span class='line'><span class="kn">...</span> <span class="err">}</span>
</span><span class='line'><span class="s">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;location</span> <span class="s">@other</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1"># 其他配置</span>
</span><span class='line'>    <span class="kn">…</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>有些情况下，使用嵌入式脚本模块（<a href="http://wiki.nginx.org/EmbeddedPerlModule">嵌入式perl</a>，或其他<a href="http://wiki.nginx.org/3rdPartyModules">第三方模块</a>）来写这些脚本。</p>

<h2 id="section-2">例子</h2>

<p>下面是一些例子用来解释为什么”if is evil”。不要在家里尝试这些，你被警告过了。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="c1"># 下面用一些意想不到的bug来说明在location块中if is evil</span>
</span><span class='line'><span class="c1"># 只有第二个header会被输出到响应，这事实上不是bug，它就是这样工作的。&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">&lt;p&gt;location</span> <span class="s">/only-one-if</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">set</span> <span class="nv">$true</span> <span class="mi">1</span><span class="p">;</span><span class="kn">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">add_header</span> <span class="s">X-First</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">add_header</span> <span class="s">X-Second</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kn">return</span> <span class="mi">204</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;h1</span> <span class="s">id=&quot;uriif&quot;&gt;请求会被发送到后端但是uri不会改变为’/’，这是if造成的&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;location</span> <span class="s">/proxy-pass-uri</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:8080/</span><span class="p">;</span><span class="kn">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;set</span> <span class="nv">$true</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1"># nothing</span>
</span><span class='line'><span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="k">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;h1</span> <span class="s">id=&quot;iftryfiles&quot;&gt;因为if的问题，try_files不会起作用&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;location</span> <span class="s">/if-try-files</span> <span class="p">{</span>
</span><span class='line'>     <span class="kn">try_files</span>  <span class="s">/file</span>  <span class="s">@fallback</span><span class="p">;</span><span class="kn">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;</span> <span class="s">set</span> <span class="nv">$true</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="c1"># nothing</span>
</span><span class='line'> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="k">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;h1</span> <span class="s">id=&quot;nginx&quot;&gt;nginx会引发段冲突&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;location</span> <span class="s">/crash</span> <span class="p">{</span><span class="kn">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;set</span> <span class="nv">$true</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1"># fastcgi_pass here</span>
</span><span class='line'>    <span class="kn">fastcgi_pass</span>  <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">9000</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1"># no handler here</span>
</span><span class='line'><span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="k">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;h1</span> <span class="s">id=&quot;iflocation&quot;&gt;捕获的别名在if创造的嵌套location中不会被正确的继承&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;location</span> <span class="p">~</span><span class="sr">*</span> <span class="s">^/if-and-alias/(?&lt;file&gt;.*)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">alias</span> <span class="s">/tmp/</span><span class="nv">$file</span><span class="p">;</span><span class="kn">&lt;/file&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;set</span> <span class="nv">$true</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1"># nothing</span>
</span><span class='line'><span class="p">}</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>假如你发现了一个没有在上面列出来的例子 - 请将它报告给<a href="http://wiki.nginx.org/User:MaximDounin">MaximDounin</a>。</p>

<h2 id="section-3">为什么这些问题存在但没有被修复</h2>

<p><code>if</code>指令是重写模块的一部分而且是必须的。从另一方面说，nginx的配置通常来说是说明式的。有些用户希望尝试在<code>if</code>指令中使用非重写的指令，这造成了这种处境。它大部分时间是有效的，但是。。。瞧上面。</p>

<p>看起来唯一正确的方式就是完全避免在<code>if</code>中使用非重写指令。这会破坏很多已存在的配置，所以这没有被实施。</p>

<h2 id="if">假如你还是想用<code>if</code></h2>

<p>假如你读了上面的内容仍然想用<code>if</code>：</p>

<ul>
  <li>请确保你知道它是怎么工作的。一些基础知识可以<a href="http://agentzh.blogspot.com/2011/03/how-nginx-location-if-works.html">看这里</a></li>
  <li>做完整的测试</li>
</ul>

<p>你被警告过了。</p>

<p><a href="http://wiki.nginx.org/IfIsEvil">原文链接</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[virtualbox hates sendfile]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2013/02/18/virtualbox-hates-sendfile/"/>
    <updated>2013-02-18T16:39:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2013/02/18/virtualbox-hates-sendfile</id>
    <content type="html"><![CDATA[<p>事情的起因是这个样子滴~</p>

<p>代码文件都放在mac中，运行环境在virtualbox中，通过mount主机的文件夹来工作，相信很多同学都搭建过这样的环境，一切相安无事，直到某一天。。。</p>

<p>修改过的静态文件不生效了！</p>

<p>本来以为是nginx中缓存设置的问题，使尽各种解数，包括把expires设置为off，header中加Expire为0，给文件加时间戳，依然如此。果断google之，原来是virtualbox使用的特殊文件系统造成的。</p>

<p>apache和nginx中都有个默认开启的选项sendfile，表示通过内核文件指针来读取或复制文件，在vboxsf(virtualbox共享文件所使用的文件系统)中，sendfile会造成文件无法更新。于是我们无论怎么刷新，都只能看到第一次访问得到的文件了。</p>

<p>解决办法也很简单，将nginx.conf中设置<code>sendfile off</code>就可以了。</p>

<p>由于这个问题折腾了我很久，特此记录一下，同时借用某同样遇到此问题的<a href="http://abitwiser.wordpress.com/2011/02/24/virtualbox-hates-sendfile/">blog标题</a>。</p>

<h2 id="section">后记</h2>
<p>1.<a href="https://forums.virtualbox.org/viewtopic.php?f=1&amp;t=24905">virtualbox论坛</a>2009年的时候就有人讨论过这个问题，那时候的版本还是3.0，现在都4.2了，问题仍然没有得到解决，唉~被oracle X过的软件果然不行啊~。</p>

<p>2.在主机中修改文件，虚拟机中的inode不会变化，反过来也一样，不知道是不是因为vboxsf的问题，然而使用samba共享的文件系统中两边的inode是同时变化的。</p>

<h2 id="section-1">参考资料</h2>
<ul>
  <li><a href="http://abitwiser.wordpress.com/2011/02/24/virtualbox-hates-sendfile/">VirtualBox Hates Sendfile</a></li>
  <li><a href="http://serverfault.com/questions/269420/disable-caching-when-serving-static-files-with-nginx-for-development">serverfault</a></li>
  <li><a href="https://forums.virtualbox.org/viewtopic.php?f=1&amp;t=24905">virtualbox forum</a></li>
  <li><a href="http://wiki.nginx.org/HttpCoreModule#sendfile">nginx wiki</a></li>
  <li><a href="http://comments.gmane.org/gmane.linux.kernel.cifs/3517">mac中samba共享的问题</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx+php-fpm 配置记录]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2012/12/24/nginx-plus-php-fpm-pei-zhi-ji-lu/"/>
    <updated>2012-12-24T22:03:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2012/12/24/nginx-plus-php-fpm-pei-zhi-ji-lu</id>
    <content type="html"><![CDATA[<h3 id="nginx">安装nginx</h3>
<p>安装过程没什么好说的，不过tarball中没有包含init脚本，官网wiki中提供了<a href="http://wiki.nginx.org/Nginx-init-ubuntu">一个ubuntu的版本</a>，其实在所有linux发行版中都可用，下载下来放到/etc/init.d/nginx，大功告成。</p>

<p>假如在启动过程中遇到<code>undefined function: log_daemon_msg</code>等等报错，那是缺少一些公用方法，下载或安装init-functions然后在头部引入即可，google到一个可用的<a href="http://www.linuxfromscratch.org/lfs/view/7.0/scripts/apds02.html">地址</a>，此外，假如使用的是ubuntu，在/lib/lsb/中有个文件。</p>

<h3 id="php-fpm">安装php-fpm</h3>
<p>fpm已经包含在php的远吗中，编译php的时候加上<code>--enable-fpm</code>即可，fpm的init脚本包含在<code>sapi/fpm/init.d.php-fpm</code>，稍加修改即可使用，非常贴心滴。默认配置文件<code>sapi/fpm/php-fm.conf</code>，我把它复制在/etc目录中以供调用。</p>

<h3 id="php-fpm-1">配置php-fpm</h3>
<p>fpm的配置文件已很多个pool块分割，global是全局配置，www是默认的pool，这里不做修改。
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>php-fpm.conf  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[global]</span>
</span><span class='line'><span class="na">user</span> <span class="o">=</span> <span class="s">tristan</span>
</span><span class='line'><span class="na">group</span> <span class="o">=</span> <span class="s">tristan</span>
</span><span class='line'><span class="na">pid</span> <span class="o">=</span> <span class="s">/var/run/php-fpm.pid</span>
</span><span class='line'><span class="na">error_log</span> <span class="o">=</span> <span class="s">/var/log/php/fpm.err.log</span>
</span><span class='line'><span class="c">; 下面三个值表示当一分钟内假如有10个子进程收到SIGSEGV或SIGBUS信号而退出的话，php-fpm会自动重启，应该是一种自我保护的机制</span>
</span><span class='line'><span class="err">emergency_restart_threshold</span> <span class="err">10</span>
</span><span class='line'><span class="err">emergency_restart_interval</span> <span class="err">1m</span>
</span><span class='line'><span class="err">process_control_timeout</span> <span class="err">10s</span>
</span><span class='line'><span class="c">; 超过十秒的慢请求会被记录到fpm.slow.$pool.log中并在errlog中产生一条notice记录</span>
</span><span class='line'><span class="na">request_slowlog_timeout</span> <span class="o">=</span> <span class="s">10s</span>
</span><span class='line'><span class="na">slowlog</span> <span class="o">=</span> <span class="s">/var/log/php/fpm.slow.$pool.log</span>
</span><span class='line'><span class="c">; 允许任意客户端链接</span>
</span><span class='line'><span class="na">listen.allowed_clients</span> <span class="o">=</span> <span class="s">any</span>
</span><span class='line'><span class="c">; 可以包含一些分散的config文件</span>
</span><span class='line'><span class="na">include</span><span class="o">=</span><span class="s">/etc/php-fpm.d/*.conf</span>
</span><span class='line'><span class="c">; 下面是www pool的配置</span>
</span><span class='line'><span class="k">[www]</span>
</span><span class='line'><span class="c">; 设置子进程相关</span>
</span><span class='line'><span class="na">pm</span> <span class="o">=</span> <span class="s">dynamic</span>
</span><span class='line'><span class="na">pm.max_children</span> <span class="o">=</span> <span class="s">5</span>
</span><span class='line'><span class="na">pm.start_servers</span> <span class="o">=</span> <span class="s">3</span>
</span><span class='line'><span class="na">pm.min_spare_servers</span> <span class="o">=</span> <span class="s">2</span>
</span><span class='line'><span class="na">pm.max_spare_servers</span> <span class="o">=</span> <span class="s">4</span>
</span><span class='line'><span class="na">pm.max_requests</span> <span class="o">=</span> <span class="s">200</span>
</span><span class='line'><span class="c">; 下面还可以用env设置一些环境变量</span>
</span><span class='line'><span class="na">env[PATH]</span> <span class="o">=</span> <span class="s">/usr/local/bin:/usr/bin:/bin</span>
</span><span class='line'><span class="na">env[TMP]</span> <span class="o">=</span> <span class="s">/tmp</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
配置完成后，<code>/etc/init.d/php-fpm start</code>即可启动php-fpm，通过<code>netstat -anp</code>可以看到9000端口被php-fpm占用了。</p>

<h3 id="nginx-1">配置nginx</h3>
<p>下面到了最艰苦卓绝的工作了，配置nginx。
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>nginx </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user tristan;
</span><span class='line'>worker_processes 2;
</span><span class='line'>error_log  /var/log/nginx/error.log;
</span><span class='line'>pid        /var/run/nginx.pid;
</span><span class='line'>events {
</span><span class='line'>    worker_connections  1024;
</span><span class='line'>}
</span><span class='line'>http {
</span><span class='line'>    include       mime.types;
</span><span class='line'>    default_type  application/octet-stream;
</span><span class='line'>    sendfile        on; 
</span><span class='line'>    keepalive_timeout  65; 
</span><span class='line'>    gzip on; 
</span><span class='line'>    include /usr/local/nginx/conf/sites-enabled/*;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div>
主配置文件中基本没什么可写的，重点在对每个站点的配置上。</p>

<p>对静态站点的配置是最简单的，比如下面的配置就部署了一个bootstrap的demo站点
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>boot </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>    listen *:80;
</span><span class='line'>    server_name boot.local.com;
</span><span class='line'>    access_log  /var/log/nginx/boot.log;
</span><span class='line'>    location / {
</span><span class='line'>        root /home/tristan/coding/github/bootstrap/docs; #根目录
</span><span class='line'>        index index.html; #添加默认索引文件
</span><span class='line'>    } &lt;br />
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>动态站点稍微麻烦一点，通过fastcgi模式，使用php-fpm配置一个动态站点。
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>fun </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>    listen &lt;em>:80;
</span><span class='line'>    server_name fun.local.com;
</span><span class='line'>    access_log /var/log/nginx/fun.log;
</span><span class='line'>    location / { 
</span><span class='line'>        index index.php;
</span><span class='line'>        rewrite ^(.&lt;/em>)$ /index.php$1 last; #大部分站点都做成了单入口，将所有url rewrite到index文件
</span><span class='line'>    } &lt;br />
</span><span class='line'>    location ~ ^/index.php {
</span><span class='line'>        root /home/tristan/coding/webdata/fun;
</span><span class='line'>        fastcgi_pass 127.0.0.1:9000;
</span><span class='line'>        include fastcgi_params;
</span><span class='line'>        if ($fastcgi_script_name ~ “^(.+?.php)(/.+)$”) {
</span><span class='line'>            set $real_script_name $1; 
</span><span class='line'>            set $path_info $2; 
</span><span class='line'>        } &lt;br />
</span><span class='line'>        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
</span><span class='line'>        fastcgi_param PATH_INFO $path_info; 
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div>
值得注意的是，有些框架使用pathinfo作为路由依据，默认情况下nginx并不会将pathinfo传递给php-fpm，所以上面需要通过正则匹配出准确的pathinfo，通过fastcgi_param传给fpm</p>

<p>下面是一个使用minify的静态资源站点，其中既包含纯静态文件(css|js)，也包含由php压缩成的伪静态文件
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>static </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>    listen &lt;em>:80;
</span><span class='line'>    server_name static.local.com;
</span><span class='line'>    access_log /var/log/nginx/static.log;
</span><span class='line'>    root /home/tristan/coding/webdata/static;
</span><span class='line'>    location / { 
</span><span class='line'>        autoindex on; 
</span><span class='line'>        index index.php;
</span><span class='line'>        rewrite ^/static/(.&lt;/em>).(js|css)$ /static/index.php?g=$1 last;
</span><span class='line'>    } &lt;br />
</span><span class='line'>    location ~ index.php {
</span><span class='line'>        fastcgi_pass 127.0.0.1:9000;
</span><span class='line'>        include fastcgi_params;
</span><span class='line'>        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
</span><span class='line'>    } &lt;br />
</span><span class='line'>    location ~ ^(?!\/static)(.*).(jpg|jpeg|gif|png|css|js|ico|xml)$ {
</span><span class='line'>        access_log off; #关闭log
</span><span class='line'>        log_not_found off;
</span><span class='line'>        expires 30d; #纯静态文件设置缓存时间
</span><span class='line'>    } &lt;br />
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="section">参考资料</h2>
<ul>
  <li><a href="http://www.if-not-true-then-false.com/2011/nginx-and-php-fpm-configuration-and-optimizing-tips-and-tricks/">Nginx and PHP-FPM Configuration and Optimizing Tips and Tricks</a></li>
  <li><a href="http://stackoverflow.com/questions/8265941/empty-value-to-path-info-in-nginx-returns-junk-value">stackoverflow: Empty value to PATH_INFO in nginx returns junk value</a></li>
  <li><a href="http://wiki.nginx.org/HttpFastcgiModule">HttpFastcgiModule</a></li>
  <li><a href="http://wiki.nginx.org/HttpRewriteModule">HttpRewriteModule</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
