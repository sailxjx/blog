<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[CodeBean]]></title>
  <link href="http://sailxjx.github.com/blog/atom.xml" rel="self"/>
  <link href="http://sailxjx.github.com/blog/"/>
  <updated>2013-05-03T16:56:06+08:00</updated>
  <id>http://sailxjx.github.com/blog/</id>
  <author>
    <name><![CDATA[tristan]]></name>
    <email><![CDATA[sailxjx@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[追求更快: jQuery.ready 如何实现]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/05/03/zhui-qiu-geng-kuai-jquery-dot-ready-ru-he-shi-xian/"/>
    <updated>2013-05-03T13:30:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/05/03/zhui-qiu-geng-kuai-jquery-dot-ready-ru-he-shi-xian</id>
    <content type="html"><![CDATA[<p>jQuery从1.0版本就提供了一个叫做<code>ready</code>的方法，最常见的调用场景是<code>$(document).ready(handler)</code>，表示当dom树下载完成后触发事件，也可以简写成<code>$(handler)</code>。</p>

<p>以前一直以为这个方法和javascript自己提供的<code>window.onload</code>事件是一回事，直到最近在做一个chrome小插件时搜索了一下，才发现这俩区别还是挺大的。</p>

<h2 id="windowonload">window.onload</h2>

<p><code>window.onload</code>是javascript自身提供的一个方法，表示当dom树中所有元素，包括img，js，css等等资源文件都加载完毕时触发的事件。最直观的就是在浏览器加载过程中标签栏上会有一个转动的loading图标，当这个图标消失或停止转动，就是onload时间触发的时候。这个方法还有另一种绑定的方式<code>window.addEventListener('load', handler)</code>。</p>

<p>这样就可以理解，假如页面中某个图片的加载时间特别长，那么<code>window.onload</code>是不可能触发的，但是大多数时候，我们想要的只是等dom结构完整加载之后，就可以绑定一些js事件了，假如我们把js代码都写在<code>window.onload</code>中，显然会有很长一段时间用户的操作得不到响应。</p>

<p>所以<code>jquery</code>提供了<code>ready</code>方法。</p>

<h2 id="documentreadyhandler">$(document).ready(handler)</h2>

<p>根据<a href="http://api.jquery.com/ready/">官方文档</a>，<code>ready</code>方法与<code>&lt;body onload=""&gt;</code>属性不兼容，不过后者现在也不是很常见了。下面一段代码放到浏览器中跑一下可以实验<code>ready</code>与<code>window.onload</code>谁先触发。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class="line"><span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class="line">    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;window onload&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class="line">    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;document ready&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line"><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个方法又是如何实现的呢？其实是利用了javascript中的<code>DOMContentLoaded</code>事件，至于这个事件为什么没有得到广泛的利用，可能是出于兼容性的考虑，至少在IE9以下，这个事件没有得到支持，所以jquery中使用了IE事件模型中的<code>onreadystatechange</code>来取代此方法。通过查找jquery源代码可以看到下面几行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>jquery-1.9.1.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// Catch cases where $(document).ready() is called after the browser event has already occurred.</span>
</span><span class="line"><span class="c1">// we once tried to use readyState &quot;interactive&quot; here, but it caused issues like the one</span>
</span><span class="line"><span class="c1">// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15</span>
</span><span class="line"><span class="k">if</span> <span class="p">(</span> <span class="nb">document</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">===</span> <span class="s2">&quot;complete&quot;</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// Handle it asynchronously to allow scripts the opportunity to delay ready</span>
</span><span class="line">    <span class="nx">setTimeout</span><span class="p">(</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">ready</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Standards-based browsers support DOMContentLoaded</span>
</span><span class="line"><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// Use the handy event callback</span>
</span><span class="line">    <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span> <span class="s2">&quot;DOMContentLoaded&quot;</span><span class="p">,</span> <span class="nx">completed</span><span class="p">,</span> <span class="kc">false</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// A fallback to window.onload, that will always work</span>
</span><span class="line">    <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span> <span class="s2">&quot;load&quot;</span><span class="p">,</span> <span class="nx">completed</span><span class="p">,</span> <span class="kc">false</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// If IE event model is used</span>
</span><span class="line"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// Ensure firing before onload, maybe late but safe also for iframes</span>
</span><span class="line">    <span class="nb">document</span><span class="p">.</span><span class="nx">attachEvent</span><span class="p">(</span> <span class="s2">&quot;onreadystatechange&quot;</span><span class="p">,</span> <span class="nx">completed</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// A fallback to window.onload, that will always work</span>
</span><span class="line">    <span class="nb">window</span><span class="p">.</span><span class="nx">attachEvent</span><span class="p">(</span> <span class="s2">&quot;onload&quot;</span><span class="p">,</span> <span class="nx">completed</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// If IE and not a frame</span>
</span><span class="line">    <span class="c1">// continually check to see if the document is ready</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">top</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class="line"><span class="p">......</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这是jquery中<code>ready</code>方法实现的一个片段，可以通过检测<code>document.readyState == "complete"</code>来判断<code>DOMContentLoaded</code>事件是否触发。</p>

<h2 id="chrome">在chrome扩展中</h2>

<p>在chrome扩展的content_scripts中，使用<code>DOMContentLoaded</code>有时候并不能得到想要的结果，这是content_scripts往往在页面加载后再插入页面，就不能响应这个事件了。解决办法是在manifest.json中加入<code>"run_at":"document_start"</code>一行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="json"><span class="line">  <span class="s2">&quot;content_scripts&quot;</span><span class="err">:</span> <span class="p">[</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">      <span class="nt">&quot;matches&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;http://*/*&quot;</span><span class="p">],</span>
</span><span class="line">      <span class="nt">&quot;js&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;ghost.js&quot;</span><span class="p">],</span>
</span><span class="line">      <span class="nt">&quot;run_at&quot;</span><span class="p">:</span> <span class="s2">&quot;document_start&quot;</span>  <span class="err">//</span> <span class="err">add</span> <span class="err">run_at</span> <span class="err">document_start</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">]</span><span class="err">,</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section">参考资料</h1>
<ul>
  <li><a href="http://api.jquery.com/ready/">api.jquery.ready</a></li>
  <li><a href="http://stackoverflow.com/questions/5959194/how-does-jquerys-document-ready-function-work">how-does-jquerys-document-ready-function-work</a></li>
  <li><a href="http://stackoverflow.com/questions/5082094/register-domcontentloaded-in-google-chrome">register-domcontentloaded-in-google-chrome</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/DOM/Mozilla_event_reference/DOMContentLoaded">DOMContentLoaded</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[执行 javascript 方法的几种方式]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/05/02/zhi-xing-javascript-fang-fa-de-ji-chong-fang-shi/"/>
    <updated>2013-05-02T12:41:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/05/02/zhi-xing-javascript-fang-fa-de-ji-chong-fang-shi</id>
    <content type="html"><![CDATA[<p>javascript语法灵活，同一个功能有五六种实现方式并不罕见，然后再加上有些反人类的原型继承和异步特性，就更让人一头雾水了。我经常搞不清楚<code>call</code>,<code>apply</code>之间的区别，今天就记录一下，以免再忘了。</p>

<p>在javascript中，方法可以通过以下几种方式执行：</p>

<ul>
  <li>func()，这是最直接最常见的调用方式，也符合一般人的思维逻辑，但是在某些情况下有一些不足，下面会解释。</li>
  <li>(function(arg){})(window)，匿名方法调用，在构造命名空间时比较有用，后面的括号中的参数与匿名方法中的入参一一对应。</li>
  <li>func.bind(sth)()，<a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind">mozilla手册</a>中提到<code>bind</code>是在<a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262 5th Edition</a>中新增的一个特性，这里单独列出来作为一种调用方式是因为它弥补了直接调用中不能绑定作用域的缺陷。</li>
  <li>func.call()，这是第二种调用方式，每个方法的原型中都定义了call方法，用来执行当前方法。</li>
  <li>func.apply()，call的双胞胎兄弟。</li>
</ul>

<h2 id="func">func()</h2>
<p>这是最常见的调用方式，在任何语言中随处可见。func(x, y)可以传入不同的参数。在某些语言，例如php，java中，这种调用足以解决一切问题。但是javascript是一门函数式语言，闭包的概念和一个奇怪的关键词<code>this</code>决定了这种调用方式的不足。<code>this</code>应该可以解释为当前代码段的作用域，会随着代码执行到不同的片段而改变，但是某些情况下我们不希望这个<code>this</code>被改变，例如绑定在某些dom上的事件，我们肯定不希望他们被调用的时候<code>this</code>被转移到了<code>window</code>对象上，但有时候确实如此，再比如下面的代码。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span><span class="p">{};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">func</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="nx">a</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class="line">    <span class="nx">func</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="nx">a</span><span class="p">.</span><span class="nx">onclick</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以把a想象成页面中的一个链接，由于我们只是想将定义好的方法绑定到onclick事件上，而不是立刻调用它，而且这个方法拥有一个参数，所以我们需要用一个匿名方法将他包起来传递给a的onclick事件。这样就有了一个问题，func中的this变成了全局对象window，显然我们并不希望如此。这个时候，使用func()这种直接调用的方式就不行了，于是我们需要将func外的this绑定到func方法上。于是就有了<code>bind</code>,<code>call</code>,<code>apply</code>方法。</p>

<h2 id="bind">bind</h2>

<p><code>bind</code>的目的非常简单，返回一个绑定了this对象的相同方法。上面的代码修改一行就可以实现绑定this在a对象上目的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span><span class="p">{};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">func</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="nx">a</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class="line">    <span class="nx">func</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)(</span><span class="nx">x</span><span class="p">);</span>  <span class="c1">// bind here</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="nx">a</span><span class="p">.</span><span class="nx">onclick</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样，onclick事件的this就不会像无头苍蝇一样到处乱跑啦。</p>

<h2 id="call--apply">call &amp; apply</h2>

<p><code>call</code>和<code>apply</code>要放在一起讲，因为他们实在太像了。他们都支持多参数，而且第一个参数都是即将绑定的this对象，第二个参数则是他们的区别所在，<code>call</code>使用独立的参数作为调用方法的入参，<code>apply</code>使用一个数组作为入参。有的时候我们并不是不想改变this对象，而是想人为的将他绑定到别的对象上，这个时候<code>call</code>和<code>apply</code>是很好用的。（并不是说不能用<code>bind</code>，不过貌似<code>bind</code>出现的比较晚，可能浏览器兼容性不好）。举个栗子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">a</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">func</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">              <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">          <span class="p">},</span>
</span><span class="line">    <span class="nx">x</span><span class="o">:</span> <span class="mi">0</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="nx">b</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">a</span><span class="o">:</span> <span class="nx">a</span><span class="p">,</span>
</span><span class="line">    <span class="nx">x</span><span class="o">:</span> <span class="mi">20</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">    <span class="nx">b</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">func</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的a和b对象中都有x，我们希望func能针对性的修改对应的x，但是直接调用只可能修改func作用域中的x，也就是a.x。修改一下代码，就可以实现修改b.x目的</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">a</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">func</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">              <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">          <span class="p">},</span>
</span><span class="line">    <span class="nx">x</span><span class="o">:</span> <span class="mi">0</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="nx">b</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">a</span><span class="o">:</span> <span class="nx">a</span><span class="p">,</span>
</span><span class="line">    <span class="nx">x</span><span class="o">:</span> <span class="mi">20</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">    <span class="nx">b</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">func</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span>  <span class="c1">// bind this to b</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个栗子举得不好，有点牵强附会，而且这是一种很容易让人迷惑的代码风格，有适用的场景，但不是处处都可用。</p>

<h1 id="section">参考资料</h1>
<ul>
  <li><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference">mozilla</a></li>
  <li><a href="http://fitzgeraldnick.com/weblog/26/">Nick Fitzgerald’s Weblog</a></li>
  <li><a href="http://dailyjs.com/2012/06/25/this-binding/">DailyJs</a></li>
  <li><a href="http://stackoverflow.com/questions/1986896/what-is-the-difference-between-call-and-apply">what-is-the-difference-between-call-and-apply</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 mac 中安装 wine]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/04/28/zai-mac-zhong-an-zhuang-wine/"/>
    <updated>2013-04-28T12:39:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/04/28/zai-mac-zhong-an-zhuang-wine</id>
    <content type="html"><![CDATA[<p>公司用奇葩的imo，由于没有mac版本，只能用web版。最近imo web版升级之后老是不稳定，又不想装一个笨重的windows虚拟机，于是曲线救国，找找mac上的<a href="http://www.winehq.org/">wine</a>该怎么用。</p>

<p>在mac上安装wine需要备齐三样神器：</p>

<ul>
  <li><a href="http://xquartz.macosforge.org/landing/">xquartz</a>，在mac上提供对x11的支持，由于mountain lion之后不在预装x11，所以这个需要手动下载。</li>
  <li><a href="http://winebottler.kronenberg.org/">winebottler</a>，这个包里两个软件，wine和winebottler，winebottler算是一个wine的管理器，里面预设了一些各种wine应用下需要的类库模板。</li>
</ul>

<p>安装顺序是xquartz-&gt;winebottler-&gt;wine，后面两个从包中直接拖到Application中就行了。安装完后需要先启动xquartz，然后启动wine之后在上面的panel中会有一个酒杯的图标，里面可以打开资源管理器等等，第一次打开时会在用户目录里生成一个Wine Files文件夹，这个就是winebottler中所谓的prefix，里面模拟了一套windows下面的环境。可以通过在winebottler中安装不同的prefix来切换不同应用环境。不过每个prefix都是一个完整的windows环境，非常占空间，没有必要的话，用默认的就行。然后增加类库可以点击wine图标，选择wine trick来安装，还是比较方便的。</p>

<p>youtube上有个<a href="http://www.youtube.com/watch?v=m0BBkISOcEA">视频</a>介绍了如何在mac上安装wine，按照上面说的一步步来，基本不会出错。</p>

<p>但是wine的种种缺点还是很明显的，一个是字体界面都很丑，在mac下更甚，即使想各种办法优化也无济于事。第二个就是很多库都没有，这是最致命的，imo最后还是没有安装成功，按照错误提示装了.net和vcrun2008等等之后还是不能正常启动，也是预料之中的事。wine还是只能算是一个玩具，给喜欢折腾的geek玩玩而已，真要用来跑wow之类的应用，那肯定是闲的蛋疼了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[TDWTF] 耐心测试]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/04/25/tdwtf-nai-xin-ce-shi/"/>
    <updated>2013-04-25T12:09:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/04/25/tdwtf-nai-xin-ce-shi</id>
    <content type="html"><![CDATA[<p>在Eric的公司，发布流程中代码从来就没有经过正规的测试。不是说没有这些流程，当然得有。毕竟哪有公司会不经过测试就将代码发布给用户。但是“严格测试”和“健壮度检验”跟他们的公司从来不沾边。甚至连“成功的演示”和“满足用户”这些原则都没有，但这又是另一回事了。</p>

<p>其中一个原因是公司认为为了测试付出大量金钱没什么好处。难道开发人员不应该保证代码不出问题？这有什么难的？</p>

<p>虽然如此，公司里仍有一些谨慎的人认为需要在发布新的应用之前做一些测试。所以他们指派了一些测试人员。然而，这些测试人员仅仅是一些半吊子。除了测试外他们还干一些别的事情。比如 Mark，就是一个客户支持人员-特别一线客户支持。一个任何人都轻视或者想摆脱的家伙。</p>

<p>Mark 接到一个任务是测试 Eric 写的新应用。所以当 Eric 收到一个由 Mark 提交到跟踪系统的新 bug 时，并不感到奇怪。由于距离交付日期只剩下一个礼拜，Eric 赶快读了一遍描述。</p>

<blockquote>
  <p>概要：粘贴不起作用<br />
描述：我在记事本中选择了一些文本。然后到软件中去粘贴这些文本，但是不起作用。而且我发现粘贴菜单是灰的。</p>
</blockquote>

<p>Eric 有一点迷惑，也仅有“一点儿”。这已经不是他第一次忘了在剪贴板中有内容时开启粘贴功能了。他启动软件，然后照着 Mark 的步骤做。但是没用，他不能重现这个问题。他粗略的过了一遍代码发现粘贴功能是被启用了。所以他给 bug 加了个注释然后重新指派给 Mark。</p>

<blockquote>
  <p>我尝试重现你说的问题，但是没有效果。你还做了些别的操作吗？</p>
</blockquote>

<p>两天以后，这个问题被加了条注释，重新指派给 Eric</p>

<blockquote>
  <p>我可能忘了一个步骤，当我复制文本之后，我把软件关了。这对你有帮助吗？</p>
</blockquote>

<p>这消息可能有用，Eric 想。然后他回过头去 debug。他尝试关闭记事本，关闭并重启他的软件。他关闭 Visual Studio。他甚至想关闭当地的核电站。但是粘贴功能始终可用。即使他一行行的看代码也没找出问题在哪里。不得已，他在 bug 后加了另一条注释并重新指派给 Mark</p>

<blockquote>
  <p>我尝试了各种关闭的组合，仍然不能重现这个问题。你再想想还有别的操作忘了提吗？</p>
</blockquote>

<p>这次只用了两个小时就收到了回复</p>

<blockquote>
  <p>恐怕我忘了提一件事，在我关闭你的软件之后，我重启了我的电脑。希望这能对你有所帮助。:)</p>
</blockquote>

<p>Eric 愣住了。脑中呈现中一堆难以名状的复杂感情。他对这个公司没有合格和测试人员而感到愤怒，对于 Mark 而言，只是一个重要的 bug 被修复了。风平浪静之后，是剩下疲倦。Mark 慢吞吞的将 bug 的状态改为“关闭-设计如此”。</p>

<p><a href="http://thedailywtf.com/Articles/Testing-Patience.aspx">原文链接</a></p>

<h2 id="section">后记</h2>

<p>这篇文章有些句子不太好翻译，例如最后一段的</p>

<blockquote>
  <p>Rage at the company for not having competent testers. Pity for Mark because…well… Relief that a significant bug had been put to rest.</p>
</blockquote>

<p>只能靠上下文来猜个大概。心理描写这种虚幻的东西还是不太好直译啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[TDWTF] 苏格兰早餐]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/04/18/tdwtf-su-ge-lan-zao-can/"/>
    <updated>2013-04-18T11:32:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/04/18/tdwtf-su-ge-lan-zao-can</id>
    <content type="html"><![CDATA[<p>这几天Robert感觉自己简直像英国国王一样。他为一个开发加密软硬件的英国公司工作，并不时在欧洲各地的客户端间飞来飞去。一天，一个叫Willie的苏格兰客户打电话过来，气急败坏的说他的加密服务器挂掉了。“啊~我已经尽了一切奴力！但祂还是泡不起来！”Robert安抚了一下Willie，然后按部就班得问一些问题。（它安装上了吗？开关开了没有？是不是加密组件没有正确的连接上？还是你的服务器被一只巨大的海怪给吃了？）但是毫无结果。</p>

<p>Robert只能跟Willie说：只有上机服务能解决这个问题了，但是我这周没有时间。“我今天在法国处理另一个客户的问题。”</p>

<p>“这可不行，哥们！我需要在这周末我去亚伯丁看足球之前让它能工作起来！”当Robert跟Willie说周末的紧急服务会产生高昂的费用时，Willie毫不犹豫的答应了。</p>

<p>Robert周六搭上了红眼的航班，Willie付了一大笔钱让他乘头等舱。Robert一边享用着热腾腾的坚果和毛巾，一边思考是什么搞坏了Willie的加密系统。它没有记录任何错误日志，而且最近一直工作正常。证据的缺乏让Robert的思绪一团糟。这绝不可能是一个简单的问题。</p>

<p>下飞机之后，Robert在一家四星级酒店签了到，但是没有时间睡觉了。他匆匆吃了宾馆的“大餐”，吃起来像是肉馅羊肚，而不是他一开始以为的鸡蛋配面包。</p>

<p>Robert将他的出租车停在一座没有窗户的浅褐色仓库前。要不是Willie跑出来迎接他，他差点要怀疑自己是不是找到了正确的地方，离开这个地方。“怎么这么就！你是不是掉海里面去了！近来！”Willie带着他穿过一个昏暗的走廊，到一个巨大的仓库中。这个回荡着回音的房间空空荡荡，只有一个吊钟，服务器，还有加密机。“我已经拂过钱了，所以你最好快点给我解决问题！”Willie嚷道。</p>

<p>Robert扫了一边硬件，注意到连接这安全机器的电线松了。他将螺丝拧紧，打开开关，然后加密机就像一个苏格兰球霸吃了红牌一样起死回生了。“额，这就是你的问题。。。”Robert说，看都不看Willie。</p>

<p>“天呐，太棒了。哥们！你搞定他了！”Willie给了Robert一个粗暴的熊抱。Robert告别了Willie回英国。在回去的航班上，他给Willie准备了这次旅途和修复问题的发票。当他看到短短五分钟的事就赚到了几千镑，忍不住偷着乐起来。我好，他好，大家好才是真的好嘛~</p>

<p><a href="http://thedailywtf.com/Articles/The-Scottish-Breakfast.aspx?utm_source=feedly">原文连接</a></p>

<h2 id="section">后记</h2>

<p>这篇文章中居然碰到了一个有这浓重口音的苏格兰人？。这让我想到了前几天听到的一个笑话：</p>

<blockquote>
  <p>一个同事和一个印度人闲聊，当人家问他：“where is your balance?”，他一下子愣住了。这句话是什么意思？是问他有没有能不能找到生活的平衡点吗？他答道：“Sorry I don’t known.”那印度人很惊讶：“You don’t known your balance!”。后来那同事问了别人，人家告诉他，这是在问你“你的父母在那里”。</p>
</blockquote>

<p>讲方言真的很有喜感。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[awk 学习笔记(3)]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/04/17/awk-xue-xi-bi-ji-3/"/>
    <updated>2013-04-17T16:11:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/04/17/awk-xue-xi-bi-ji-3</id>
    <content type="html"><![CDATA[<p>最近线上服务出了一点问题，然后搞了一堆的log来分析。log的格式很乱，需要整理一下，虽然几个月前特意看了一下awk，但是过了这么久，也忘得差不多了，正好靠这次机会练练手，把失去的记忆找回来。</p>

<p>log中的每条数据都被分成了多行，而且都存在一个文件中，现在文件已经有8G的大小。现在要做的就是将这些多行的数据合并成每条一行，只取有用的部分。</p>

<p>目标明确之后，就是编码啦。</p>

<p>先以日期开头的行为单条数据的起点，这个日期就通过正则来匹配出来，然后再通过substr来截取。在使用substr的时候貌似awk不支持负数输入，没办法，截取末尾字符的时候只能先计算整行的长度再减去要截取的长度了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="awk"><span class="line"><span class="k">if</span> <span class="p">(</span><span class="o">$</span><span class="mi">0</span> <span class="o">~</span> <span class="sr">/^2013.*[0-9]&#39;$/</span><span class="p">)</span> <span class="p">{</span>  <span class="c1"># id line</span>
</span><span class="line">        <span class="nx">len</span> <span class="o">=</span> <span class="kr">length</span><span class="p">(</span><span class="o">$</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">        <span class="nx">date</span> <span class="o">=</span> <span class="kr">substr</span><span class="p">(</span><span class="o">$</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class="line">        <span class="nx">line</span> <span class="o">=</span> <span class="kr">substr</span><span class="p">(</span><span class="o">$</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">19</span><span class="p">)</span> <span class="kr">substr</span><span class="p">(</span><span class="o">$</span><span class="mi">0</span><span class="p">,</span> <span class="nx">len</span><span class="o">-</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>awk中的字符串连接也比较搞，不需要<code>+,.</code>等等符号，直接接上就好了，中间可以加上” “来分隔。</p>

<p>下面就是将每行的匹配数据加到line变量后面，最后，一起print出来，这里重定向到文件也是一个不错的选择</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="awk"><span class="line"><span class="k">if</span> <span class="p">(</span><span class="o">$</span><span class="mi">0</span> <span class="o">~</span> <span class="sr">/\[template\]/</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">line</span> <span class="o">=</span> <span class="nx">line</span><span class="s2">&quot; &quot;</span><span class="o">$</span><span class="mi">3</span>
</span><span class="line">        <span class="kr">print</span> <span class="nx">line</span> <span class="o">&gt;&gt;</span> <span class="s2">&quot;desc.log.&quot;</span><span class="nx">date</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面还有一个需求就是根据统计类似数据再排排序，awk的数组可以实现统计关键词出现的次数，不过它数组的排序功能实在是太弱了，所以还需要结合sort命令。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>awk <span class="s1">&#39;{a[$4] += 1}END{for (k in a) print a[k], k}&#39;</span> <span class="nv">$i</span> | sort -rn &gt; <span class="s2">&quot;emailsort_${i}&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>大功告成。</p>

<p>下面整理一下笔记，总结一下用到的东西</p>

<ul>
  <li>正则表达式： 根据gawk的官方文档，原版貌似不支持所谓的<code>interval expression</code>，也就是一些<code>\w</code>,<code>\d</code>之类的东西，实际也确实如此，gawk对它进行了扩展，加上<code>--re-interval</code>之后就行了。</li>
  <li>substr： 截取字符串</li>
  <li><code>&gt;,&gt;&gt;</code>： 重定向，跟shell一样，不过后面的文件名需要加上双引号</li>
  <li>数组： 数组的遍历使用<code>for(k in a) print k</code>的方式，排序有asort方法，不过这样排序之后key就全部丢掉了，我还是倾向于选择通过管道让<code>sort</code>来干这事。</li>
</ul>

<h2 id="link-to">Link to</h2>
<ul>
  <li><a href="http://sailxjx.github.com/blog/blog/2013/01/16/awk-xue-xi-bi-ji-1/">awk学习笔记1</a></li>
  <li><a href="http://sailxjx.github.com/blog/blog/2013/01/21/awk-xue-xi-bi-ji-2/">awk学习笔记2</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[蛋疼的刷屏算法问题]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/04/15/dan-teng-de-shua-ping-suan-fa-wen-ti/"/>
    <updated>2013-04-15T11:15:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/04/15/dan-teng-de-shua-ping-suan-fa-wen-ti</id>
    <content type="html"><![CDATA[<p>最近在v2ex的看到一道有趣而蛋疼的<a href="http://www.v2ex.com/t/65703">求助帖</a>，搜了一下，原题刊登在神人matrix67的<a href="http://www.matrix67.com/blog/archives/4092">博客</a>上。先看看题目：</p>

<p>你有一个特殊的键盘，只有四个键：</p>

<ul>
  <li><code>a</code>, 输入字符a</li>
  <li><code>ctrl+a</code>, 全选</li>
  <li><code>ctrl+c</code>, 复制</li>
  <li><code>ctrl+v</code>, 粘贴</li>
</ul>

<p>还需要说明一下的是，上面的<code>ctrl+x</code>都只算一个按键，而且全选之后的第一次复制粘贴，是不会增加字符长度的，（也就是只覆盖了已有字符，这个在现实生活中应该有体会）。</p>

<p>这是一个不着边际的题目，乍看非常简单，但是细想一下脑子就打结了。牛逼的matrix67大神，用两个公式，三下五除二就搞定了这个问题：</p>

<ul>
  <li>f(n) = f(n-1) + 1</li>
  <li>f(n) = f(n/k) + k + 2</li>
</ul>

<p>然后在以上两种情况下取最小值，再用递推法，递推的层数就是所走的步数了。</p>

<p>具体的计算情况在博客里有介绍，这里不再赘述，我感兴趣的是上面这两个公式，是否能涵盖所有情况，已经怎么推导出这两个公式，这才是真正神奇的地方，而且matrix67也没有给出详细的推导过程。</p>

<h2 id="section">倒推法</h2>

<p>要推导出递推公式，顺着题目的意思思考是不行的（事实上，我认为所有最大值n不确定的问题，都需要逆向思维，否则很容易就陷入无底深渊了）。我们可以看到问题结束的几种情况：</p>

<ul>
  <li>最后一个按键是<code>a</code>，则这种情况最简单，f(n) = f(n) + 1。</li>
  <li>最后一个按键是<code>cv</code>，则这种情况下，最后第二个按键只能是<code>cc</code>或者<code>cv</code>，最后第三个按键只能是<code>ca</code>，<code>cc</code>或<code>cv</code>，整个按键流程可以归纳为<code>x-&gt;ca-&gt;cc-&gt;cv...cv-&gt;y</code>，其中<code>x</code>是在全选前的字符数，<code>y</code>表示总字符数，那么设按键<code>cv</code>的次数为<code>k</code>，全选复制阶段的按键次数就是<code>k+2</code>，而且值得一提的是，这个<code>k</code>必须大于或等于2，否则复制就是多余的。然后<code>y</code>是由<code>x</code>复制<code>k</code>次而来，所以就不难推导出公式f(n) = f(n/k) + k + 2，其中<code>k</code>为大于等于2的<code>n</code>的约数。</li>
</ul>

<p>由此，两个公式都被推导出来了，但这就结束了吗？是否所有的情况都涵盖到了？根据计算结果可以得出f(n)并非单调函数，也就是说f(n-2)有可能小于f(n-1)，那么会不会有f(n-2)到f(n)比f(n-1)到f(n)快的情况呢，这个还需要证明一下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">f(n) = f(n-1) + 1 &lt;=&gt; f(n-2) + 2</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>f(n-2)到f(n-1)最快的路径应该就是<code>f(n-2) + 1</code>了吧，所以不可能是这种情况，那么还剩下一种情况：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">f(n) = f(n-2) + k + 2 &lt;=&gt; f(n-1) + 1  # n = (n-2) * k</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>那么这里又回到了之前预设的第二种情况，其本身就是需要参与递归的比较的，所以这种情况也是已涵盖了的。</p>

<p>这样看了是我多虑了，下面要做的就是将这个递归程序写出来。</p>

<h2 id="section-1">实现</h2>

<p>从程序的角度看，其实算法中还有一些值得优化的地方：</p>

<ul>
  <li>1到100之间(这个范围甚至可以再扩大些)的素数的最小步数可以事先计算出来作为常数数组保存，这些数字是递归的终点，预处理可以让递归的最后一步变成O(1)，而不是O(n)</li>
  <li>上面提到的，k是从2到n，但事实上范围可以更小。在<code>f(n) = f(n/k) + k +2</code>中，随着n的增加，步数的增加并不是线性的，步数的增速的是逐渐放缓的，但是<code>k</code>对于步数的增长变化却是线性的。对公式求导，<code>f(n/k)' &lt; 1</code>而<code>k' = 1</code>，所以我们有理由相信，<code>k</code>的范围只需要从2到√n（包含）就可以了。</li>
</ul>

<p>实际上，第二点对于代码的效率优化是显而易见的，差不多是省了50%的时间。而第一点对于效率的提升是相当惊人的，以n=200为例，有素数索引和没有素数索引的情况下执行时间如下：</p>

<ul>
  <li>4.05s user 0.06s system 99% cpu 4.129 total  # no index</li>
  <li>0.05s user 0.01s system 92% cpu 0.067 total  # have index</li>
</ul>

<p>提升了整整60倍，而且随着n的提高，这个差距会更加明显，100以内的索引可以涵盖n等于0到10000的情况，当n大于10000时，提升这个素数索引即可，代码中提供了很方便的实现索引生成的方法。</p>

<h2 id="section-2">代码</h2>

<p>我做了一个ruby版本的demo，放在<a href="https://gist.github.com/sailxjx/5388648">gist</a>上。</p>

<h2 id="section-3">扩展</h2>

<p>这个命题其实还可以扩展，比方说还是这四个键，但是<code>ctrl+a</code>, <code>ctrl+c</code>, <code>ctrl+v</code>均算作两次按键，那么情况又复杂了，因为不光增加了按键的不确定性，而且复制时候增加了一种情况，在不松开<code>ctrl</code>的情况下，可以多次按<code>v</code>来实现复制。<del>这个扩展命题只有等将来有时间再思考了。</del></p>

<p>这个命题仍然套用倒推法，只需要对第二个公式做一些修改即可：</p>

<ul>
  <li>f(n) = f(n-1) + 1</li>
  <li>f(n) = f(n/k) + k + 5</li>
</ul>

<p>下面的事情就跟之前一模一样啦，这里也有一个<a href="https://gist.github.com/sailxjx/5393701">demo版本</a>，在不算两次按键的时候，最少在n=9时出现了复制，算作两次按键的时候，到n=15才出现复制。</p>

<h2 id="section-4">来源及参考资料</h2>
<ul>
  <li><a href="http://www.matrix67.com/blog/archives/4092">matrix67的蛋疼问题</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[TDWTF] 数据库大师]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/04/11/tdwtf-shu-ju-ku-da-shi/"/>
    <updated>2013-04-11T12:41:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/04/11/tdwtf-shu-ju-ku-da-shi</id>
    <content type="html"><![CDATA[<p>Maurice一直很好奇，他所在的公司经常不经过测试就把新成员招进来。这样看起来是为了节省了公司的时间和金钱。人力资源部门新招的“IT系统专家”在他刚来的那几个礼拜轻而易举的让Maurice毁三观了。</p>

<p>这个奇葩专家很喜欢自吹自擂。无论谁在他附近都能听见他在吹牛。有一天，他向Maurice吹嘘他最得意的事情，是在一个大电信企业的成功故事。这个时候电话铃响了：有个分公司部门没法进入Maurice和他的团队维护的系统了。于是他对Ben说：</p>

<p>“试试你能不能ping到他们的机器 - hostname是RHODODENDRON ”</p>

<p>Ben停止了吹嘘，眨了眨眼睛，仿佛从一个美好的梦中醒了过来。“我该怎么做？”</p>

<p>Maurice很好奇他的“专家”到底是哪个地方没听懂。“你。。。你打开命令提示符，然后输入ping RHODODENDRON。”</p>

<p>“我知道，”Ben说道。“但是。。。我上哪儿去找命令提示符？”</p>

<p>Maurice恨不得自己上了，但是这个时候分公司又打了个电话来请求更新状态。他不得不去亲自去处理另一个问题 - 一个配置错误的客户端。</p>

<p>当Maurice接管后，Ben继续吹他的故事。虽然Maurice心不在焉，他还是注意到在Ben的掌控下，一个通常需要跑整晚的报告只跑了一个小时。事实上，很多同事称Ben为“数据库大师”。</p>

<p>“。。。既然你需要管理数据库，”Ben愉快的宣称，“我就是你要找的人！”</p>

<p>决定不再让Ben在命令行间闲逛，Maurice接受了他这个新同事的建议，给他展示他们的生产数据库，一个有着四十G数据的Sql Server数据库。考虑到数据库的增长量，Maurice向他的“数据库大师”征询意见。</p>

<p>“第一件事，”Ben说道，启动管理工具，“确认里面到底有多少条数据。我喜欢说这是为数据库把脉。我们需要先统计总条目数。”</p>

<p>在Ben咕哝了一阵子之后，Maurice从他肩头看过去。控制台上显示着一条SQL语法错误，仿佛在嘲笑这位“数据库大师”：</p>

<blockquote>
  <p>select count() rowID</p>
</blockquote>

<p>虽然数据库的增长模式仍然是个迷，Maurice却开始认识到“数据库大师”的“专业模式”。不仅仅他语句有问题，他还选错了数据库：他选择了Sql Server的内建数据库。嗯，当然也叫大师（’master’）。</p>

<p>原文链接：<a href="http://thedailywtf.com/Articles/The-Database-Master.aspx">The Database Master</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[动态规划求解数组最大差值]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/04/08/dong-tai-gui-hua-qiu-jie-shu-zu-zui-da-chai-zhi/"/>
    <updated>2013-04-08T12:47:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/04/08/dong-tai-gui-hua-qiu-jie-shu-zu-zui-da-chai-zhi</id>
    <content type="html"><![CDATA[<p>前几天碰到一道有趣的面试题，见微知著，由此记录一下一些新的启发和发现。</p>

<p>题目很简单，给一个数组，其中有n个数字，求后面的数与前面的数的差值，将最大差值的两个数找出来。映射到生活中，就是一个股票何时买入何时卖出能达到最大收益的情况（前提是能预知未来的所有报价）。</p>

<p>一个测试用例是下面这样：</p>

<ul>
  <li>输入：[3,10,11,9,1,2,-1,10,7]</li>
  <li>输出：[-1, 10]</li>
</ul>

<p>这个题目乍看上去相当的简单，我第一个想到的就是，既然要求最大差值，那可以先将每个值与的数之间的差值求出来，然后再进行一次排序，结果不就出来了嘛。这样需要用到两次循环，代码可以参考下面。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">stepIn</span><span class="p">(</span><span class="n">dataInput</span><span class="p">)</span>
</span><span class="line">  <span class="n">dataLen</span> <span class="o">=</span> <span class="n">dataInput</span><span class="o">.</span><span class="n">length</span>
</span><span class="line">  <span class="n">diff</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class="line">  <span class="n">dataResule</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">  <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">dataLen</span><span class="o">-</span><span class="mi">1</span>
</span><span class="line">    <span class="k">for</span> <span class="n">n</span> <span class="k">in</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">dataLen</span>
</span><span class="line">      <span class="n">diff2</span> <span class="o">=</span> <span class="n">dataInput</span><span class="o">[</span><span class="n">n</span><span class="o">]</span> <span class="o">-</span> <span class="n">dataInput</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</span><span class="line">      <span class="k">if</span> <span class="n">diff</span> <span class="o">==</span> <span class="kp">nil</span> <span class="ow">or</span> <span class="n">diff</span> <span class="o">&lt;</span> <span class="n">diff2</span>
</span><span class="line">        <span class="n">diff</span> <span class="o">=</span> <span class="n">diff2</span>
</span><span class="line">        <span class="n">dataResule</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">,</span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="n">diff</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="n">rIdxs</span> <span class="o">=</span> <span class="n">dataResule</span><span class="o">.</span><span class="n">sort_by</span> <span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="o">-</span><span class="n">v</span><span class="p">}</span> <span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">].</span><span class="n">split</span> <span class="s1">&#39;,&#39;</span>
</span><span class="line">  <span class="k">return</span> <span class="o">[</span><span class="n">dataInput</span><span class="o">[</span><span class="n">rIdxs</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">to_i</span><span class="o">]</span><span class="p">,</span> <span class="n">dataInput</span><span class="o">[</span><span class="n">rIdxs</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">to_i</span><span class="o">]]</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的代码已经经过了优化，在每次循环后，保留了之前计算的差值的结果，下面的循环中小于这个差值的索引值就被抛弃了，这样的一个好处是可以减少最后sort时花费的时间。假如保留所有两数之间的差值，假设使用冒泡排序，输入数组长度是m，排序算法复杂度是O(n<sup>2</sup>)，而这个n会达到(m+1)*m/2，所以总的算法复杂度就成了O(n<sup>4</sup>)。而在循环中预处理之后，最后参与排序的元素个数最大不会超过m，总的时间复杂度还是O(n<sup>2</sup>)。其实这只是针对最后的sort而言，而这个程序真正的耗时在上面的嵌套循环，这里的复杂度不管有没有优化，其实都是一样的O(n<sup>2</sup>)，下面sort的消费可以忽略不计。</p>

<p>这是一种比较直观的解法了，事实证明，没有经过斟酌的想法都是不完善的（事实也证明，很多灵光一闪的想法都很很靠谱滴，不过在这里不适用(^_^)。经人启发，才知道有一种解法，只需要一次循环，时间复杂度是O(n)。</p>

<p>这个叫做动态规划的算法说的太笼统，网上的解释也实在是太理论，我们联系实际，就以上面的题目为例。</p>

<p>动态规划的思想通常可以分成下面几部：</p>

<ol>
  <li>给问题分阶段</li>
  <li>确定每个阶段的状态</li>
  <li>确定相邻阶段的之间的递推关系（也就是找出从前一个阶段转化到后一个阶段的条件）</li>
</ol>

<p>上面的例子很容易可以分出三个阶段</p>

<ol>
  <li>开始阶段，将数组中开头的两个元素作为最大，最小值记录在结果数组中，[3,10]</li>
  <li>过程阶段，将后面的数与前面的数比较，比如将11与10比较，并将符合条件的值替换结果数组</li>
  <li>结束阶段，当游标抵达数组最后一个元素时，跳出循环。</li>
</ol>

<p>而这几个状态之间的转移条件在上面已有了说明，主要在第二个阶段，哪些条件能决定替换结果数组，这些条件称为决策</p>

<ol>
  <li>游标所指的数大于结果数组中的最大值，比如后面有11，那么结果数组就变成[3,11]</li>
  <li>游标所指的数小于结果数组中的最小值，那么它就有可能在后面替换结果数组中的最小值，例如后面出现了1，这个时候不能立刻替换掉3，需要找个临时变量将1保存下来。</li>
  <li>游标所指的数与临时最小值之差大于结果数组中两数字之差。这个条件应该优先于决策2和决策1，一旦这个决策生效，将同时替换结果数组中的最大最小值，决策1和决策2在这个时候应该不生效。例如后面出现了12，那么结果数组就应该变成[1,12]。假如这个时候决策1优先生效，那么结果数组会变成[3,12]，而临时变量1将永远没有上位之日了。</li>
</ol>

<p>有了上面的阶段和决策之后，代码就很容易实现了</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">stepIn</span><span class="p">(</span><span class="n">list</span><span class="p">)</span>
</span><span class="line">  <span class="n">min</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># minimal index</span>
</span><span class="line">  <span class="n">max</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># maximal index</span>
</span><span class="line">  <span class="n">differ</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># max differ</span>
</span><span class="line">  <span class="n">minTmp</span> <span class="o">=</span> <span class="kp">nil</span>  <span class="c1"># temp minimal index</span>
</span><span class="line">  <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">list</span><span class="o">.</span><span class="n">length</span>
</span><span class="line">    <span class="k">if</span> <span class="n">minTmp</span> <span class="o">!=</span> <span class="kp">nil</span> <span class="ow">and</span> <span class="n">list</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">-</span> <span class="n">list</span><span class="o">[</span><span class="n">minTmp</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">differ</span>  <span class="c1"># if current index minus temp minimal index is bigger than differ, replace it</span>
</span><span class="line">      <span class="n">differ</span> <span class="o">=</span> <span class="n">list</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">-</span> <span class="n">list</span><span class="o">[</span><span class="n">minTmp</span><span class="o">]</span>  <span class="c1"># new differ</span>
</span><span class="line">      <span class="n">min</span> <span class="o">=</span> <span class="n">minTmp</span>  <span class="c1"># new minimal index</span>
</span><span class="line">      <span class="n">max</span> <span class="o">=</span> <span class="n">i</span>  <span class="c1"># new maximal index</span>
</span><span class="line">    <span class="k">elsif</span> <span class="n">list</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">list</span><span class="o">[</span><span class="n">max</span><span class="o">]</span>  <span class="c1"># replace the maximal index</span>
</span><span class="line">      <span class="n">max</span> <span class="o">=</span> <span class="n">i</span>  <span class="c1"># new maximal index</span>
</span><span class="line">      <span class="n">differ</span> <span class="o">=</span> <span class="n">list</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">-</span> <span class="n">list</span><span class="o">[</span><span class="n">min</span><span class="o">]</span>  <span class="c1"># new differ</span>
</span><span class="line">    <span class="k">elsif</span> <span class="n">list</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">list</span><span class="o">[</span><span class="n">min</span><span class="o">]</span> <span class="ow">and</span> <span class="p">(</span> <span class="n">minTmp</span> <span class="o">==</span> <span class="kp">nil</span> <span class="ow">or</span> <span class="n">list</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">list</span><span class="o">[</span><span class="n">minTmp</span><span class="o">]</span> <span class="p">)</span>  <span class="c1"># replace the temp minimal index</span>
</span><span class="line">      <span class="n">minTmp</span> <span class="o">=</span> <span class="n">i</span>  <span class="c1"># change temp minimal index</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="k">next</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="k">return</span> <span class="o">[</span><span class="n">list</span><span class="o">[</span><span class="n">min</span><span class="o">]</span><span class="p">,</span> <span class="n">list</span><span class="o">[</span><span class="n">max</span><span class="o">]]</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这种解法可能读起来需要稍微绕点弯，而且隐含问题，我在第一次写这段代码的时候就将决策3和决策1的顺序搞反了，但是几个测试脚本都顺利通过了，这就是一个“不明显的bug”，往往比“明显的bug”还要致命，因为根本无迹可查。</p>

<p>不过，相对于性能的提高，牺牲一点可读性还是值得的。在上面的例子中不太明显，但是当我将输入数组的长度变成1000甚至5000时，两种算法的反差是相当惊人的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">bash<span class="nv">$ </span>ruby benchmark.rb 1000
</span><span class="line">dysort: 0.000435
</span><span class="line">trsort: 0.13827
</span><span class="line">bash<span class="nv">$ </span>ruby benchmark.rb 5000
</span><span class="line">dysort: 0.002027
</span><span class="line">trsort: 3.28997
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面是分别在1000和5000的数组长度下运行的结果，可以看出使用第二种算法的时间增长基本是线性的，而使用第一种算法的耗时则会指数级的增长。两种算法横向比较更是高下立分，本来想画图来表示，结果发现差距太大，使用第二种算法的时间柱在图上基本看不到了，于是作罢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[TDWTF] 升级Windows7]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/04/07/tdwtf-sheng-ji-windows7/"/>
    <updated>2013-04-07T14:48:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/04/07/tdwtf-sheng-ji-windows7</id>
    <content type="html"><![CDATA[<p>在随心所欲的创业公司，最新的时髦可能是BYOD(带自己的设备来上班)，但是政府部门往往会比较保守，尤其是在处理机密数据的部门。当Miguel开始在一个州立部门供职时，他们提供给他一个笔记本电脑。出于安全考虑，他被禁止使用其他的设备，其他人也不允许使用他的。同样是出于安全的原因，那个笔记本不能离开他的桌子，它被一条短短的保险链锁定在桌面上，所能移动的范围只有几英尺而已。</p>

<p>这台电脑很奇葩。它非常陈旧，以至于可以让考古学家将它放在博物馆里。在其使用过程中它得到了一些升级。它的硬盘是500GB的，内存上限是2GB。这给Miguel带来了些挑战，因为除了他们的SAAS报告软件，他还需要安装VS2003，VS2005，VS2008，VS2010。这台机器一瘸一拐的跑着Windows XP。</p>

<p>Miguel和他可敬的电脑每天辛勤地为程序套件解决bug。同时，IT部门在忙着他们自己的事儿。有些人注意到（微软对）Window XP的支持将在2014年结束。意识到将所有的用户迁移到新的平台上对于他们来说将是个史诗般的挑战，这帮人决定现在开始行动，而最佳的开始目标就是IT外包部门。</p>

<p>周一，Miguel去上班的时候发现他的笔记本不见了。取而代之的是一张升级中的字条。Miguel不能使用别的电脑，所以整个周一和周二的大部分时间，他所做的就是暖椅子和玩手机游戏。周二下午很晚的时候，他的电脑回来了，并且装上了Windows7和Office2003，其他什么都没有。</p>

<p>Miguel开始重新安装他的开发工具。他先进入保留存了Visual Studio镜像文件的共享文件夹，开始第一步安装，然后发现这次升级撤回了他的管理员权限，禁止他安装任何软件。他用邮箱给控制台提交了一个需求，申请需要的权限。</p>

<p>同样因为安全的原因，就像禁止Miguel使用其他电脑一样，控制台不能轻易授予他这些权限，即使他仅仅是在最初的几天需要这些权限。他们需要经理的签字。而且需要三个人的签名，事实上，这个礼拜其中一个经理请假了。而等到他回来上班，另一个又度假去了。</p>

<p>Miguel花了两个礼拜好不容易等到这些官老爷们聚在一起（世纪之交么？）。在这期间，Miguel什么都没做，每天他就玩着愤怒的小鸟，看着截止日期一天天过去，因为他没有什么事能做。</p>

<p>最后，Miguel的权限终于批下来了。他开始安装需要的工具。时间一分一秒的过去，但是日志系统仍然需要六个小时才能装完，并且每三十分钟就需要他确认一次管理员权限。而在这一切之后，他有不得不把这些都卸载掉，因为他将这些组件的安装顺序搞错了，以至于现在软件没法运行起来。</p>

<p>在这次升级20天后，Miguel终于将一切搞定。他“迫不及待”的打开IE并转向他们的BUG跟踪系统。他预计这计周累积了一大堆的工作任务，但是，他只看到一个错误提示：他们的BUG跟踪系统使用的ActiveX与Windows7不兼容。彻底跪了，他给控制台打电话求助。</p>

<p>“这是个已知的问题，”控制台懒懒的说道：“假如你想要进入BUG跟踪系统，你需要安装一个Windows XP虚拟机。”</p>

<p>原文链接：<a href="http://thedailywtf.com/Articles/The-Windows-7-Upgrade.aspx">The Windows 7 Upgrade</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[TDWTF] 开发账号]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/03/21/tdwtf-kai-fa-zhang-hao/"/>
    <updated>2013-03-21T16:43:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/03/21/tdwtf-kai-fa-zhang-hao</id>
    <content type="html"><![CDATA[<p>Karen在办公桌旁瞪着Tom。“你在电脑上安装了Visual Studio？”</p>

<p>“对啊”，Tom搞不明白她为啥要暴走。</p>

<p>“而且你访问了Oracle数据库？”</p>

<p>“额。。。是啊”</p>

<p>“你为什么要这样干？”</p>

<p>为什么？Tom刚刚作为财务部门的一名开发者加入了这家财富500强公司，并且直接向Karen（一个财务专家）汇报，大部分时间都从事一些财务相关的工作。事实上，在这里他见过的唯一一个IT工作人员是帮他装电脑的。</p>

<p>第一天，Karen让他修复一个财务预测系统，简称FFS。“它性能很差，而且没人搞得懂它到底是怎么工作的甚至它是干什么的。不搞坏点东西的话我就没法向它添加报告记录。把它搞明白，有问题就问财务会计人员。”</p>

<p>Tom没花多久就搞清楚这个系统为什么会比像超车道上过马路的老头还慢了。FFS用的是Access数据库，但是超出了Access处理能力15倍。为什么是这个特殊的数字？因为数据文件被分成了15个2GB的文件。而第16个小得多的文件中包含的VBA代码将这个系统整合在一起。它不是由程序员开发的，而是由某个路人甲搞出来的玩意儿。</p>

<p>不同于传统的链接表结构，在提交表单前VBA会在数个DB文件中执行语句。基本的Access特征，像语句和报告并不能很容易的得到结果。大多数报告记录是手写的VBA表单。（这段没看明白，瞎蒙了。。。）</p>

<p>Karen并没兴趣对Tom进行技术指导，他只能慢慢往下查。第一步是将一些数据迁移到真正的数据库上。他可以慢慢将一些功能迁移到一个.net应用上并且保持原有的需求。这样做有点像一个“牛仔码农”，但是相对于他们已有的系统，这是个巨大的进步。</p>

<p>“我不敢相信你居然干了这种事！” Karen说。“只有研发有权限安装Visual Studio，并且只有研发可以访问数据库。你现在把这些权限搞的一团糟。”</p>

<p>Tom有点迷惑。“我想我应该<em>是</em>一个研发”</p>

<p>“在组织架构上，你不是。” Karen说。“你是一个会计，我们部门不允许招聘研发。”</p>

<p>Tom克制住打开手机查查翻译软件的冲动；他现在相信自己跟Karen没有共同语言。“假如你不能招聘研发，为什么你又招聘他们然后假装他们是会计？”</p>

<p>“集团的IT拒绝支持FFS，”她说。“至少在我们付钱给他们升级.net之前他们不干。但是我们没有这么多的IT经费预算。所以我们试图找一些人来支持Access应用。你唯一需要的研发工具就<em>应该是</em>Access。”</p>

<p>Tom想找出一些理由或名言警句来说服Karen认识到自己的错误，最后他只能放弃了。她的逻辑用官僚主义铸成了一道密不透风的墙。</p>

<p>Tom回到他的座位，开始卸载Visual Studio。在机器硬盘发出轧轧声的时候，他打开一个被<em>允许</em>使用的研发工具-Word-开始更新他的简历。</p>

<p>原文链接: <a href="http://thedailywtf.com/Articles/Accounting-for-Development.aspx">Accounting for Development</a></p>

<h1 id="section">后记</h1>

<p>翻译真是个技术活。。。老外的俚语也很多啊，好多搞不懂啊！~慢慢来吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[css transition &amp; transform &amp; animation]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/03/12/css-transition-and-transform-and-animation/"/>
    <updated>2013-03-12T16:41:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/03/12/css-transition-and-transform-and-animation</id>
    <content type="html"><![CDATA[<link rel="stylesheet" href="http://sailxjx.github.com/blog/u/css/trans.css" />

<p>小时候没花功夫学英语（悔之莫及啊~），以至于经常将css中的transition和transform搞混，再加上一个强大而复杂的animation，就更是一头雾水了，今天整理一下，做个笔记。</p>

<ul>
  <li><code>transition</code> 将style的变化用动画的方式来过渡</li>
  <li><code>transform</code> style的一些高级变换，像拉伸，旋转，缩放之类</li>
  <li><code>animation</code> css自定义动画，功能强大，并且由于是浏览器内置，流畅度会比javascript动画高</li>
</ul>

<p>注意咯，以上css属性都不支持IE浏览器，其中，IE9以上支持<code>transform</code>，需要加’-ms-‘前缀。</p>

<h2 id="transition">transition</h2>
<p>transition可以在同一dom元素的两种不同样式之间添加平滑的动画切换效果，下面是一个简单的例子，可以看出在没transition和有transition的情况下的区别。</p>

<div>
<div class="color-transition color-demo">color<br />transition</div>
<div class="color-notransition color-demo">color<br />notransition</div>
</div>

<p>transition是一种比较好的用户体验，不会让用户对于style的切换感到突兀，要实现上面的效果，只需要在css中添加一行代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span class="nc">.color-transition</span> <span class="p">{</span>
</span><span class="line">    <span class="n">transition</span><span class="o">:</span> <span class="k">background</span> <span class="m">0.7s</span><span class="p">;</span>
</span><span class="line">    <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">transition</span><span class="o">:</span> <span class="k">background</span> <span class="m">0.7s</span><span class="p">;</span>
</span><span class="line">    <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">transition</span><span class="o">:</span> <span class="k">background</span> <span class="m">0.7s</span><span class="p">;</span>
</span><span class="line">    <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">transition</span><span class="o">:</span> <span class="k">background</span> <span class="m">0.7s</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>你可能在心里暗暗骂我SB（嗯，对的，我也讨厌不会数数的淫），上面明明有四行代码，这个也没办法啦，谁让各个浏览器对于css3标准的支持都不一样，添加不同的prefix只是为了兼容一些较低版本的浏览器，在目前的主流中，一行transition就可以走遍天下。（当然，IE是没救了）。</p>

<p>transition中支持的参数是比较容易理解的，第一个是css中的属性(默认的all可以决定所有style的切换都显示成动画)，第一个表示过渡时间，还有第三个参数表示切换的动画类型，有ease(类似正弦曲线的先慢后快再慢)，linear(匀速)等等，第四个参数表示渐变开始的延时。而且可以用逗号分割多个属性，不嫌麻烦的话可以将它们都写上，就像下面这样。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span class="nc">.color-ratate-transition</span> <span class="p">{</span>
</span><span class="line">    <span class="n">transition</span><span class="o">:</span> <span class="k">background</span> <span class="m">0.7s</span> <span class="n">ease</span><span class="o">-</span><span class="n">in</span><span class="o">-</span><span class="n">out</span><span class="o">,</span> <span class="n">rotate</span> <span class="m">3s</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面既然已经用到了rotate，这是一个transform属性，下面就解释一下transform。</p>

<h2 id="transform">transform</h2>

<p>transform是对dom样式的一种变性，一般的样式中，我们可以定义宽高位置，甚至包括圆角。但是要实现旋转，缩放甚至一些3D效果，就需要用到transform了。下面还是先看一个例子：</p>

<div>
<div class="transform-rotate transform-demo">rotate</div>
<div class="transform-scale transform-demo">scale</div>
</div>

<p>rotate可以在很多场景中得到应用，一个比较取巧的方法是用来做输入框的提示箭头，像下面这样.</p>

<div>
    <div class="rotate-arrow"></div>
    <div class="input-tip">your messages</div>
</div>

<p>而scale的作用是在不调整宽高的情况下实现放大与缩小，灵活利用，也能实现一些有趣的功能，比如放大镜，异形字体等。</p>

<p>transform的语法是非常简单的，它只有一个参数，但是形式的是很多变的，详细的列表可见于<a href="http://www.w3schools.com/cssref/css3_pr_transform.asp">w3school的页面</a>。</p>

<h2 id="animation">animation</h2>

<p>下面是重点要介绍的animation了。用css做动画是意见非常geek的事情，相比于js动画，css动画需要更少的代码以及更直观的语法。在做css动画之前，需要先了解keyframes属性，这是css3中新增的一个规则类，实现的方法类似于一些语言中的mixin，而在设计理念上又类似flash中的关键帧，在keyframes中需要定义几个关键帧中dom元素的样式，这几个关键帧可以用百分比来表示，也可以用from,to等一些词汇来表示起点和终点。下面的keyframes表示让一个元素从左向右移动，并加上一些旋转效果。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span class="k">@keyframes</span> <span class="nt">move</span> <span class="p">{</span>
</span><span class="line">  <span class="nt">0</span><span class="o">%,</span> <span class="nt">100</span><span class="o">%</span> <span class="p">{</span>
</span><span class="line">    <span class="k">left</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class="line">    <span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
</span><span class="line">    <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
</span><span class="line">    <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
</span><span class="line">    <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">transition</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="nt">50</span><span class="o">%</span> <span class="p">{</span>
</span><span class="line">    <span class="k">left</span><span class="o">:</span> <span class="m">300px</span><span class="p">;</span>
</span><span class="line">    <span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">180</span><span class="n">deg</span><span class="p">);</span>
</span><span class="line">    <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">180</span><span class="n">deg</span><span class="p">);</span>
</span><span class="line">    <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">180</span><span class="n">deg</span><span class="p">);</span>
</span><span class="line">    <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">transition</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">180</span><span class="n">deg</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>keyframes是一个预定义的方法，将它与animation结合，就能实现有趣的css动画，例如上面名叫move的keyframes，放到下面的代码中，就可以看到完整的动画演示了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span class="nc">.animate-move</span> <span class="p">{</span>
</span><span class="line">  <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class="line">  <span class="n">animation</span><span class="o">:</span> <span class="n">move</span> <span class="m">5s</span> <span class="n">infinite</span><span class="p">;</span>
</span><span class="line">  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">animation</span><span class="o">:</span> <span class="n">move</span> <span class="m">5s</span> <span class="n">infinite</span><span class="p">;</span>
</span><span class="line">  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">animation</span><span class="o">:</span> <span class="n">move</span> <span class="m">5s</span> <span class="n">infinite</span><span class="p">;</span>
</span><span class="line">  <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">animation</span><span class="o">:</span> <span class="n">move</span> <span class="m">5s</span> <span class="n">infinite</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div>
    <div class="animate-move animate-demo">animate<br />move</div>
</div>

<p>上面的例子中包含了animation中的三个参数：keyframes方法名，一次动画持续时间，循环次数。其中无限循环用infinite表示。animation还包含不少有用的参数，比如延迟时间，动画效果等等，在<a href="http://www.w3schools.com/cssref/css3_pr_animation.asp">w3school手册</a>中有详细的记载。</p>

<p>国内音乐网站<a href="http://jing.fm/">jing.fm</a>在交互方面一直很前卫，播放音乐时，专辑封面会像真的在cd中一样打转，模仿一种收听cd的感觉。这个效果就是用animation实现的，下面我们也可以山寨一个玩玩。</p>

<h3 id="section">第一步，打磨圆角</h3>

<p>首先需要的是将正方形的专辑封面变成cd的形状，也就是圆形啦。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span class="nc">.album</span> <span class="p">{</span>
</span><span class="line">  <span class="k">width</span><span class="o">:</span> <span class="m">300px</span><span class="p">;</span>
</span><span class="line">  <span class="k">height</span><span class="o">:</span> <span class="m">300px</span><span class="p">;</span>
</span><span class="line">  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">150px</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>专辑封面我们选择300像素的正方形，然后使用150像素的圆角，可以正好变成一个正圆形。</p>

<h3 id="keyframes">第二步，keyframes</h3>

<p>下面就要定义我们的keyframes了，这个动画很简单，在开头设置成rotate(0)，结尾设置成rotate(360deg)。这样我们比较容易计算循环的时间。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span class="k">@keyframes</span> <span class="nt">dj</span> <span class="p">{</span>
</span><span class="line">  <span class="nt">0</span><span class="o">%</span> <span class="p">{</span>
</span><span class="line">    <span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
</span><span class="line">    <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
</span><span class="line">    <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
</span><span class="line">    <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">transition</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="nt">100</span><span class="o">%</span> <span class="p">{</span>
</span><span class="line">    <span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">360</span><span class="n">deg</span><span class="p">);</span>
</span><span class="line">    <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">360</span><span class="n">deg</span><span class="p">);</span>
</span><span class="line">    <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">360</span><span class="n">deg</span><span class="p">);</span>
</span><span class="line">    <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">transition</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">360</span><span class="n">deg</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-1">第三步，转起来</h3>

<p>将我们的dj keyframes加入animation，选择匀速(linear)，下面就看效果吧。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span class="nc">.album</span> <span class="p">{</span>
</span><span class="line">  <span class="k">width</span><span class="o">:</span> <span class="m">300px</span><span class="p">;</span>
</span><span class="line">  <span class="k">height</span><span class="o">:</span> <span class="m">300px</span><span class="p">;</span>
</span><span class="line">  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">150px</span><span class="p">;</span>
</span><span class="line">  <span class="n">animation</span><span class="o">:</span> <span class="n">dj</span> <span class="m">10s</span> <span class="n">infinite</span> <span class="n">linear</span><span class="p">;</span>
</span><span class="line">  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">animation</span><span class="o">:</span> <span class="n">dj</span> <span class="m">10s</span> <span class="n">infinite</span> <span class="n">linear</span><span class="p">;</span>
</span><span class="line">  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">animation</span><span class="o">:</span> <span class="n">dj</span> <span class="m">10s</span> <span class="n">infinite</span> <span class="n">linear</span><span class="p">;</span>
</span><span class="line">  <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">animation</span><span class="o">:</span> <span class="n">dj</span> <span class="m">10s</span> <span class="n">infinite</span> <span class="n">linear</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
    <img src="http://sailxjx.github.com/blog/u/image/album-milk.jpg" alt="album-milk" class="album" />
</p>

<embed src="http://www.xiami.com/widget/0_1771372335/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent" />

<h2 id="section-2">后记</h2>

<p>上面的效果没有用到一行js。css真是将技术与艺术完美结合的产物，这些动画无疑需要激发人无限的创意，随着浏览器的支持度提高，在web上的应用也会越来越广，应用的明天会非常美好。</p>

<h2 id="section-3">代码</h2>

<p>在自己的项目中，我会使用scss来书写css，省却了很多重复的工作。这个页面的scss文件放到这里保存一下。</p>

<p><a href="http://sailxjx.github.com/blog/u/scss/trans.scss">trans.scss</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[程序猿与脏话]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/03/08/cheng-xu-yuan-yu-zang-hua/"/>
    <updated>2013-03-08T09:51:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/03/08/cheng-xu-yuan-yu-zang-hua</id>
    <content type="html"><![CDATA[<p>俗话说林子大了什么鸟都有，在程序猿这个群体中，脏话和吹牛是两大显著特征。脏话的种类也是花样百出，下面就来归归类</p>

<h3 id="section">第一类，加强语气型</h3>

<p>常见的有<code>damn</code>,<code>f**k</code>，<code>shit</code>等等，往往后面还跟着些动词与形容词，像<code>stupid</code>啦，<code>idiot</code>啦，没啥创意但是足够醒目。</p>

<h3 id="section-1">第二类，表达不满型</h3>

<p>这一类就没有第一类那么无脑啦，至少人家不是词不达意嘛~如<code>what the f**k</code>，<code>a** hole</code>，<code>son of a b*tch</code>，<code>f**k off</code>，<code>beast</code>等等，常作用于老板和项目经理等不招人待见的群体。</p>

<h3 id="section-2">第三类，口头禅</h3>

<p>这一类人往往从第一类进化而来，某些词说习惯了就很难改过来啦，说着说着就喜欢夹一些动词进来，没办法，不然哪像个大老爷们嘛~</p>

<h3 id="section-3">第四类，自嘲型</h3>

<p>这一类就得注意语境啦，说的好了人家会心一笑，说不好人家可真能拔刀相见。</p>

<p>程序猿向来都是独来独往，心高气傲，自然不甘与程序小白为伍啦，甚至在圈内也是互相看不惯的嘛，于是才有了<code>geek</code>的称号，而<code>geek</code>本身就有着讨厌鬼的意思。不少人以<code>geek</code>自居，嘴上更是得理不饶人。因为很多真正的大牛据说也是脾气古怪，比如linus torvalds，就常常在公众场合竖中指，在邮件中更是口无遮拦，著名的有那句<code>Read the F**ing Source Code</code>，顿时霸气十足，节操掉一地。</p>

<p>这是在网上，但是在生活中，我所接触的程序猿往往又成了别人眼里内向，闷骚的代名词，时不时也能冒出一两句冷笑话，提高下存在感。这种现实与虚拟中的反差很有意思，喜欢心理的可以研究一下。</p>

<p>而且在东西方程序猿的文化上，也有差异，老外骂人直来直往，少不了那一个动词。国人比较含蓄，除了问候一家老小七大姑八大姨之外，还会拐弯抹角，引经据典，凸显我大中华之悠久历史，比如最近流行的<code>去年买了个表</code>，就颇具亲和力。在这方面，猫扑天涯是集大成者，但这又不在我们讨论范围内了。</p>

<p>程序猿的脏话，往往见于注释，这也成了代码中的一道亮丽风景，辛辛苦苦读了一天代码，发现一头雾水，这个时候，要是看到这些注释，发现前人也在这里大吐苦水，心里也就释然了。</p>

<p>在这个大数据横行的时候，什么都得靠挖掘嘛，如果写个爬虫，去抓一下各大论坛的脏话做个统计，应该是一件很有意思的事情。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[react.php 中的异步实现]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/03/05/react-dot-php-zhong-de-yi-bu-shi-xian/"/>
    <updated>2013-03-05T15:29:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/03/05/react-dot-php-zhong-de-yi-bu-shi-xian</id>
    <content type="html"><![CDATA[<p>在基于事件的异步模型大行其道的今天，各语言都相继推出了自己的异步框架，nodejs原生的异步模型当然是其中的翘楚，然后python有Twisted，ruby有EventMachine(名字俗了点)。php也有一个不错的异步框架，<a href="https://github.com/reactphp/react">react</a>。下面我们从内而外的看看这个异步模型是怎么实现的。</p>

<h3 id="vnement">événement</h3>

<p>首先react的事件模型是建立在一个叫<a href="https://github.com/igorw/evenement">événement</a>的框架上，也是react作者所作，代码只有短短的74行，实现了<code>on</code>(事件监听),<code>emit</code>(触发事件)等方法。下面就单就这两个事件方法分析一下。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="cp">&lt;?php</span>
</span><span class="line"><span class="k">public</span> <span class="k">function</span> <span class="nf">on</span><span class="p">(</span><span class="nv">$event</span><span class="p">,</span> <span class="nv">$listener</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">is_callable</span><span class="p">(</span><span class="nv">$listener</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">            <span class="k">throw</span> <span class="k">new</span> <span class="nx">\InvalidArgumentException</span><span class="p">(</span><span class="s1">&#39;The provided listener was not a valid callable.&#39;</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">listeners</span><span class="p">[</span><span class="nv">$event</span><span class="p">]))</span> <span class="p">{</span>
</span><span class="line">            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">listeners</span><span class="p">[</span><span class="nv">$event</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">listeners</span><span class="p">[</span><span class="nv">$event</span><span class="p">][]</span> <span class="o">=</span> <span class="nv">$listener</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="k">public</span> <span class="k">function</span> <span class="nf">emit</span><span class="p">(</span><span class="nv">$event</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$arguments</span> <span class="o">=</span> <span class="k">array</span><span class="p">())</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">listeners</span><span class="p">(</span><span class="nv">$event</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$listener</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="nb">call_user_func_array</span><span class="p">(</span><span class="nv">$listener</span><span class="p">,</span> <span class="nv">$arguments</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的<code>$event</code>其实就是一个事件标识，一般是一个字符串，<code>$listener</code>是一个回调方法。调用<code>on</code>时用数组listeners记录所有回调方法，调用<code>emit</code>时再按次序触发，由此还衍生了<code>once</code>(只触发一次就解除绑定的事件)，<code>removeListener</code>(移除事件)等方法。</p>

<h3 id="eventloop">EventLoop</h3>

<p>更进一步，react事件模型的上一层是一个监听循环，叫做<code>EventLoop</code>，有了这个，就往消息队列或webserver的异步处理模型更近了一步。</p>

<p>下面可以看一下<code>EventLoop</code>的接口文件<code>LoopInterface.php</code>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="cp">&lt;?php</span>
</span><span class="line"><span class="k">namespace</span> <span class="nx">React\EventLoop</span><span class="p">;</span>
</span><span class="line"><span class="k">interface</span> <span class="nx">LoopInterface</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">public</span> <span class="k">function</span> <span class="nf">addReadStream</span><span class="p">(</span><span class="nv">$stream</span><span class="p">,</span> <span class="nv">$listener</span><span class="p">);</span>
</span><span class="line">    <span class="k">public</span> <span class="k">function</span> <span class="nf">addWriteStream</span><span class="p">(</span><span class="nv">$stream</span><span class="p">,</span> <span class="nv">$listener</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">public</span> <span class="k">function</span> <span class="nf">removeReadStream</span><span class="p">(</span><span class="nv">$stream</span><span class="p">);</span>
</span><span class="line">    <span class="k">public</span> <span class="k">function</span> <span class="nf">removeWriteStream</span><span class="p">(</span><span class="nv">$stream</span><span class="p">);</span>
</span><span class="line">    <span class="k">public</span> <span class="k">function</span> <span class="nf">removeStream</span><span class="p">(</span><span class="nv">$stream</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">public</span> <span class="k">function</span> <span class="nf">addTimer</span><span class="p">(</span><span class="nv">$interval</span><span class="p">,</span> <span class="nv">$callback</span><span class="p">);</span>
</span><span class="line">    <span class="k">public</span> <span class="k">function</span> <span class="nf">addPeriodicTimer</span><span class="p">(</span><span class="nv">$interval</span><span class="p">,</span> <span class="nv">$callback</span><span class="p">);</span>
</span><span class="line">    <span class="k">public</span> <span class="k">function</span> <span class="nf">cancelTimer</span><span class="p">(</span><span class="nv">$signature</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">public</span> <span class="k">function</span> <span class="nf">tick</span><span class="p">();</span>
</span><span class="line">    <span class="k">public</span> <span class="k">function</span> <span class="nf">run</span><span class="p">();</span>
</span><span class="line">    <span class="k">public</span> <span class="k">function</span> <span class="nf">stop</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>react</code>支持php的社区库<code>libevent</code>提供的事件支持，同时有个<code>LibEventLoop.php</code>用来实现<code>LoopInterface</code>接口，但是<code>react</code>也有自己的实现方案<code>StreamSelectLoop</code>，与<code>LibEventLoop</code>不兼容，这点可以在<code>EventLoop\LibEventLoop\Factory</code>中看到。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="cp">&lt;?php</span>
</span><span class="line">    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">create</span><span class="p">()</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="c1">// @codeCoverageIgnoreStart</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="nb">function_exists</span><span class="p">(</span><span class="s1">&#39;event_base_new&#39;</span><span class="p">))</span> <span class="p">{</span> <span class="c1">//使用libevent</span>
</span><span class="line">            <span class="k">return</span> <span class="k">new</span> <span class="nx">LibEventLoop</span><span class="p">();</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">return</span> <span class="k">new</span> <span class="nx">StreamSelectLoop</span><span class="p">();</span> <span class="c1">//不使用libevent</span>
</span><span class="line">        <span class="c1">// @codeCoverageIgnoreEnd</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们主要来看看<code>StreamSelectLoop</code>的实现。<code>LoopInterface</code>中几个重要的方法<code>addReadStream</code>, <code>addWriteStream</code>, <code>addTimer</code>, <code>tick</code>都可以在<code>StreamSelectLoop</code>找到踪影。下面先说一下<code>addReadStream</code>中的两个参数：</p>

<p>*<code>$stream</code>是一个由<code>stream_socket_server</code>方法生成的socket句柄，支持tcp或文件socket等方式。
*<code>$listener</code>其实就是一个callback方法，在这个方法中就需要实现具体的应用逻辑了。</p>

<p><code>addWriteStream</code>与<code>addReadStream</code>方法差不多，这两个方法其实啥都没做，只是注册一下两个方法，以供后面调用。真正起作用的方法是<code>tick</code>和<code>runStreamSelect</code>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="cp">&lt;?php</span>
</span><span class="line">    <span class="k">protected</span> <span class="k">function</span> <span class="nf">runStreamSelect</span><span class="p">()</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="nv">$read</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">readStreams</span> <span class="o">?:</span> <span class="k">null</span><span class="p">;</span>
</span><span class="line">        <span class="nv">$write</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">writeStreams</span> <span class="o">?:</span> <span class="k">null</span><span class="p">;</span>
</span><span class="line">        <span class="nv">$except</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$read</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nv">$write</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">sleepOnPendingTimers</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">            <span class="k">return</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="nb">stream_select</span><span class="p">(</span><span class="nv">$read</span><span class="p">,</span> <span class="nv">$write</span><span class="p">,</span> <span class="nv">$except</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getNextEventTimeInMicroSeconds</span><span class="p">())</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="nv">$read</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="k">foreach</span> <span class="p">(</span><span class="nv">$read</span> <span class="k">as</span> <span class="nv">$stream</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                    <span class="nv">$listener</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">readListeners</span><span class="p">[(</span><span class="nx">int</span><span class="p">)</span> <span class="nv">$stream</span><span class="p">];</span>
</span><span class="line">                    <span class="k">if</span> <span class="p">(</span><span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$listener</span><span class="p">,</span> <span class="nv">$stream</span><span class="p">,</span> <span class="nv">$this</span><span class="p">)</span> <span class="o">===</span> <span class="k">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">removeReadStream</span><span class="p">(</span><span class="nv">$stream</span><span class="p">);</span>
</span><span class="line">                    <span class="p">}</span>
</span><span class="line">                <span class="p">}</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="nv">$write</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="k">foreach</span> <span class="p">(</span><span class="nv">$write</span> <span class="k">as</span> <span class="nv">$stream</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">writeListeners</span><span class="p">[(</span><span class="nx">int</span><span class="p">)</span> <span class="nv">$stream</span><span class="p">]))</span> <span class="p">{</span>
</span><span class="line">                        <span class="k">continue</span><span class="p">;</span>
</span><span class="line">                    <span class="p">}</span>
</span><span class="line">
</span><span class="line">                    <span class="nv">$listener</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">writeListeners</span><span class="p">[(</span><span class="nx">int</span><span class="p">)</span> <span class="nv">$stream</span><span class="p">];</span>
</span><span class="line">                    <span class="k">if</span> <span class="p">(</span><span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$listener</span><span class="p">,</span> <span class="nv">$stream</span><span class="p">,</span> <span class="nv">$this</span><span class="p">)</span> <span class="o">===</span> <span class="k">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">removeWriteStream</span><span class="p">(</span><span class="nv">$stream</span><span class="p">);</span>
</span><span class="line">                    <span class="p">}</span>
</span><span class="line">                <span class="p">}</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>runStreamSelect</code>方法在<code>tick</code>方法中被调用，目的是在每个间隔中重复调用之前绑定的<code>$listener</code>方法，这个可以理解，因为本来<code>EventLoop</code>的目的就是实现事件的监听，监听的最简单方法就是通过轮询的方式来调用，假如某些方法不希望被重复调用或者希望在某次成功之后就不再调用，那么在定义<code>$listener</code>方法时，将返回值设置成false即可。至于这个间隔，则是通过<code>Timer</code>来实现的。</p>

<p>在<code>runStreamSelect</code>中调用了一个有意思的方法<a href="http://php.net/manual/en/function.stream-select.php"><code>stream_select</code></a>，用timeout取代传统的<code>sleep</code>，并兼具监听socket端口的功能，一旦有新的连接或者改动，<code>stream_select</code>会立刻返回read或write中被修改的socket连接总数。这样，既能合理的释放cpu资源，又能及时对事件发起响应。比起传统的<code>while+sleep</code>，实在是高明很多。</p>

<h3 id="timer">Timer</h3>

<p>说到<code>tick</code>就不得不提<code>Timer</code>，<code>react</code>中用一个<code>Timer</code>类来模拟步进操作。每隔一定的ticket会唤起一个事件，这样才能保证异步操作能正确的被调用，这个ticket的数量有讲究，设置的太小会让系统耗用大量资源，设置的太大又不能保证异步事件能及时的被调用。下面我们来看看<code>Timer</code>中的tick。</p>

<p><code>Timer</code>中使用一个队列来记录所有将触发的事件，并且将它们按照优先级(也就是触发事件)排序，最后每次调用优先级最高的事件。</p>

<p><code>react</code>中使用<code>SplPriorityQueue</code>类来做优先级队列，这是php5.3后新增的一个标准库类，其功能很简单，就是实现一个按照rank排序的队列，有点类似redis中的zset，但是其值是可以重复的，所以它不是一个集合。它实现了<code>insert</code>, <code>count</code>, <code>count</code>, <code>extract</code>等方法，通过<code>insert</code>往队列中插入的数据会自动按照优先级(priority)由大到小排序(<code>react</code>中根据interval时间取负，实现了由小到大排序)，免去了sort的麻烦，然后可以通过<code>extract</code>方法得到队列顶部优先级(priority)最高的数据。</p>

<p>有了Timer，用户就可以给<code>react</code>设置延迟事件，可以参考js中的<code>setTimeout</code>方法。</p>

<p>最后，<code>react</code>通过<code>EventLoop</code>中的<code>run</code>方法将tick放入一个while循环，实现了监听的目的。</p>

<p>总结一下，<code>react</code>的异步事件模型：</p>

<p>核心的on-emit事件模型 –&gt; EventLoop实现响应socket事件 –&gt; Timer实现事件优先级排序 –&gt; while循环来pending服务端的程序。</p>

<p><code>react</code>还提供了很多的示例文件，一个简单的http-server可以实现如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="cp">&lt;?php</span>
</span><span class="line"><span class="k">require</span> <span class="nx">__DIR__</span><span class="o">.</span><span class="s1">&#39;/../vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class="line"><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="nv">$app</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$request</span><span class="p">,</span> <span class="nv">$response</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="o">&amp;</span><span class="nv">$i</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nv">$i</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">    <span class="nv">$text</span> <span class="o">=</span> <span class="s2">&quot;This is request number </span><span class="si">$i</span><span class="s2">.</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class="line">    <span class="nv">$headers</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="nv">$headers</span><span class="p">);</span>
</span><span class="line">    <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">(</span><span class="nv">$text</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="nv">$loop</span> <span class="o">=</span> <span class="nx">React\EventLoop\Factory</span><span class="o">::</span><span class="na">create</span><span class="p">();</span>
</span><span class="line"><span class="nv">$socket</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">React\Socket\Server</span><span class="p">(</span><span class="nv">$loop</span><span class="p">);</span>
</span><span class="line"><span class="nv">$http</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">React\Http\Server</span><span class="p">(</span><span class="nv">$socket</span><span class="p">);</span>
</span><span class="line"><span class="nv">$http</span><span class="o">-&gt;</span><span class="na">on</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">,</span> <span class="nv">$app</span><span class="p">);</span>
</span><span class="line"><span class="nv">$socket</span><span class="o">-&gt;</span><span class="na">listen</span><span class="p">(</span><span class="mi">1337</span><span class="p">);</span>
</span><span class="line"><span class="nv">$loop</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section">后记</h2>

<p><code>react</code>中用到了很多php5.3之后才出现的新特性(EventEmitter2甚至只支持5.4以上的php版本)，很多方法以前也没有接触过，可以说相比于国内对php的应用，老外对语言的研究更加透彻。想起国内这么普及的php应用，很多人只是略知皮毛，就喜欢大言不惭，甚至能人云亦云的挑出一堆语言的弊端。老外的钻研精神确实值得学习。</p>

<p>记录一下几个可能有用但是不常用的类或方法：</p>

<ul>
  <li><a href="http://php.net/manual/en/function.stream-socket-server.php"><code>stream_socket_server</code></a> 创建一个服务端套接字。</li>
  <li><a href="http://php.net/manual/en/function.stream-select.php"><code>stream_select</code></a> 监听读写socket状态的变化，带timeout时间</li>
  <li><a href="http://www.php.net/manual/en/splpriorityqueue.insert.php"><code>SplPriorityQueue</code></a> 创建一个带优先级的有序队列</li>
</ul>

<h2 id="section-1">参考文档</h2>

<p><a href="http://www.mwop.net/blog/253-Taming-SplPriorityQueue.html">Taming SplPriorityQueue</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php的命名空间]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/03/04/php-de-namespace/"/>
    <updated>2013-03-04T11:38:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/03/04/php-de-namespace</id>
    <content type="html"><![CDATA[<p>php中命名空间的概念出现的比较晚(&gt;=5.3)，这也造成了很多人写php程序的时候忽略了这个问题(包括我:)，不过，最近很多老外的开源项目中渐渐流行起在php中使用命名空间。于是我也跟风一把，看看究竟好在哪儿。</p>

<p>在php namespace语句出现之前，通行的做法是根据文件路径定义类名，某些特殊文件再加上后缀，比如存放controller的文件夹中有两个文件，分别存放在<code>controller/Base.php</code>和<code>controller/login/Base.php</code>，根据命名可以看出这是两个基类文件，文件名是一样的，它们的类名一般会写成<code>BaseController</code>和<code>Login_BaseController</code>(首字母大写也是一种约定)，这样就不存在类名冲突的问题了。这样做的一个缺点是类名会很长，用某些人的说法，就是不够优雅，于是命名空间就应运而生了。</p>

<p>命名空间的使用在别的语言中的使用历史不算短，其中微软系的c#由盛。在php中基本是照搬这种思想，下面先举个简单的栗子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>myname1.php  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="cp">&lt;?php</span>
</span><span class="line"><span class="k">namespace</span> <span class="nx">my\name1</span><span class="p">;</span>
</span><span class="line"><span class="k">class</span> <span class="nc">MyClass</span> <span class="p">{}</span> <span class="c1">//定义类</span>
</span><span class="line"><span class="k">function</span> <span class="nf">myfunction</span><span class="p">()</span> <span class="p">{</span><span class="k">echo</span> <span class="s2">&quot;helloworld&quot;</span><span class="p">;}</span> <span class="c1">//定义方法</span>
</span><span class="line"><span class="k">const</span> <span class="no">MYCONST</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">//定义常量</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>假如我们有另一个php文件myname2.php，需要include myname1.php。用下面几种方式是可以的。</p>

<p>一. 在同一namespace下</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="cp">&lt;?php</span>
</span><span class="line"><span class="k">namespace</span> <span class="nx">my\name1</span><span class="p">;</span>
</span><span class="line"><span class="k">include</span> <span class="s1">&#39;myname1.php&#39;</span><span class="p">;</span>
</span><span class="line"><span class="nb">print_r</span><span class="p">(</span><span class="k">new</span> <span class="nx">MyClass</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>从输出结果可以看出实例名已经变成了<code>my\name1\MyClass Object</code>，命名空间会自动的加到类名前面。</p>

<p>二. 在不同namespace下用<code>use</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="x">namespace my\name2; //不同的命名空间</span>
</span><span class="line"><span class="x">include &#39;myname1.php&#39;;</span>
</span><span class="line"><span class="x">use my\name1; //使用命名空间</span>
</span><span class="line"><span class="x">print_r(\my\name1\MYCONST); //这里用调用常量举例</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>需要注意的是，在使用namespace前需要以<code>\</code>开头，否则会自动加到当前的namespace后面，变成<code>my\name2\my\name1\MYCONST</code>，也就得不到正确的结果了。这个有点类似url或*nux系统中用<code>/</code>来表示PATH的根目录。</p>

<p>三. 在不同namespace下用<code>use .. as ..</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="x">namespace my\name2;</span>
</span><span class="line"><span class="x">include &#39;myname1.php&#39;;</span>
</span><span class="line"><span class="x">use my\name1 as m1; //使用命名空间别名</span>
</span><span class="line"><span class="x">m1\myfunction(); //调用方法举例</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这就是命名空间的真正益处了，短啊~不过别名前就不能用<code>\</code>符号了，否则会把<code>m1</code>当做已存在的命名空间来处理。</p>

<h3 id="ps">P.S.</h3>
<ul>
  <li>php5.3之后还有一个全局常量<code>__NAMESPACE__</code>来表明当前文件所在的命名空间，至于用处？谁知道呢。</li>
  <li>在同一个文件中是可以使用多个namespace的。</li>
  <li>假如在命名空间中定义了与全局方法同名的方法，可以使用在前面加<code>\</code>符号的方式调用全局方法，例如在<code>fopen</code>中用<code>\fopen()</code>。而不使用命名空间的时候，重复定义是不允许的。遇到重定义常量也是一样。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[virtualbox hates sendfile]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/02/18/virtualbox-hates-sendfile/"/>
    <updated>2013-02-18T16:39:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/02/18/virtualbox-hates-sendfile</id>
    <content type="html"><![CDATA[<p>事情的起因是这个样子滴~</p>

<p>代码文件都放在mac中，运行环境在virtualbox中，通过mount主机的文件夹来工作，相信很多同学都搭建过这样的环境，一切相安无事，直到某一天。。。</p>

<p>修改过的静态文件不生效了！</p>

<p>本来以为是nginx中缓存设置的问题，使尽各种解数，包括把expires设置为off，header中加Expire为0，给文件加时间戳，依然如此。果断google之，原来是virtualbox使用的特殊文件系统造成的。</p>

<p>apache和nginx中都有个默认开启的选项sendfile，表示通过内核文件指针来读取或复制文件，在vboxsf(virtualbox共享文件所使用的文件系统)中，sendfile会造成文件无法更新。于是我们无论怎么刷新，都只能看到第一次访问得到的文件了。</p>

<p>解决办法也很简单，将nginx.conf中设置<code>sendfile off</code>就可以了。</p>

<p>由于这个问题折腾了我很久，特此记录一下，同时借用某同样遇到此问题的<a href="http://abitwiser.wordpress.com/2011/02/24/virtualbox-hates-sendfile/">blog标题</a>。</p>

<h2 id="section">后记</h2>
<p>1.<a href="https://forums.virtualbox.org/viewtopic.php?f=1&amp;t=24905">virtualbox论坛</a>2009年的时候就有人讨论过这个问题，那时候的版本还是3.0，现在都4.2了，问题仍然没有得到解决，唉~被oracle X过的软件果然不行啊~。</p>

<p>2.在主机中修改文件，虚拟机中的inode不会变化，反过来也一样，不知道是不是因为vboxsf的问题，然而使用samba共享的文件系统中两边的inode是同时变化的。</p>

<h2 id="section-1">参考资料</h2>
<ul>
  <li><a href="http://abitwiser.wordpress.com/2011/02/24/virtualbox-hates-sendfile/">VirtualBox Hates Sendfile</a></li>
  <li><a href="http://serverfault.com/questions/269420/disable-caching-when-serving-static-files-with-nginx-for-development">serverfault</a></li>
  <li><a href="https://forums.virtualbox.org/viewtopic.php?f=1&amp;t=24905">virtualbox forum</a></li>
  <li><a href="http://wiki.nginx.org/HttpCoreModule#sendfile">nginx wiki</a></li>
  <li><a href="http://comments.gmane.org/gmane.linux.kernel.cifs/3517">mac中samba共享的问题</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cypher Query Language 学习笔记(2)]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/02/06/cypher-query-language-xue-xi-bi-ji-2/"/>
    <updated>2013-02-06T14:32:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/02/06/cypher-query-language-xue-xi-bi-ji-2</id>
    <content type="html"><![CDATA[<h3 id="create-unique">create unique</h3>
<p>顾名思义，<code>create unique</code>与<code>create</code>在功能上是类似的，不过当新建的node或relationship已经存在时，<code>create unique</code>不会再生成一个新的node或relationship。</p>

<p>另一个区别是<code>create unique</code>只能在一个<code>path</code>表达式中使用，例如下面的代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>start <span class="nv">bran</span> <span class="o">=</span> node<span class="o">(</span>6<span class="o">)</span> create unique bran-<span class="o">[</span>r:littlebrotherof<span class="o">]</span>-&gt;<span class="o">(</span>n<span class="o">{</span>name:<span class="s2">&quot;jon&quot;</span><span class="o">})</span> <span class="k">return </span>n;
</span><span class="line">+----------------------------+
</span><span class="line">| n                          |
</span><span class="line">+----------------------------+
</span><span class="line">| Node<span class="o">[</span>7<span class="o">]{</span>name:<span class="s2">&quot;jon&quot;</span>,age:17<span class="o">}</span> |
</span><span class="line">+----------------------------+
</span><span class="line">1 row
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的代码中，path中name=”jon”的node已经存在，neo4j认为这是一个<code>unique node</code>，所以不会再新建一个node，稍加修改，将age属性调整一下，就可以新建一个不同的node。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>start <span class="nv">bran</span> <span class="o">=</span> node<span class="o">(</span>6<span class="o">)</span> create unique bran-<span class="o">[</span>r:littlebrotherof<span class="o">]</span>-&gt;<span class="o">(</span>n<span class="o">{</span>name:<span class="s2">&quot;jon&quot;</span>,age:18<span class="o">})</span> <span class="k">return </span>n;
</span><span class="line">+----------------------------+
</span><span class="line">| n                          |
</span><span class="line">+----------------------------+
</span><span class="line">| Node<span class="o">[</span>8<span class="o">]{</span>name:<span class="s2">&quot;jon&quot;</span>,age:18<span class="o">}</span> |
</span><span class="line">+----------------------------+
</span><span class="line">1 row
</span><span class="line">Nodes created: 1
</span><span class="line">Relationships created: 1
</span><span class="line">Properties <span class="nb">set</span>: 2
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>新建relationship的方式和上面差不多，举一反三即可。</p>

<h3 id="foreach">foreach</h3>
<p>foreach针对的neo4j中的集合做遍历，可以做一些批量的修改操作。其语法块需要用括号围起来，像下面的代码，更新path p关联的所有node的uptime属性为100。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>start <span class="nv">bran</span> <span class="o">=</span> node<span class="o">(</span>6<span class="o">)</span> match <span class="nv">p</span> <span class="o">=</span> bran-<span class="o">[]</span>-&gt;<span class="o">()</span> foreach <span class="o">(</span>n in nodes<span class="o">(</span>p<span class="o">)</span>: <span class="nb">set </span>n.uptime <span class="o">=</span> 100<span class="o">)</span>;
</span><span class="line">+-------------------+
</span><span class="line">| No data returned. |
</span><span class="line">+-------------------+
</span><span class="line">Properties <span class="nb">set</span>: 4
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>至于什么是neo4j中的集合，比如<code>nodes()</code>方法得到的结果就是一个集合，用集合表达式表示的也是一个集合，但是<code>n = node(*)</code>中匹配出来的n并不是一个集合。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>start <span class="nv">bran</span> <span class="o">=</span> node<span class="o">(</span>6<span class="o">)</span>, <span class="nv">jon</span> <span class="o">=</span> node<span class="o">(</span>7<span class="o">)</span> foreach <span class="o">(</span>n in <span class="o">[</span>bran, jon<span class="o">]</span>: <span class="nb">set </span>n.uptime <span class="o">=</span> 101<span class="o">)</span>;
</span><span class="line">+-------------------+
</span><span class="line">| No data returned. |
</span><span class="line">+-------------------+
</span><span class="line">Properties <span class="nb">set</span>: 2
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="functions">functions</h3>
<p><a href="http://docs.neo4j.org/chunked/milestone/query-function.html">官方手册</a>中罗列了所有的可用方法，非常详尽，需要慢慢研究了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vagrant 打包与发布]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/02/06/vagrant-da-bao-yu-fa-bu/"/>
    <updated>2013-02-06T14:31:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/02/06/vagrant-da-bao-yu-fa-bu</id>
    <content type="html"><![CDATA[<p>上次失败的<a href="http://sailxjx.github.com/blog/blog/2012/12/11/vagrant-bi-ji/">vagrant尝试</a>之后，很久没有再去捣鼓这玩意儿，最近又想试一试，居然一举成功了，特别记录一下。</p>

<h2 id="section">打包</h2>
<p>上手第一件事就是制作自己的box，网上已经有了许多现成的<a href="http://www.vagrantbox.es/">各linux版本box</a></p>

<p>首先用virtualbox安装好自己的linux，版本任选，我这里用的是ubuntu server 12.10，虚拟机名是<code>ubuntu_server_12.10</code>，装好后在其中添加<code>vagrant</code>账号。再用下面的命令就可以生成自己的box了。</p>

<blockquote>
  <p>vagrant package –base ubuntu_server_12.10 –output vagrant_ubuntu.box</p>
</blockquote>

<p>这样就在当前目录下生成了一个vagrant_ubuntu.box文件，压缩前原始vdi文件在1.4G左右，打包后的box是415M，压缩比还是不错的。</p>

<h2 id="section-1">导入</h2>
<p>下面就是导入box文件了。</p>

<blockquote>
  <p>vagrant box add vagrant_ubuntu vagrant_ubuntu.box</p>
</blockquote>

<p>vagrant的磁盘文件储存在<code>~/.vagrant.d/</code>文件夹中。导入之后用下面的命令生成一个’Vagrantfile’配置文件</p>

<blockquote>
  <p>vagrant init</p>
</blockquote>

<p>然后就可以通过<code>up</code>命令启动虚拟机了</p>

<blockquote>
  <p>vagrant up</p>
</blockquote>

<h2 id="ssh">ssh</h2>
<p>如果不做任何修改，虚拟机默认使用的是NAT的连接方式，而且做了一个端口转发(22-&gt;2222)，这个时候直接通过<code>vagrant ssh</code>命令或22端口是登陆不了虚拟机的，需要在Vagrantfile中添加下面两项</p>

<blockquote>
  <p>config.ssh.port = 2222</p>
</blockquote>

<blockquote>
  <p>config.ssh.private_key_path = “/Users/tristan/.ssh/id_rsa”</p>
</blockquote>

<p>其中第一项指定使用本机的2222作为ssh端口，其中第二项是指定使用的私钥路径，如果事先在虚拟机中加入了对应的公钥，这样连接时就可以免去输入密码的步骤。(还要注意的是网上大部分box都是使用vagrant用户名，密码也是vagrant，算是一个便于传播的约定)。现在可以看一下ssh配置。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">tristan@bran:vagrant<span class="nv">$ </span>vagrant ssh-config
</span><span class="line">Host default
</span><span class="line">  HostName 127.0.0.1
</span><span class="line">  User vagrant
</span><span class="line">  Port 2222
</span><span class="line">  UserKnownHostsFile /dev/null
</span><span class="line">  StrictHostKeyChecking no
</span><span class="line">  PasswordAuthentication no
</span><span class="line">  IdentityFile /Users/tristan/.ssh/id_rsa
</span><span class="line">  IdentitiesOnly yes
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后使用下面的命令，就可以直接登录虚拟机了。</p>

<blockquote>
  <p>vagrant ssh</p>
</blockquote>

<p>包括下面的一系列命令，也均可以使用。</p>

<ul>
  <li><code>vagrant up</code> 启动</li>
  <li><code>vagrant halt</code> 关机</li>
  <li><code>vagrant reload</code> 重启</li>
  <li><code>vagrant suspend</code> 休眠</li>
</ul>

<p>总而言之，搞定ssh，一切就很顺利鸟。</p>

<h2 id="section-2">资源</h2>
<p><a href="http://www.vagrantbox.es/">A list of base boxes for Vagrant - Vagrantbox.es</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cypher Query Language 学习笔记(1)]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/02/01/cypher-query-language-xue-xi-bi-ji-1/"/>
    <updated>2013-02-01T11:30:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/02/01/cypher-query-language-xue-xi-bi-ji-1</id>
    <content type="html"><![CDATA[<p>紧接前文<a href="http://sailxjx.github.com/blog/blog/2013/01/23/chu-shi-tu-xing-shu-ju-ku-neo4j/">初试图形数据库 neo4j</a>初窥了这种语言的特性，几天使用下来，初期不适应的便秘感慢慢退去，渐入佳境，竟然觉得有些妙不可言鸟。就如同nodejs基于事件的特点和函数式语法对传统编程方法的改变，学习<code>Cypher</code>同样需要改改传统<code>Sql</code>的思路，下面记录一下最近的新发现。</p>

<h3 id="section">版本号</h3>
<p><code>dbinfo</code>可以用于查询一些与数据库状态相关的信息，查看版本号是其中一个应用。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>dbinfo -g Kernel
</span><span class="line"><span class="o">{</span>
</span><span class="line">  <span class="s2">&quot;KernelStartTime&quot;</span>: <span class="s2">&quot;Mon Feb 04 14:45:48 CST 2013&quot;</span>,
</span><span class="line">  <span class="s2">&quot;KernelVersion&quot;</span>: <span class="s2">&quot;Neo4j - Graph Database Kernel 1.9.M04&quot;</span>,
</span><span class="line">  <span class="s2">&quot;MBeanQuery&quot;</span>: <span class="s2">&quot;org.neo4j:instance=kernel#0,name=*&quot;</span>,
</span><span class="line">  <span class="s2">&quot;ReadOnly&quot;</span>: <span class="nb">false</span>,
</span><span class="line">  <span class="s2">&quot;StoreCreationDate&quot;</span>: <span class="s2">&quot;Thu Jan 31 16:42:31 CST 2013&quot;</span>,
</span><span class="line">  <span class="s2">&quot;StoreDirectory&quot;</span>: <span class="s2">&quot;/usr/local/neo4j/data/graph.db&quot;</span>,
</span><span class="line">  <span class="s2">&quot;StoreId&quot;</span>: <span class="s2">&quot;b9dcdac5ae2b9e82&quot;</span>,
</span><span class="line">  <span class="s2">&quot;StoreLogVersion&quot;</span>: 1
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="match">match</h3>
<p>说起这<code>match</code>真是个很神奇的东西，可以用<code>sql</code>中的<code>where</code>作类比，但是又不同于<code>where</code>，因为<code>Cypher</code>中有专门的<code>where</code>。</p>

<p>这个<code>match</code>可以比作正则中的捕获组，还兼具了赋值的功能，如下面的例子</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>start <span class="nv">bran</span> <span class="o">=</span> node<span class="o">(</span>13<span class="o">)</span> match bran-<span class="o">[</span>r<span class="o">]</span>-&gt;b <span class="k">return </span>r, b;
</span><span class="line">+--------------------------------------------------------------------------+
</span><span class="line">| r                                         | b                            |
</span><span class="line">+--------------------------------------------------------------------------+
</span><span class="line">| :islittlebrotherof<span class="o">[</span>2<span class="o">]</span> <span class="o">{</span>age:1359622995523<span class="o">}</span> | Node<span class="o">[</span>14<span class="o">]{</span>name:<span class="s2">&quot;snow&quot;</span>,age:17<span class="o">}</span> |
</span><span class="line">+--------------------------------------------------------------------------+
</span><span class="line">1 row
</span><span class="line">0 ms
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的例子中通过<code>match</code>找出了节点bran出去的所有关系r和所有终点b，这在传统的<code>sql</code>中可以比较难办到的哦。</p>

<p><code>match</code>一般需要和下面要提到的独有的模式(pattern)配合使用，比如下面这个很神奇的语句，能匹配出与节点summer和snow都有关系的中间节点，甚至你可以在中途添加一些表达式来获得沿途的关系对象。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>start <span class="nv">summer</span> <span class="o">=</span> node<span class="o">(</span>15<span class="o">)</span>, <span class="nv">snow</span> <span class="o">=</span> node<span class="o">(</span>14<span class="o">)</span> match summer-<span class="o">[</span>r<span class="o">]</span>-&gt;n&lt;--snow <span class="k">return </span>n, r;
</span><span class="line">+--------------------------------------------------------+
</span><span class="line">| n                            | r                       |
</span><span class="line">+--------------------------------------------------------+
</span><span class="line">| Node<span class="o">[</span>13<span class="o">]{</span>name:<span class="s2">&quot;bran&quot;</span>,age:10<span class="o">}</span> | :isdogof<span class="o">[</span>3<span class="o">]</span> <span class="o">{</span>ctime:100<span class="o">}</span> |
</span><span class="line">+--------------------------------------------------------+
</span><span class="line">1 row
</span><span class="line">1 ms
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当你不想要将匹配结果赋值时，可以使用()来代替node，用[]来代替relationship，当然，relationship不填写也是可以的。</p>

<p><code>match</code>中还有一种表示深度的方式，类似于<code>coffee</code>中的数组定义<code>[0..10]</code>来表示深度范围。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>start <span class="nv">s</span> <span class="o">=</span> node<span class="o">(</span>15<span class="o">)</span>, <span class="nv">snow</span> <span class="o">=</span> node<span class="o">(</span>14<span class="o">)</span> match <span class="nv">p</span> <span class="o">=</span> s-<span class="o">[</span>r:knowns*1..2<span class="o">]</span>-&gt;snow <span class="k">return </span>r;
</span><span class="line">+-------------------------------+
</span><span class="line">| r                             |
</span><span class="line">+-------------------------------+
</span><span class="line">| <span class="o">[</span>:knowns<span class="o">[</span>6<span class="o">]</span> <span class="o">{}</span>,:knowns<span class="o">[</span>7<span class="o">]</span> <span class="o">{}]</span> |
</span><span class="line">+-------------------------------+
</span><span class="line">1 row
</span><span class="line">1 ms
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>官网手册中还提供了一个深度为0的例子，表示指向自己的relationship。同样如果不需要赋值或者不需要指定类型，用[*1..2]代替。</p>

<p>求最短路径在很多地方都会应用到,neo4j提供了<code>shortestpath</code>方法来提供两点间的最短路径</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>start <span class="nv">bran</span> <span class="o">=</span> node<span class="o">(</span>1<span class="o">)</span>, <span class="nv">jon</span> <span class="o">=</span> node<span class="o">(</span>2<span class="o">)</span> match <span class="nv">p</span> <span class="o">=</span> shortestpath<span class="o">(</span>bran-<span class="o">[</span>*..2<span class="o">]</span>-&gt;jon<span class="o">)</span> <span class="k">return </span>p;
</span><span class="line">+------------------------------------------------------------------------------------------------------+
</span><span class="line">| p                                                                                                    |
</span><span class="line">+------------------------------------------------------------------------------------------------------+
</span><span class="line">| <span class="o">[</span>Node<span class="o">[</span>1<span class="o">]{</span>name:<span class="s2">&quot;bran&quot;</span>,age:10<span class="o">}</span>,:islittlebrotherof<span class="o">[</span>0<span class="o">]</span> <span class="o">{</span>ctime:1359963465947<span class="o">}</span>,Node<span class="o">[</span>2<span class="o">]{</span>name:<span class="s2">&quot;jon&quot;</span>,age:17<span class="o">}]</span> |
</span><span class="line">+------------------------------------------------------------------------------------------------------+
</span><span class="line">1 row
</span><span class="line">1 ms
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>不过假如在<code>shortestpath</code>参数中指定最短长度值的话会报错(如<code>p = shortestpath(bran-[*0..2]-&gt;jon)</code>)，不过貌似没有<code>longestpath</code>来获得最长路径，可能一是因为应用场景较少，二是在算法上也会复杂很多，略显遗憾。</p>

<h3 id="pattern">pattern</h3>
<p>现在再记录pattern有点本末倒置的感觉，毕竟前面的match已经用到了很多种pattern，那么这里权作总结，将常用的pattern归归类。</p>

<ul>
  <li><code>a--&gt;b</code> 最简单的，由一个node到另一个node</li>
  <li><code>a-[r]-&gt;b</code> 加上了relationship的path</li>
  <li><code>()-[]-&gt;b</code> 如果都不想要标注变量，可用<code>()</code>表示一个node（或一个子pattern），用<code>[]</code>表示一个relationship</li>
  <li><code>a-[r:TYPE1|TYPE2]-&gt;b</code> 指定relationship type，其中type可以指定多个，为或的关系。</li>
  <li><code>a-[?*]-&gt;b</code> 得到node a到node b的所有路径，如果不存在路径则返回null。（假如没有<code>?</code>则返回空）</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>start <span class="nv">a</span> <span class="o">=</span> node<span class="o">(</span>1<span class="o">)</span> match <span class="nv">p</span> <span class="o">=</span> a-<span class="o">[</span>*<span class="o">]</span>-&gt;b <span class="k">return </span>p;
</span><span class="line">+----------------------------------------------------------------------------------------------------------------------+
</span><span class="line">| p                                                                                                                    |
</span><span class="line">+----------------------------------------------------------------------------------------------------------------------+
</span><span class="line">| <span class="o">[</span>Node<span class="o">[</span>1<span class="o">]{</span>name:<span class="s2">&quot;bran&quot;</span>,age:10<span class="o">}</span>,:islittlebrotherof<span class="o">[</span>0<span class="o">]</span> <span class="o">{</span>ctime:1359963465947<span class="o">}</span>,Node<span class="o">[</span>2<span class="o">]{</span>name:<span class="s2">&quot;jon&quot;</span>,age:17<span class="o">}]</span>                 |
</span><span class="line">| <span class="o">[</span>Node<span class="o">[</span>1<span class="o">]{</span>name:<span class="s2">&quot;bran&quot;</span>,age:10<span class="o">}</span>,:isownerof<span class="o">[</span>1<span class="o">]</span> <span class="o">{}</span>,Node<span class="o">[</span>3<span class="o">]{</span>name:<span class="s2">&quot;summer&quot;</span>,age:4<span class="o">}]</span>                                          |
</span><span class="line">| <span class="o">[</span>Node<span class="o">[</span>1<span class="o">]{</span>name:<span class="s2">&quot;bran&quot;</span>,age:10<span class="o">}</span>,:isownerof<span class="o">[</span>1<span class="o">]</span> <span class="o">{}</span>,Node<span class="o">[</span>3<span class="o">]{</span>name:<span class="s2">&quot;summer&quot;</span>,age:4<span class="o">}</span>,:knowns<span class="o">[</span>5<span class="o">]</span> <span class="o">{}</span>,Node<span class="o">[</span>2<span class="o">]{</span>name:<span class="s2">&quot;jon&quot;</span>,age:17<span class="o">}]</span> |
</span><span class="line">+----------------------------------------------------------------------------------------------------------------------+
</span><span class="line">3 rows
</span><span class="line">1 ms
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>a-[*3..5]-&gt;b</code> 指定path的深度，是可以是一个范围值。</li>
  <li><code>me-[:KNOWS*1..2]-remote_friend</code> 将前面集中pattern整合一下，主要是注意其中各pattern的位置，不能搞乱。</li>
</ul>

<h3 id="index">index</h3>
<p><code>neo4j</code>的索引是一个key=&gt;value对，基于lucene，据说也可以换其他的引擎，没试过。通过索引可以供<code>Cypher</code>或Rest api查找对应的node或relationship或任何想要的集合。</p>

<p>索引分为两种，自动索引和手动索引，就目前的<code>Cypher</code>版本(1.9.M04)来说，还没有提供创建手动索引的功能，遗憾的是，在nodejs客户端中同样没有完善这一功能，所以我找到了一个ruby版本的客户端用于实验这一功能。</p>

<p><a href="https://github.com/maxdemarzi/neography">neography</a>是官方推荐的一个ruby driver(其实官方推荐中排名更靠前的是<a href="https://github.com/andreasronge/neo4j">neo4j.rb</a>，但是基于jruby的，出于对java的不感冒，还是绕行了)，文档很详细，不赘述了</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;neography&#39;</span>
</span><span class="line"><span class="vi">@neo</span> <span class="o">=</span> <span class="no">Neography</span><span class="o">::</span><span class="no">Rest</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="vi">@neo</span><span class="o">.</span><span class="n">create_node_index</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)</span>                      <span class="c1">#新增一个索引，其中第一个参数是索引主键</span>
</span><span class="line"><span class="vi">@neo</span><span class="o">.</span><span class="n">add_node_to_index</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;bran&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>   <span class="c1">#将一个node添加到索引，其中最后的`1`是node id，也可以是一个node对象，很神奇，很kiss</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>建好一个索引之后，就可以由<code>Cypher</code>出场了。<code>Cypher</code>中通过索引可以查到对应的node和relationship。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c">#                       节点:索引主键(key=value)</span>
</span><span class="line">neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>start <span class="nv">n</span> <span class="o">=</span> node:name<span class="o">(</span><span class="nv">name</span><span class="o">=</span><span class="s2">&quot;bran&quot;</span><span class="o">)</span> <span class="k">return </span>n;
</span><span class="line">+-----------------------------+
</span><span class="line">| n                           |
</span><span class="line">+-----------------------------+
</span><span class="line">| Node<span class="o">[</span>1<span class="o">]{</span>name:<span class="s2">&quot;bran&quot;</span>,age:10<span class="o">}</span> |
</span><span class="line">+-----------------------------+
</span><span class="line">1 row
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>使用<code>Cypher</code>可以创建自动索引，前提是配置中打开了<code>node_auto_indexing</code>(针对node)或<code>relationship_auto_indexing</code>(针对relationship)这一项，而且这个索引是后写入的，也就是说假如之前已经存在的node，在没有改动的情况下，是不会加入到索引中的。</p>

<p>自动索引可以设定需要的fields，在配置文件中用<code>node_keys_indexable</code>和<code>relationship_keys_indexable</code>表示</p>

<p>创建索引的<code>Cypher</code>语句如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>index --create node_auto_index -t node
</span><span class="line">neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>index --indexes
</span><span class="line">Node indexes:
</span><span class="line">  name
</span><span class="line">  node_auto_index
</span><span class="line">
</span><span class="line">Relationship indexes:
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>自动索引默认是关闭的，可能是出于效率的考虑，毕竟在正常的应用中我们不需要对所有node进行索引。而且自动索引是只读的，就是说索引建立以后，除了清空数据库，木有别的方法删掉它啊~。</p>

<h2 id="section-1">注意事项</h2>

<ul>
  <li><code>Cypher</code>中遇到某些查询条件中包含空格或别的非英文字符的，可以用`把字符串包起来。</li>
</ul>

<h2 id="section-2">参考资料</h2>
<ul>
  <li><a href="http://docs.neo4j.org/chunked/milestone/">v1.9手册</a></li>
  <li><a href="https://github.com/maxdemarzi/neography/wiki">neography wiki</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[get post put delete 傻傻分不清楚]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/01/30/get-post-put-delete-sha-sha-fen-bu-qing-chu/"/>
    <updated>2013-01-30T12:41:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/01/30/get-post-put-delete-sha-sha-fen-bu-qing-chu</id>
    <content type="html"><![CDATA[<p>最近看了一些REST API设计的文章，被http中的四种请求类型搞的晕头转向，记录一下，以免忘记。</p>

<h2 id="section">准备工具</h2>
<ul>
  <li><a href="https://chrome.google.com/webstore/detail/rest-console/cokgbflfommojglbmbpenpphppikmonn?utm_source=chrome-ntp-icon">Chrome插件REST Console</a></li>
  <li>一个用于接收参数的php文件</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="cp">&lt;?php</span>
</span><span class="line"><span class="nb">print_r</span><span class="p">(</span><span class="nv">$_REQUEST</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-1">开始</h2>
<p>在通常的lamp开发中，我们最常用到的两种类型是<code>GET</code>和<code>POST</code>，例如用户注册的表单我们会通过<code>POST</code>方式提交到服务器，而一般的ajax接口我们通过<code>GET</code>方式调用。另两种方式不常用，根据w3c关于http1.1的草案，<code>PUT</code>在对象存在的时候用于更新，不存在时与<code>POST</code>相同，用于新建，<code>DELETE</code>顾名思义就是删除对象了。</p>

<p>这也解释了为什么我们在一般的web接口设计中(即使想尽量迎合<code>restful</code>)很少用到<code>PUT</code>和<code>DELETE</code>了，就拿用户账号来说，一般我们的服务器api清楚用户需要做什么，一般分为以下几种情况。</p>

<ul>
  <li>注册： 用户初来乍到，肯定是新建资料，这个时候用<code>POST</code></li>
  <li>登录： 登录需要获取用户信息和密码，用<code>GET</code></li>
  <li>修改账户： 修改的操作比较纠结，按照<code>rest</code>的设计风格，应该用<code>PUT</code>，但是我们一般在服务器端会先做校验，而且当用户信息不存在的情况下不会主动去做创建的操作，而是返回错误信息，更重要的一点是，目前的表单中只支持<code>GET</code>和<code>POST</code>两种方式，所以这个时候一般还是用<code>POST</code>。</li>
  <li>注销账户： 注销账户的情况比较少，而且一般不会做硬删除(否则用户后悔了找上门来咋办捏~)，所以这个时候实质上还是更新的操作，那么同上，一般会使用<code>POST</code>。</li>
</ul>

<p>如此看来，<code>PUT</code>和<code>DELETE</code>岂不是没有用武之地了？在很多server-to-server的api设计中，这些请求方式还是很有用的，灵活利用，可以设计出优雅易读的web-api来，<a href="https://github.com/sofish">@sofish</a>在数月之前有一篇<a href="http://sofish.de/2100">博文</a>很好的解释这种设计的理念和优势。</p>

<h2 id="applicationx-www-form-urlencoded">application/x-www-form-urlencoded</h2>
<p>为了对比<code>GET</code>和<code>POST</code>的异同，在测试过程中还有一个新发现。REST console中默认发送<code>application/x-www-form-urlencoded</code>这个请求头，于是在使用<code>POST</code>方式时，服务器端的php代码不能正确的获得参数，查看请求头，发现本来应该是<code>POST DATA</code>的地方变成了下面这样。</p>

<blockquote>
  <p>Request Payload
url=http%3A%2F%2Fwww.google.com</p>
</blockquote>

<p>google了一个这个<code>Request Payload</code>，找到了<a href="http://stackoverflow.com/questions/9597052/how-to-retrieve-request-payload">stackoverflow君</a>，大意是说假如header中没有<code>application/x-www-form-urlencoded</code>的话，参数不是通过表单项来传递，而是作为request body的一部分。我们的server比较死板，自然认不出这些马甲咯。</p>

<h2 id="section-2">安全与幂等</h2>
<p><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html">w3c关于http method的定义</a>中有一段犹如天书一样的文字，解释了各种方式之间的异同，其中提到了<code>安全</code>与<code>幂等</code>两个概念，大致可以做如下解释。</p>

<ul>
  <li>安全性： api的目的只是从服务器获取数据，无任何新建或更新操作，就认为是安全的。例如<code>GET</code>和<code>HEAD</code></li>
  <li>幂等性： 这个比较难解释的，概括一下可以说是不管一个api调用多少次，返回的结果应该都是唯一的。比如设计的比较规范的<code>GET</code>和<code>DELETE</code>接口。</li>
</ul>

<h2 id="rest-api">rest api的效率问题</h2>
<p>api的效率其实就是http的效率，可以用一个例子来说明。</p>

<p>redis是一个高性能的nosql数据库，但是没有提供rest api。通过tcp连接redis读写效率快的没话说，可是假如对外提供api则需要通过php等客户端做中间件。一次请求需要经过<code>http request-&gt;nginx-&gt;php-&gt;redis</code>层层深入，才能到达最终目标，降低了效率，<a href="https://github.com/nicolasff/webdis">webdis</a>则通过提供redis的rest api将流程简化成了<code>http request-&gt;webdis-&gt;redis</code>，省去了中间的周折，效率自然也就上去了。</p>

<h2 id="method">所有method类型</h2>
<p><a href="http://hc.apache.org/httpclient-3.x/apidocs/org/apache/commons/httpclient/HttpMethod.html">apache的interface httpmethod</a>中列举了所有已知的类型，林林总总加起来有十多项了，可以作为一个查询的索引。不过最常用的应该还是<code>GET</code>，<code>POST</code>，<code>PUT</code>，<code>DELETE</code>四种了。</p>

<h2 id="section-3">参考资料</h2>
<ul>
  <li><a href="http://en.wikipedia.org/wiki/Representational_state_transfer#RESTful_web_services">RESTful_web_services</a></li>
  <li><a href="http://sofish.de/2100">让牛懂琴 by sofish</a></li>
  <li><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html">rfc2616</a></li>
  <li><a href="http://coolshell.cn/articles/4787.html">HTTP幂等性概念和应用 by </a></li>
  <li><a href="http://hc.apache.org/httpclient-3.x/apidocs/org/apache/commons/httpclient/HttpMethod.html">Interface HttpMethod</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
