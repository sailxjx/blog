<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[CodeBean]]></title>
  <link href="http://sailxjx.github.io/blog/atom.xml" rel="self"/>
  <link href="http://sailxjx.github.io/blog/"/>
  <updated>2013-09-17T22:51:41+08:00</updated>
  <id>http://sailxjx.github.io/blog/</id>
  <author>
    <name><![CDATA[tristan]]></name>
    <email><![CDATA[sailxjx@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[软件极简主义]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2013/09/17/ruan-jian-ji-jian-zhu-yi/"/>
    <updated>2013-09-17T21:03:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2013/09/17/ruan-jian-ji-jian-zhu-yi</id>
    <content type="html"><![CDATA[<p>今天回家的路上，竟然刮起了大风，虽然骑行艰难，但是想想公交中的闷热，倒是觉得凉爽多了。</p>

<p>在路上的时间是无聊的，于是就喜欢胡思乱想，很多自以为很棒的点子其实都是在这种不经意间想到的，办公室里的久坐反而显得效率低下了。回味一下最近做的几个项目，高屋建瓴的想想当初的设计，突然很想写一些关于软件设计的文章。就着饮料和巧克力（来点酒么？），今天就来写写软件极简主义吧。</p>

<p>Google了一圈，也没找到对“软件极简主义”的定义，姑且当做是我的独创吧。一般认为“极简主义”是设计界的一种风潮，但是软件发展至今，好像也渐渐有了这样的趋势，甚至我认为这是未来的必然，我们经常听人说“flexible”这个词，字面上来看就是“灵活的”，但是具体到这个软件是否灵活，就不太好判断了。但是，简单的软件，一定是灵活的。</p>

<h2 id="section">极简主义的的大敌</h2>

<p>软件极简主义的三个大敌：配置文件，冗余的参数，和大量复杂的接口。</p>

<p>很多人热爱配置，迷恋配置，认为越多的配置项意味着软件越强大，适用范围越广，但这是九十年代的事了。实际我们仔细翻翻常用的软件，90%的配置都是多余，没有人明白他是做什么的，也没有人希望去改变他。比方很多软件的configure文件，常常能列出上百个配置项，但是我们真的需要这么多吗？不，我们需要默认的那些值就行了。何谓默认？因为软件的设计者觉得这些是最优化也最有可能被选择的配置，那么既然是最优配置，我们又有什么理由去改变他们？</p>

<p>再说说冗余的参数，linux中有一个非常强大的命令’tar’，从man文件看来他起码有二十来个参数，但是我真的需要这么多参数吗？其实我只要记住压缩是<code>-c</code>，解压是<code>-x</code>就可以了，那么何必为了1%的功能而去加上这99%的参数呢。</p>

<p>最后是复杂的接口，举个栗子，全文搜索引擎solr非常强大，能满足我们对于文档索引的各种需求。但是他使用起来可不简单，原因我想就是因为他那种sql式的查询接口，把一件很单纯的事情搞复杂了。我们来设想一下，需要找出包含某几个关键词的文章，必要的条件是什么？关键词，文档，没了。而文档是存储在服务器的，为什么我们提供了关键词之后，仍需加上各种条件，他才能告诉我们想要的答案呢？我想软件发展到一定的智能，他就应该像一部能说话的百科全书，提问，然后告诉我们答案即可。</p>

<p>凡事都要对比着看，所以我们找点软件来对比一下。</p>

<h2 id="redis--sql">redis 与 sql</h2>

<p>redis很灵巧，所有源代码加起来不满5M，但是他很强大，hash结构能取代我们80%对于sql的需求。他也有配置文件，但是选项很少，而且每一项都有详尽的注释，并且使用默认配置就可以应对大部分的情况。唯一值得诟病的就是他的接口种类繁多，但好在这些接口很有规律可循，你只需了解了redis的基础数据结构，那么跟着官网的文档就很容易搞懂所有接口的用途，而且大部分的接口都只接受3个以内的参数，这可好记多了。我刚接触redis的时候，只花了半个小时就能玩得起来，我想面对sql恐怕没人能这么轻松的掌握吧。</p>

<h2 id="cake--grunt">cake 与 grunt</h2>
<p><a href="https://github.com/jashkenas/coffee-script/blob/master/src/cake.coffee">cake</a>和<a href="https://github.com/gruntjs/grunt">grunt</a>是nodejs中两个管理任务的模块，后者的名声更大一些，前者甚至不能说是一个模块，他只是coffeescript中附带的一个小工具。我曾尝试使用grunt来做任务管理，但是当我看到grunt官网那长长的一段initConfig时，就望而却步了。就像是我希望在墙里敲个钉子，你却给了我一台破城锤。我只不过想要给每个任务起个名字方便我以后调用和查阅而已，所以cake的一行命令足矣。</p>

<h2 id="zmq--rabbitmq">zmq 与 rabbitmq</h2>
<p>zmq是我见过的最具有极简主义风格的软件（组件）。一方面他要面对的任务非常繁杂，在异步通信中所有我们可能遇到的情况，他都为我们考虑到了，但是他又将底层的复杂问题掩盖起来，让我们看到一个光滑的表面，深藏功与名。同样来看看他的同行rabbitmq，关键词：中心服务，多线程，模式单一，最后一个特点，慢！而仅有1.7M的zmq，快是最直观的感觉，而分布式和扩展性则是锦上添花。有人说zmq就像乐高积木，每个人都能搭出他想要的形状，这话一点都不错。</p>

<h2 id="section-1">不是结束的结语</h2>
<p>软件的设计日新月异，将来肯定会接触到更多优秀的软件，也许哪天我想法变了，也许哪天遇到了更神奇的方案，可能我会补充在这里。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[介绍 coffeescript 中的列表推导式]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2013/08/17/jie-shao-coffeescript-zhong-de-lie-biao-tui-dao-shi/"/>
    <updated>2013-08-17T16:58:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2013/08/17/jie-shao-coffeescript-zhong-de-lie-biao-tui-dao-shi</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/List_comprehension">列表推导式</a>是一个很著名的语法结构，它的特点是能让代码更简短，优雅，而且易于阅读。捎带些函数式编程特点的语言都支持这种语法结构，例如lisp家族和python。coffeescript作为一门年轻的语言，自然而然的继承了这个特点。</p>

<p>我们先看看这种语法和普通循环的区别：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="nv">arr = </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">v</span> <span class="k">of</span> <span class="nx">arr</span>  <span class="c1"># use for..of loop</span>
</span><span class="line">    <span class="nx">arr1</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">v</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class="line">
</span><span class="line"><span class="nv">arr2 = </span><span class="p">(</span><span class="nx">v</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">v</span> <span class="k">of</span> <span class="nx">arr</span><span class="p">)</span>  <span class="c1"># use list comprehension</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以看到本来需要两行的代码变成了一行，这对于略有装逼犯情结的码农来说，心理上的满足感自然是无与伦比的。优点也是显而易见的，就是可读。在有些语言中，这种语法还会产生一个新的作用域，不会污染外界的变量，比方说ruby。</p>

<p>我们再来看看一些进阶用法，下面是带上<code>if</code>条件的列表推导式：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="nv">arr = </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class="line"><span class="nv">arr1 = </span><span class="p">(</span><span class="nx">v</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">v</span> <span class="k">of</span> <span class="nx">arr</span><span class="p">)</span> <span class="k">if</span> <span class="nx">arr</span><span class="o">?</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>一般的列表推导式返回的结果是一个一维数组，这在我们需要对某个<code>object</code>中的值做转换时会产生不便（<code>key</code>会丢失），这个时候我们可以采用一种变通的方法：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="nv">obj = </span><span class="p">{</span><span class="nv">a: </span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="nv">b: </span><span class="s">&#39;b&#39;</span><span class="p">}</span>
</span><span class="line"><span class="nx">obj1</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">=</span> <span class="nx">v</span> <span class="o">+</span> <span class="nx">v</span> <span class="k">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span> <span class="k">of</span> <span class="nx">obj1</span> <span class="k">if</span> <span class="nx">obj1</span><span class="o">?</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>没加两边的括号和加了括号是有区别的，像上面这种结构，可以理解为将<code>for..of</code>结构中的第二行搬到了等号左边，其中的临时变量<code>k, v</code>当然也是可以直接使用的，而且后面<code>if</code>条件是对整个循环生效的，而不是单独加在每个循环中的，比较好理解吧。</p>

<p>熟练掌握了列表推导式之后，编写代码的时候会更加得心应手，对于代码重构，想必也是极好的。</p>

<h2 id="section">相关文档</h2>

<ul>
  <li><a href="http://userinexperience.com/?p=753">CoffeeScript Object Comprehensions </a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个例子验证 do 在 coffeescript 中干了什么]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2013/08/07/yi-ge-li-zi-yan-zheng-do-zai-coffeescript-zhong-gan-li-shen-me/"/>
    <updated>2013-08-07T17:20:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2013/08/07/yi-ge-li-zi-yan-zheng-do-zai-coffeescript-zhong-gan-li-shen-me</id>
    <content type="html"><![CDATA[<p>使用jslint的时候有可能会见到这样的提示</p>

<blockquote>
  <p>Don’t make functions within a loop</p>
</blockquote>

<p>一直没有太在意这个警告，直到最近做项目的时候还真的碰到了因为这个问题产生的bug。</p>

<p>那么下面就用一个例子来看看在循环中定义方法会产生什么样的后果吧。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="nv">array = </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class="line"><span class="k">for</span> <span class="nx">num</span> <span class="k">in</span> <span class="nx">array</span>
</span><span class="line">  <span class="nx">setTimeout</span> <span class="p">(</span><span class="o">-&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">num</span><span class="p">),</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>得到的结果是’3,3,3’，而不是预期的’1,2,3’，先不说为什么，我们来看看coffeescript给出的解决方案。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="nv">array = </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class="line"><span class="k">for</span> <span class="nx">num</span> <span class="k">in</span> <span class="nx">array</span>
</span><span class="line">    <span class="nx">do</span> <span class="nf">(num) -&gt;</span>
</span><span class="line">        <span class="nx">setTimeout</span> <span class="p">(</span><span class="o">-&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">num</span><span class="p">),</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在这里不得不佩服<a href="https://github.com/jashkenas">Jeremy Ashkenas</a>的无限创造力，短短一个<code>do</code>，就解决了这么让人纠结的问题。下面来看看编译成javascript之后的结果</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">array</span><span class="p">,</span> <span class="nx">num</span><span class="p">,</span> <span class="nx">_fn</span><span class="p">,</span> <span class="nx">_i</span><span class="p">,</span> <span class="nx">_len</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">  <span class="nx">_fn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">setTimeout</span><span class="p">((</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">num</span><span class="p">);</span>
</span><span class="line">    <span class="p">}),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="nx">_i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">_len</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">_i</span> <span class="o">&lt;</span> <span class="nx">_len</span><span class="p">;</span> <span class="nx">_i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">num</span> <span class="o">=</span> <span class="nx">array</span><span class="p">[</span><span class="nx">_i</span><span class="p">];</span>
</span><span class="line">    <span class="nx">_fn</span><span class="p">(</span><span class="nx">num</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="p">}).</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面我们来解释一下为什么上面的代码会有问题，以及这个<code>do</code>为我们做了些啥。</p>

<p>关于javascript的作用域，我们可以看一下<a href="http://rzrsharp.net/2011/06/27/what-does-coffeescripts-do-do.html">这篇文章的引用</a></p>

<blockquote>
  <p>JavaScript’s scopes are function-level, not block-level, and creating a closure just means that the enclosing scope gets added to the lexical environment of the enclosed function.</p>
</blockquote>

<p>大意是说</p>

<blockquote>
  <p>JavaScript的作用域是方法级别，而非块级的。创造一个闭包可以将作用域限定在这个封闭的方法中</p>
</blockquote>

<p>这里的<code>for..in</code>循环在其他语言中就是一个块级的作用域，但是Javascript并不买它的帐，于是最后在方法中调用的num就变成了整个作用域中最后的状态(3)。解决的办法就是在循环中创建闭包，让num当成参数传入闭包，那么它在方法作用域中就不会受外部的变化而改变(实际上完全可以当成一个新的变量，不信你传个object进去，在闭包中的任何修改，都不会对外部作用域的object产生影响的)。</p>

<p>coffeescript用<code>do</code>关键字为我们将这种操作最简化，所以，尝试一下吧。</p>

<h2 id="section">参考文档</h2>

<ul>
  <li><a href="http://stackoverflow.com/questions/10810815/variable-scope-in-coffeescript-for-loop">Variable scope in coffeescript for loop?</a></li>
  <li><a href="http://rzrsharp.net/2011/06/27/what-does-coffeescripts-do-do.html">What Does Coffeescript’s “Do” Do?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于公司架构的一些吐槽]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2013/07/12/guan-yu-gong-si-jia-gou-de-yi-xie-tu-cao/"/>
    <updated>2013-07-12T09:42:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2013/07/12/guan-yu-gong-si-jia-gou-de-yi-xie-tu-cao</id>
    <content type="html"><![CDATA[<p>写了这么多文章，技术屌丝味太浓了，以前每次想写点随想也是<a href="http://sailxjx.github.io/blog/blog/2012/07/29/jing-ji-de-le-qu/">起了个标题就没下文了</a>，正好今天早上看到了一篇<a href="http://www.36kr.com/p/204557.html">喷技术创业的文章</a>，文中观点不敢苟同，趁着早晨清醒的时刻，咱也文艺范一次，写点有感而发的文字。</p>

<p>很多公司，无论大小，都想将部门划分的细之又细。所谓麻雀虽小，五脏俱全。随意拉一张公司的组织结构图出来看看 – 总裁办，行政部，人力资源部，技术部，产品部，市场部，客服部，运营部。。。别人有的我们就得有，别人没有的我们也得有，不论有些部门是不是必须，只要一两个人也能成立个部门。不明真相的人跑来一看，瞧，多正规，高端洋气上档次。</p>

<p>且不论其他职能部门，我就来说说跟研发关系最大的一些部门，以及如何显得他们的工作是不可或缺的。</p>

<h2 id="section">产品部</h2>

<p>产品部本身就是一个比较扯的部门，因为这个词打击面太大，整天挖空心思想点子的，想的是不是产品？没日没夜扣腚的，做的是不是产品？上线后胆战心惊监测的，维护的是不是产品？我们尊崇’less is more’，谁也说不清产品到底是个啥玩意，但是就有这样一个部门，叫做“产品部”。</p>

<p>再回到<a href="http://www.36kr.com/p/204557.html">这篇文章</a>的观点，技术人员过于注重技术，而忽略了对产品的思考，所以需要专门设置这样一个产品经理的职位来构思整个产品的走向。看似有理，但是他的前提是“技术人员不会思考产品”，这就是一个弥天大谎，我见过的大部分技术人员，对于项目的细节，业务逻辑的理解都比普通产品高出不知道多少个档次，我们不能纸上谈兵，只有真正理解了产品实现的业务逻辑，才能提出更有建设性和创新性的意见，这叫站在巨人的肩膀上。但是我看到的很多产品是，进入公司一个礼拜都不到，以前从来没有用过公司的产品，就能洋洋洒洒写出一大篇设计文档来，而问到为什么要这样改，则又支支吾吾，说不出个所以然，最后来一句我看到某某网站也是这样做的，所以我们也要这样做。</p>

<p>回到技术人员的自我修养上来，我认为每个研发应该视自己开发的产品如孩子一般，在关注技术进步之余，能花时间来培养这个孩子，让其更健壮，更优雅，更招人待见。同时，也要多看看外面的世界，试用别人的产品，包括竞争对手的，以和自己创造的孩子进行对比。技术人员提出的产品改进意见往往更务实，更切中要害。</p>

<p>将这种视如己出的概念再推广到所有员工身上，其实人人都可以为产品添砖加瓦出谋划策，那么，产品部门存在的价值何在？</p>

<h2 id="section-1">测试部</h2>

<p>测试可以分为好多类：1.做黑盒的。2.做白盒的。3.自动化测试。
我们一一道来。</p>

<p>先说第一种，做黑盒的。很多公司曲解了黑盒的意思，认为做黑盒就是一个功能开发好了，你拿去用，不出问题就行了。这样就把软件开发变成了一个劳动密集型行业，这样的测试与拿到内测账号的用户有什么区别。更何况我们有些测试人员的使用经验可能还不如用户。这样的测试，效率既低下，效果还不明显。</p>

<p>再说第二种，做白盒的。一些公司有白盒测试，其实就是看看代码。很多公司认为，这个人写代码不行，就让他做测试吧。这是一个大大的误区，对测试人员的要求应该比研发更高，因为我认为<a href="http://blogs.msdn.com/b/ericlippert/archive/2004/06/14/reading-code-is-hard.aspx">读代码往往比写代码更难</a>。上面这种做法的后果就是，一些人做白盒测试的时候，一旦看到不明白的地方，就跑来问研发，需要研发手把手的一条条教来，这不光是浪费双方的时间，也是在做无用功。我相信任意一个合格的研发人员，在提测之前应该都对代码做完整细致的自测。</p>

<p>最后说说第三种，做自动化测试的。这个其实要求较高，很多公司没有，即使有也是认为装个hudson写写配置文件就算自动化测试了。而我认为的自动化测试应该有很强的编码能力，能写出简单有效的单元测试用例，能配置不同的运行环境来确保软件的跨平台性，能进行性能测试，来保证软件的工作效率。这都对测试人员提出了较高的要求，这种人少之又少，而我见到的大多数测试人员连apache的vhost文件都不会写。</p>

<p>真正的测试人员应该得到相当的尊敬，因为他们需要对业务和代码都有很深的理解，他们比程序员更细心，既能防止程序员犯一些低级的错误，又能在一些容易忽略的问题是上保持警惕。</p>

<p>假如找不到这样合适的测试人员，测试部就没有存在的意义。</p>

<h2 id="ued">UED部</h2>

<p>UED这个词是个舶来品，你甚至很难找到合适的中文替代词，只能用“用户体验”这种虚无缥缈的词来囊括。很多公司的UED，其实就是美工。</p>

<p>我自认为对设计和绘画不在行，所以我很尊重设计师的工作。设计师负责原型和效果设计，程序员负责实现，这是由人的左右半脑分工决定的，而且一个好的设计师，简而美的设计，应该是先在公司内部群体中产生认同感，才能让更多的用户认可。</p>

<p>下面是我的吐槽，一些我见过的设计师，可能读过一本<a href="http://book.douban.com/subject/1440223/">Don’t Make Me Think</a>，就能自诩得到了设计的精髓，接着就对页面开始做大刀阔斧的改革，也不需要其他人的意见，因为设计师都有一些自负天才的心理在作怪（嗯，其实程序员也有）。更有甚者，是一天一小改，三天一大改，也没有统一的风格，去别的网站东边抄一块，西边抄一块，就变成了咱家的东西。别人做瀑布流，我们也搞瀑布流，别人做下拉刷新，我们也用下拉刷新，可是从来没有独创的功能被人认可，这也是“一直在模仿，从未被超越”的典型了。</p>

<p>再说到“用户体验”这个词上，世界上恐怕再也找不到这样一个百搭的词了。一个按钮加大点可以叫用户体验，换个字体也叫用户体验，但是众口难调，<a href="http://lesswrong.com/lw/dr/generalizing_from_one_example/">人的大脑是很奇怪的</a>，你喜欢的未必是人家喜欢的。所以真正需要做到的是在公司这个小范围内赢得众人的认同，然后将风格延续下去，这样才能让更多的用户接受乃至迷恋这种风格。有个很成功的例子就是苹果。</p>

<p>这里又要说到关于设计师和程序员两类人的区别了。我认为一个好的设计师和一个好的程序员应该是可以互补并相互学习的。我以前的一个研发经理，技术上肯定是毋庸置疑的，但是也做得一手好画，从鼠绘到原型到效果图，无所不能。这样的人才非常难得，但并不是没有，一个诸葛亮是远远高于三个臭皮匠的。而更多的人可以在学习中达到这个高度。</p>

<h2 id="section-2">理想中的组织架构</h2>

<p>任何组织发展壮大之后，人员就会变得复杂，管理难度相应也会增大。职场如战场，公司就是一个缩小的社会，我们不妨就从历史中找个例子出来。清廷倒台之前，曾有一番关于“共和”还是“立宪”的争论，两派人争得不可开交，最后的结果我们知道，共和派取得了胜利。</p>

<p>“共和”和“立宪”的根本区别还是权力集中在何处。相比帝制的独裁，“立宪”在名义上是说君主也要遵纪守法，权力还是集中于小部分人（真正的“立宪”君主只是个象征，内阁还是要选举的）。而“共和”则将权力下放于大众，政府则是大众意志的集中。</p>

<p>开源软件的圣经<a href="http://en.wikipedia.org/wiki/The_Cathedral_and_the_Bazaar">《大教堂与市集》</a>其实也表达了这样一种思想。软件开发由自上而下的瀑布流发展到今天的开源模式，最有代表性的就是<a href="http://scottchacon.com/2011/08/31/github-flow.html">github flow</a>。就是任何人都有权利对产品提出改进意见，并且可以亲自来实现这些功能，而项目的管理者(owner)在更新自己的产品之余，还需要接受来自四面八方的(pull request)。owner有权力决定这些功能的加入，也有义务鉴定这个功能的风险。</p>

<p>同样对公司的管理也是这样，权力不应该集中于个人，每个员工都应该有发言权。每个员工都应该有自由发挥的空间，来实现自己需要的功能。同时也不能忽略了合作的重要性，所以在日常的工作中，需要三两人一组，作为一个cell，可以是同一个部门中志同道合的人，也可以是不同部门中可以互补的人(比如设计师和程序员)。以cell为最小单位，来完成每个任务。最基本的目标：追求效率，追求自我提高，追求快乐工作。</p>

<p>这对个人也是有要求的，就是每个人都需要能独当一面。我想谁都不会愿意与一个一无所知和整日拖沓的同事合作吧（MM除外）。同时，管理层(owner)的责任就是协调cell之间的工作，有权力决定cell提出的功能的去留，也有义务听取大家的意见。</p>

<p>这也是我觉得创业公司比大公司好的一个原因，就是你有决定权，或者能将意见直接反馈到管理层，而不需要经过大公司死板结构的层层汇报。同样，这样的办事效率也是很多公司望尘莫及的。赠人玫瑰手有余香，以开放的心态接受他人，那么他人也会以同样的姿态来回报你。</p>

<p>最后贴一个豆瓣上的小段子，娱乐一下。<a href="http://www.douban.com/note/157604143/">不同部门员工吃饭时聊些什么</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript并行计算： web worker]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2013/07/10/javascript-bing-xing-ji-suan-web-worker/"/>
    <updated>2013-07-10T12:09:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2013/07/10/javascript-bing-xing-ji-suan-web-worker</id>
    <content type="html"><![CDATA[<p>最近发现了chrome下面的一个奇特现象，像下面这样的一段代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nb">document</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">title</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nb">document</span><span class="p">.</span><span class="nx">title</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line"><span class="p">},</span> <span class="mi">300</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这段代码本来是为了让标签栏内容出现滚动的效果，每300毫秒变化一次，这本来没什么问题，但是偶然切换的其他标签时，这个滚动的速度就会变慢，网上查了一下，原来<a href="https://codereview.chromium.org/6577021">chrome设计如此</a>，当标签页不活动时，chrome会将所有定时任务的最小间隔设置为1秒，这样来减轻浏览器的压力，会影响所有带有timer的方法，如<code>setInterval</code>和<code>setTimeout</code>。像上面这样的任务，间隔就被提高到了1秒。</p>

<p>由此引发的思考是，假如这个任务实时性要求很高，不容许这种时间机器的出现怎么办。stackoverflow也有人给出了<a href="http://stackoverflow.com/questions/5927284/how-can-i-make-setinterval-also-work-when-a-tab-is-inactive-in-chrome">一种解答</a>，不使用内置的timer，而是在代码中主动计算时间差，来模拟<code>setInterval</code>的行为。这种方法能解决问题，但是总觉得不够“优雅”。更好的方法是使用html5的<a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/workers.html">web worker</a>。</p>

<p>web worker目前支持的浏览器包括Firefox 3.5+，Chrome和Safari 4+。你用IE6？那自求多福吧。</p>

<p>搞过消息队列和异步计算的人对worker这个词应该不陌生，html5为我们提供了web worker这样一个优秀的特性，旨在将后台任务和前台交互分开，worker中的任务不会阻塞页面事件。我们先来解决上面提出的问题。</p>

<p>由于不隶属于任意页面，所以chrome不会将worker中的进程timer也改成1秒。所以我们可以对上面的代码稍作修改，拆分成worker和main两部分。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">worker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Worker</span><span class="p">(</span><span class="s1">&#39;worker.js&#39;</span><span class="p">);</span>
</span><span class="line"><span class="nx">worker</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nb">document</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">title</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nb">document</span><span class="p">.</span><span class="nx">title</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>worker.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">self</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">();</span>
</span><span class="line"><span class="p">},</span> <span class="mi">300</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样触发更新title的任务就由worker来完成了。</p>

<p>上面只是一个粗浅的demo，worker真正的意义应该还是在并行计算，不过目前的web应用中前端基本没有大运算量的任务，所以worker在这里就没用武之地了。我们可以设想下面一种情况。</p>

<p>md5是很多网站用于保存密码的方式，由此也产生了很多md5解码的工具，由于md5是一种不可逆的加密算法，解密的方法除了使用字典以外，还有一种简单粗暴的方法，就是暴力破解，而这是非常耗时间的。我们拿到了一个加密过的字符串’77b3e6926e7295494dd3be91c6934899’，而且知道明文是一个六位的数字，那么可以用数字循环来制造碰撞(里面的md5方法是引入外部库，这里及不贴出来了)：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">cipher</span> <span class="o">=</span> <span class="s1">&#39;77b3e6926e7295494dd3be91c6934899&#39;</span><span class="p">;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">start</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
</span><span class="line"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">999999</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">if</span> <span class="p">(</span><span class="nx">md5</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="o">===</span> <span class="nx">cipher</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;plain text: &#39;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">);</span>
</span><span class="line">    <span class="k">break</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;time cost: &#39;</span> <span class="o">+</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()</span> <span class="o">-</span> <span class="nx">start</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>跑下来时间大概是12330毫秒。下面我们用十个worker来分担任务，实现相同的功能。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">cipher</span> <span class="o">=</span> <span class="s1">&#39;77b3e6926e7295494dd3be91c6934899&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">workerList</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class="line">    <span class="nx">start</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
</span><span class="line"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// init 10 workers</span>
</span><span class="line">  <span class="nx">workerList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">Worker</span><span class="p">(</span><span class="s1">&#39;worker.js&#39;</span><span class="p">));</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">workerList</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">worker</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// send task to each worker</span>
</span><span class="line">  <span class="nx">worker</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;plain text: &#39;</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
</span><span class="line">    <span class="nx">workerList</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">_worker</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">_worker</span><span class="p">.</span><span class="nx">terminate</span><span class="p">();</span>  <span class="c1">// terminate all workers after task finished</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;time cost: &#39;</span> <span class="o">+</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()</span> <span class="o">-</span> <span class="nx">start</span><span class="p">));</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line">  <span class="nx">worker</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">({</span>
</span><span class="line">    <span class="nx">start</span><span class="o">:</span> <span class="nx">index</span> <span class="o">*</span> <span class="mi">100000</span><span class="p">,</span>
</span><span class="line">    <span class="nx">end</span><span class="o">:</span> <span class="nx">index</span> <span class="o">*</span> <span class="mi">100000</span> <span class="o">+</span> <span class="mi">99999</span><span class="p">,</span>
</span><span class="line">    <span class="nx">cipher</span><span class="o">:</span> <span class="nx">cipher</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>worker.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">self</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">start</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">end</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nx">md5</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="o">===</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">cipher</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">self</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class="line">      <span class="k">break</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最佳期望是总时间的十分之一，实际执行下来用了2792毫秒，这与给worker分配任务的方式有关，假如我们给worker随机指派计算值，那么得到的结果会更平均，而不会因为密文的变化而有大的波动。</p>

<p>web worker对于javascript全局对象的访问也是有一些限制的，比如window，document，parent对象，这也是不能用worker取代所有页面script的一个原因。</p>

<p>关于worker的具体介绍，<a href="http://www.html5rocks.com/en/tutorials/workers/basics/">这篇文章</a>讲的很好，里面还提供了几个现实的例子，非常详细。</p>

<h2 id="section">参考文档</h2>
<ul>
  <li><a href="http://www.html5rocks.com/en/tutorials/workers/basics/">The Basics of Web Workers</a></li>
  <li><a href="http://robertnyman.com/2010/03/25/using-html5-web-workers-to-have-background-computational-power/">Using HTML5 Web Workers To Have Background Computational Power</a></li>
  <li><a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/workers.html#creating-a-dedicated-worker">9 Web workers</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[几款压力测试工具]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2013/07/05/ji-kuan-ya-li-ce-shi-gong-ju/"/>
    <updated>2013-07-05T16:45:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2013/07/05/ji-kuan-ya-li-ce-shi-gong-ju</id>
    <content type="html"><![CDATA[<p>压力测试工具林林总总，数不胜数，这里只列举几个命令行下常用的工具，来看看那种用的比较顺手，纯粹个人意见。</p>

<ul>
  <li>ab (apache benchmark，因为是apache自带的工具，所以用的人比较多)</li>
  <li>siege (一个不错的开源压力测试工具，简单，好用)</li>
  <li>httperf (据说很强大，但参数实在繁琐，不考虑)</li>
</ul>

<h1 id="ab">ab</h1>
<p>ab是apache自带的测试工具，很多情况下我们要测试一个网站在并发100下的响应速度，用下面的命令就行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ab -n1000 -c100 http://domain.com/</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可不要少了最后的那个’/’，ab接受的url必须是schema, domain, path一个不少的。</p>

<p>其他像添加header，post参数等等的，man一下ab的手册吧。</p>

<p>长久以来我一直以ab作为webserver性能的一个指标，因为使用确实简单，直到遇见了siege。</p>

<h1 id="siege">siege</h1>

<p>siege应该也有些年头了，2000年的时候就已经有这个软件了，直到最近更新了3.0.1版本。在第一次使用的时候，需要用siege.config在主目录下面生成一个配置文件.siegerc。这类文件常用linux的人应该很清楚了，里面每个选项都有明确的注释。需要注意的是delay这个值，做一般测试的时候会按照这个设定的时间间隔停顿，那么这样压力测试出来的结果就不准了，所以在做压测的时候需要加上’-b’参数，或者直接将这个参数设置为0。下面是一个100并发测试10秒钟的例子。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">siege -b -c100 -t10S http://domain.com/</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>siege的一个缺点是没法设置总请求数，但是可以通过重复数和并发数组合来求出总请求数，例如我们要在100并发下发送1000个请求，就用下面的命令，当然这个时候就不能用’-t’参数了</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">siege -b -c100 -r10 http://domain.com/</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>结果与ab差不多，但是他会将历次测试的结果保存在一个文件中供以后比较。</p>

<h1 id="section">测试</h1>

<p>这里我分别用nodejs和php写了两个server脚本，响应值都是’hello world’，都用单一进程作为web server。（php5.4之后用-S参数来启动服务）。</p>

<p>测试结果:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">(request/second)        php     nodejs
</span><span class="line">siege                   2500    2000
</span><span class="line">ab                      4880    3480</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>测试软件的评判标准不一样，所以测试结果有差距也比较合理，不能由此说明谁比谁更准确。但是在测试中nodejs的性能比php要慢20%这个倒是让我觉得比较惊讶，看来nodejs在运算效率上并不占优势。但是在复杂的web应用中，更多的时间开销在io中，nodejs合理的将这部分等待时间利用了起来，才会让人感觉比较快吧。</p>

<p>很早就有人对这几款测试软件做了<a href="http://lionet.livejournal.com/99984.html">横向的对比</a>，有兴趣可以看一下，其中keepalive和no-keepalive的效率差距比较大，我自己测试时觉得并不明显，可能是写的例子比较单一吧。</p>

<p>今后假如需要做简单的压力测试，我还是比较倾向于使用siege。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php 闭包：并不像看上去那么美好]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2013/07/05/php-bi-bao-bing-bu-xiang-kan-shang-qu-na-me-mei-hao/"/>
    <updated>2013-07-05T10:27:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2013/07/05/php-bi-bao-bing-bu-xiang-kan-shang-qu-na-me-mei-hao</id>
    <content type="html"><![CDATA[<p>最近一个叫<a href="http://laravel.com/">laravel</a>的php框架在社区讨论的风生水起，号称php界的rails，试用了一下，确实非常新鲜，但是又有种似曾相识的感觉。</p>

<p>例如路由中的一段代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="cp">&lt;?php</span>
</span><span class="line"><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>兄弟，你走错了，隔壁javascript出门左拐。</p>

<p>laravel号称将php5.3中新引入的闭包发扬光大，让代码变得更加灵活优雅，趣味十足。</p>

<p>在我看来，坑更多了。</p>

<p>为什么说php闭包没有看上去那么美好，因为他的生搬硬套。</p>

<p>闭包这个概念早已不新鲜，在函数是语言中被早已被用烂了，以至于现在lisp教徒抨击其他语言时都避而不谈closure和lambda，转而讨论currying，otp，metaprogramming等等更玄乎的东西。</p>

<p>php的闭包不能说引入的太晚，没有跟上编程发展的脚步，其实在php4时代，就已经有了这样的概念，<code>call_user_func</code>，<code>array_map</code>等等方法都是支持callback方法的。但是时至今日，它依然是不完善的。</p>

<p>在发展的过程中，php引入了很多舶来品，例如接口，命名空间，异常控制等等，每种都是对自身语言已有编程风格的颠覆，以至于现在同样是编写php，不同的人能写出完全不同风格的代码。自然闭包也非原创，同样很怪异。</p>

<h1 id="section">作用域</h1>

<p>在javascript中，闭包内的变量是继承上层的，这是一种很自然的做法，也相当的灵活。但是php有自身的一套作用域规则，于是在闭包中使用变量就变得非常怪异，例如下面的例子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="cp">&lt;?php</span>
</span><span class="line"><span class="nv">$v</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="nv">$arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span><span class="line"><span class="nb">array_map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$n</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$v</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nv">$n</span> <span class="o">==</span> <span class="nv">$v</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">echo</span> <span class="s1">&#39;exist&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class="line"><span class="p">},</span> <span class="nv">$arr</span><span class="p">);</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个<code>use</code>就是用来解决作用域的问题的，使用时可得瞧准咯，每个要用到的变量都得用<code>use</code>引入哦。然后当闭包身处类中时，情况又不一样了，下面的做法在php5.3中是错误的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="cp">&lt;?php</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Demo</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="k">protected</span> <span class="nv">$val</span> <span class="o">=</span> <span class="s1">&#39;v&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">public</span> <span class="k">function</span> <span class="nf">getClosure</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="k">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">val</span><span class="p">;</span>
</span><span class="line">        <span class="p">};</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nv">$d</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Demo</span><span class="p">();</span>
</span><span class="line"><span class="k">echo</span> <span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$d</span><span class="o">-&gt;</span><span class="na">getClosure</span><span class="p">()),</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>因为php5.3不支持在闭包中使用<code>$this</code>或<code>self</code>关键字，但是在php5.4中得到了支持，所以上面的代码是可运行的，但是这让上面第一个例子情何以堪呢。</p>

<h1 id="section-1">绑定</h1>

<p>在5.4之后，php开始支持将一个闭包绑定到别的对象上，以便能直接调用这个对象的成员：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="cp">&lt;?php</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Clo</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$val</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">val</span> <span class="o">=</span> <span class="nv">$val</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">function</span> <span class="nf">getClosure</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="k">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">            <span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">val</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class="line">        <span class="p">};</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Wrap</span> <span class="p">{</span>
</span><span class="line">    <span class="k">protected</span> <span class="nv">$val</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">public</span> <span class="k">function</span> <span class="nf">bar</span><span class="p">(</span><span class="nv">$foo</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$foo</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nv">$a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Clo</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line"><span class="nv">$wrap</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Wrap</span><span class="p">();</span>
</span><span class="line"><span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$a</span><span class="o">-&gt;</span><span class="na">getClosure</span><span class="p">());</span>
</span><span class="line"><span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$a</span><span class="o">-&gt;</span><span class="na">getClosure</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">bindTo</span><span class="p">(</span><span class="nv">$wrap</span><span class="p">,</span> <span class="nv">$wrap</span><span class="p">));</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这在某些场景下有用武之地，不过也要注意作用域，<code>bindTo</code>方法中的第二个参数是设置作用域的，向上面<code>Wrap</code>类中的变量<code>$val</code>是私有的，假如没有<code>bindTo</code>的第二个参数，是行不通滴。</p>

<h1 id="generator">Generator</h1>

<p>顺便再提一下php5.5中新增的Generator，其中的yield支持运行时自定义方法，这显然又是从隔壁python借鉴来的，调用方式同样不是很自然，foreach承担了迭代的责任，相比于ruby中yield的强大功能，更是差之千里了。</p>

<p>不过有总比没有要好，将来一定有创意丰富的人能玩出更多花样，哦，貌似又多了一种编程风格。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[TDWTF] 我们相信傻瓜]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2013/06/20/tdwtf-wo-men-xiang-xin-sha-gua/"/>
    <updated>2013-06-20T16:06:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2013/06/20/tdwtf-wo-men-xiang-xin-sha-gua</id>
    <content type="html"><![CDATA[<p>一天早上，Stan去找他的上级Monty，他正在疯狂地的敲着键盘。这意味着两件事：明天他会收到一封讨厌的设计文档，而且那个设计中会用到一个从没用过的数据库。Monty是一个数据库“砖家”，没什么问题是他不能搞定的。Stan在这家公司的第一年，照做了Monty描述的每个设想，因为他不知道有哪些更好的办法。现在他对公司系统有了更多的了解，他渴望有个机会来做一些正确的事。</p>

<p>Stan在邮箱里找到了一份客户发给Monty的需求副本，要求两个ASP.NET应用之间能互相通信。Stan喜上心头，这是一个简单的web服务，既然他们用.NET，那么只要用<a href="http://en.wikipedia.org/wiki/Windows_Communication_Foundation">WCF</a>就行了。</p>

<p>Monty的介入绝对不可能玷污这个方案，他连.NET的基础都不懂。自从入职的第一天起，Stan就想着能对系统的设计有些话语权，这样才像一个“真正的开发”。最后，这个机会来了！</p>

<p>第二天，Monty的设计发到了Stan的邮箱。Stan心不在焉的打开它，就像一个验尸官掀开一张裹尸布。他翻开这份足足45页的“可扩展性数据库驱动进程内通讯框架”。这有点难理解，而且看起来有点像是重复造轮子。里面几乎没有提及客户的应用，因为它看起来想要将任意应用连接在一起。</p>

<p>这个设计需要用到11张数据表来传递元数据（发送，接收，时间戳，用户id，等等）和应用数据（统统被转成字符串并且储存在类似列1，列2等等的字段中）。当一个应用想要给另一个发送消息，它需要发送所有的会话/消息数据给一个存储过程。这个存储过程接收75个参数，大部分是可选的。另一个类似的存储过程允许发送者附加特殊的应用数据。而对于一个接收者，它需要调用<code>SP_CHECK_FOR_MESSAGES_POLLING_PROCEDURE</code>存储过程并传入它的<code>PK_INT_APPLICATION_IDENTIFIER</code>标识。当它消费完这条消息，还要调用<code>SP_MESSAGE_TRANSACTION_COMPLETE_PROCEDURE</code>存储过程来从“收件箱”中清除消息。Monty的系统会将这个事务中的所有数据移到一个结构相同的log表中，但是没有任何完整性可言。</p>

<p>在Stan砸碎屏幕之前，他听到Monty得意洋洋的说：“我对这事很兴奋，我希望这个能用在任何事上！”</p>

<p>“任何事？”Stan抑制住汹涌而来的恶心感。是时候让他坚持自己的原则，来表明他不再是那个毫无主见的职场新人了。“这个实现。。。很有趣，但是没必要用数据库来实现它”。</p>

<p>Monty一笑置之。</p>

<p>“.NET有个叫WCF的框架可以来帮助我们实现这个功能，”Stan继续说，“我们只需要写很少-”</p>

<p>“不行，”Monty不容置疑的说，虽然Stan知道假如他问Monty什么是“WCF”，Monty肯定会顾左右而言他。“我们在调试系统时会碰到一堆的问题。我们需要知道应用和应用之间是怎么通信的，谁，在什么时候，发送了消息。而且我们会将它储存在一个安全的地方。”</p>

<p>“但是，有一大堆的工具可以用来调试WC-”</p>

<p>“请实现我设计的系统。”Monty不留余地的走开了，以防Stan再有什么说辞。</p>

<p>Stan在与内心抗争中，花了几个礼拜的时间来实现这个冒牌的规范。错误不断的冒出来，而且没有什么好办法来解决强数据类型和同步性的问题。加入这种预防措施会让这庞然大物跑的更慢，虽然它已经够慢的了，而且仍然没法保证它按照预期工作。同时，Monty与客户的沟通不畅导致需求不断的变化。他的设计一天天的变化，最后成了一个64页的设计文档，需要14个数据表。</p>

<p>Stan受够了。他最后只能求助Monty的老板David。David实行开门迎客政策。Stan向David描述了现状。</p>

<p>“这不仅仅走了弯路，而且也不是客户想要的。用WCF的话我本来可以在几个礼拜前就完工，但是Monty不想这么干。”Stan总结到，“我觉得现在改正还为时不晚，但是Monty不赞成这样做。您能向他解释一下吗？”</p>

<p>David叹息道：“我知道了”。</p>

<p>终于！Stan兴奋地想他的建议成功了。</p>

<p>David停顿了一小会儿，然后像一个先知布道一样说，“你叫Stan是吧？Monty。。。有一些怪癖，有时候他会让你做一些毫无意义的事。我需要你继续下去并且相信一切都会好起来。他从公司成立时就在这儿了，我们的系统就像他的孩子一样，所以他知道哪种方式最合适。”</p>

<p>Stan明白现在最理智的是什么事情，他一言不发的回到自己的座位，经过一个小时的沉思，永远的离开了这个办公室。</p>

<h2 id="section">后记</h2>

<p>故事归故事，但很多公司的现状如此，如果不能在工作中提高自己，那么就想办法提高工作。后面的的<a href="http://thedailywtf.com/Comments/In-Fool-We-Trust.aspx">评论</a>也很有意思，可以看一下。</p>

<p>原文链接：<a href="http://thedailywtf.com/Articles/In-Fool-We-Trust.aspx">In Fool We Trust</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[start-stop-daemon]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2013/06/19/start-stop-daemon/"/>
    <updated>2013-06-19T13:44:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2013/06/19/start-stop-daemon</id>
    <content type="html"><![CDATA[<p>很多软件不提供init脚本，或者提供的脚本不合胃口，难免要自己动手丰衣足食。下面就推荐一个用来启动守护进程的神器。</p>

<p><code>start-stop-daemon</code>是<a href="http://www.gentoo.org/proj/en/base/openrc/">OpenRC</a>计划的一部分，这个程序最先出现在Debian系的Linux发行版中，这里有个比较古老的<a href="http://man.he.net/man8/start-stop-daemon">手册</a>页面，更详细更直观的办法当然是通过<code>man start-stop-daemon</code>来查看手册了。我使用的是”start-stop-daemon (OpenRC) 0.10 (Funtoo Linux)”版本，大部分功能是差不多的。</p>

<p><code>start-stop-daemon</code>最基本的两个功能就是<code>--start</code>和<code>--stop</code>，简写为<code>-S</code>和<code>-K</code>，然后再加上一个<code>-s|--signal</code>来给进程发送信号，功德圆满。</p>

<p>至于其中比较常用的一些参数，我列出来参考一下，以免忘了：</p>

<ul>
  <li><code>-x, --exec daemon</code>，daemon就是真正要执行的进程脚本，比方说启动nginx，那么就是<code>start-stop-daemon -x nginx</code>。</li>
  <li><code>-p, --pidfile pidfile</code>，指定pid文件，至于pid文件的用途就多了，stop,status都少不了它。</li>
  <li><code>-n, --name</code>，如果没有指定pid文件，那么就要通过指定name来停止进程了。</li>
  <li><code>-u, --user user[:group]</code>，指定脚本用哪个用户或用户组执行，init脚本是必须使用<code>root</code>权限来执行的，但是它fork出来的子进程我们一般会选择一个权限较低的用户。</li>
  <li><code>-b, --background</code>，强制脚本在后台执行。</li>
  <li><code>-m, --make-pidfile</code>，这个一般和<code>-b</code>配合，用于生成pid文件</li>
  <li><code>-d, --chdir path</code>，切换进程的主目录，这个在构建守护进程的时候是很常用的。</li>
  <li><code>-r, --chroot path</code>，在某些安全性要求较高的情况下，我们就需要用到<code>chroot</code>将进程工作环境与物理环境完全隔离开来。</li>
  <li><code>-1, --stdout logfile</code>，将标准输出记录到log文件，与之相对应的就是<code>-2, --stderr</code>标准错误流。</li>
  <li><code>-w, --wait milliseconds</code>，进程启动后，有这个参数会等待几毫秒来检测进程是否仍然存活。</li>
</ul>

<p>参数说完，下面就是一些需要注意的地方了。</p>

<h2 id="b"><code>-b</code>与守护进程</h2>

<p><code>-b</code>是一个很常用的参数，我们使用<code>start-stop-daemon</code>的目的就是为了实现守护进程。但是有些程序自身也实现了守护进程的功能，比方说mongodb中有一个fork选项就是将自己在后台执行，这个时候假如搭配的<code>-b</code>参数，是得不到正确的pid的，因为<code>start-stop-daemon</code>只能得到最初启动的父进程pid，而父进程在fork完之后就自动退出了，那么<code>start-stop-daemon</code>就永远找不到正确的pid来结束进程了。所以使用<code>-b</code>的时候，一定要保证程序是在前台运行的。</p>

<h2 id="section">其他参数</h2>

<p><code>-x daemon</code>后面跟的执行脚本必须只能是一个文件名，有些程序运行时还需要指定一些参数，比如<code>nginx -c file</code>来指定nginx的配置文件，使用<code>start-stop-daemon -x "nginx -c file"</code>是会报错的，这些程序内的参数以另一种方式加载，<code>start-stop-daemon -x daemon -- $ARGV</code>，这里的双横线<code>--</code>后面跟的所有参数就会被带到程序中了，比如<code>start-stop-daemon -x nginx -c /etc/nginx.conf</code>。</p>

<p>下面是mongodb的一个init脚本，用<code>start-stop-daemon</code>是非常简单的。（貌似源代码中没有提供init脚本，只能自己动手了）。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/sbin/runscript</span>
</span><span class="line"><span class="c"># Distributed under the terms of the GNU General Public License v2</span>
</span><span class="line">
</span><span class="line"><span class="nv">MONGO_HOME</span><span class="o">=</span>/usr/local/mongo
</span><span class="line"><span class="nv">MONGO_USER</span><span class="o">=</span>mongo
</span><span class="line"><span class="nv">MONGO_PID_FILE</span><span class="o">=</span>/var/run/mongo/mongo.pid
</span><span class="line">
</span><span class="line">depend<span class="o">()</span> <span class="o">{</span>
</span><span class="line">    need net
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">start<span class="o">()</span> <span class="o">{</span>
</span><span class="line">    ebegin <span class="s2">&quot;Starting Mongodb&quot;</span>
</span><span class="line">    start-stop-daemon --start       <span class="se">\ </span>
</span><span class="line">        --chdir  <span class="s2">&quot;${MONGO_HOME}&quot;</span>    <span class="se">\ </span>
</span><span class="line">        --user <span class="s2">&quot;${MONGO_USER}&quot;</span>      <span class="se">\ </span>
</span><span class="line">        -m -p <span class="s2">&quot;${MONGO_PID_FILE}&quot;</span>   <span class="se">\ </span>
</span><span class="line">        -b --exec <span class="s2">&quot;${MONGO_HOME}/bin/mongod&quot;</span> -- --config<span class="o">=</span>/etc/mongodb.conf
</span><span class="line">    eend <span class="nv">$?</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">stop<span class="o">()</span> <span class="o">{</span>
</span><span class="line">    ebegin <span class="s2">&quot;Stopping Mongodb&quot;</span>
</span><span class="line">    start-stop-daemon --stop        <span class="se">\ </span>
</span><span class="line">        --chdir <span class="s2">&quot;${MONGO_HOME}&quot;</span>     <span class="se">\ </span>
</span><span class="line">        --user <span class="s2">&quot;${MONGO_USER}&quot;</span>      <span class="se">\ </span>
</span><span class="line">        -p <span class="s2">&quot;${MONGO_PID_FILE}&quot;</span>      <span class="se">\ </span>
</span><span class="line">    eend <span class="nv">$?</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 coffeescript 的注意点]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2013/06/13/shi-yong-coffeescript-de-zhu-yi-dian/"/>
    <updated>2013-06-13T14:48:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2013/06/13/shi-yong-coffeescript-de-zhu-yi-dian</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/jashkenas/coffee-script">coffeescript</a>是javascript的一个方言，随着javascript在前后端的流行，它在<a href="https://github.com/languages">github</a>的排名也扶摇直上，最近终于挤掉高帅富<a href="https://github.com/languages/Objective-C">Objective-C</a>跻身前十，可喜可贺。</p>

<p>虽然coffeescript号称”It’s just javascript”，但是相比较而言，仍然是添加了很多有趣的特性，大部分特性都是去粗取精，去伪存真，让js玩家喜闻乐见，让旁观路人不明觉厉，但是也随之带来了一些容易忽视的问题，不得不提一下，以免以后碰到后不知所措。</p>

<h1 id="section">重载的符号</h1>

<p>coffeescript重载了javascript中的一些符号和语法结构，最常用的就是<code>==</code>和<code>in</code>。</p>

<h2 id="section-1"><code>==</code></h2>
<p>在js中最为人诟病的就是<code>==</code>符号表意不明，所以很多严谨的js开发者就强迫自己在比较时尽可能的使用<code>===</code>，coffeescript在这一点上做的更绝，你不能使用<code>===</code>，因为它将所有的<code>==</code>都转化成了<code>===</code>。这样对于一些经常需要在两种语言之间切换的码农来说，就是一种考验了。</p>

<h2 id="in"><code>in</code></h2>
<p>在js中，遍历一个数组或hash对象可以使用<code>for(var i in arr)</code>的语言结构，这个时候遍历得到的<code>i</code>其实是数组的下标或者hash的key。coffeescript对<code>in</code>做了重载，使其更符合自然语义，遍历出的是数组的值和hash的value。同时引入<code>of</code>操作符，可以用它来代替原生的<code>in</code>，遍历出数组的下标，如<code>for i of arr</code>。</p>

<h1 id="class">class</h1>

<p>原生的js中是没有class的概念的，但是有经验的码农会用prototype模型来将方法打包成class，以实现代码的重复利用。coffeescript中提供了class关键词，让类的实现和继承更加简单，但是也由此引发一些问题。假如说上面的问题只是人所共知的新特性的话，下面这些就是需要在编码时注意绕行的坑了。</p>

<h2 id="section-2">变量名与类名</h2>

<p>coffeescript对于类型和变量名并没有强制性的格式要求，这在其他语言中也不会出现问题，因为可以通过类型检查来区分两者，但是在coffeescript中，其实类和变量都是通过<code>var</code>关键词生成的变量，而在coffeescript语法中又禁用了<code>var</code>（这样就无法人为的指定变量的作用域，虽然coffeescript会比较智能的分配的作用域）。这在一般情况下也没有问题，直到碰到了下面的代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="k">class</span> <span class="nx">demo</span>
</span><span class="line">  <span class="nv">foo1: </span><span class="o">-&gt;</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">demo</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">@</span>
</span><span class="line">  <span class="nv">foo2: </span><span class="o">-&gt;</span>
</span><span class="line">    <span class="nv">demo = </span><span class="p">[]</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">@</span>
</span><span class="line">
</span><span class="line"><span class="k">new</span> <span class="nx">demo</span><span class="p">().</span><span class="nx">foo1</span><span class="p">().</span><span class="nx">foo2</span><span class="p">().</span><span class="nx">foo1</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="o">==&gt;</span> <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">demo</span><span class="p">]</span>
</span><span class="line"><span class="o">==&gt;</span> <span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>同样的两次调用foo1方法，得到的结果却是不同的，这是因为foo2中的变量与类名冲突了，而且他们处于同一个作用域，这样foo2方法就变成了一个隐藏的地雷，踩到就爆炸。避免这种情况的一种做法是在命名上做区分，比如类命名必须以大字母开头，变量必须以小写字母开头，这样就不会造成这两者的混淆。</p>

<h2 id="section-3">类成员变量</h2>

<p>使用类的一个好处就是可以初始化一些变量，让这个类的所有方法共享，而又不会影响外层作用域。但是需要注意的是，javascript中对于数组和对象是引用传递，在coffeescript类中使用这两种类型作为成员变量时，就会产生一些不曾期待的后果。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="k">class</span> <span class="nx">Demo</span>
</span><span class="line">  <span class="nv">member: </span><span class="p">[]</span>
</span><span class="line">  <span class="nv">setMember: </span><span class="nf">(str) -&gt;</span>
</span><span class="line">    <span class="nx">@member</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nv">a = </span><span class="k">new</span> <span class="nx">Demo</span>
</span><span class="line"><span class="nx">a</span><span class="p">.</span><span class="nx">setMember</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">a</span><span class="p">.</span><span class="nx">member</span>  <span class="c1"># [&#39;a&#39;]</span>
</span><span class="line"><span class="nv">b = </span><span class="k">new</span> <span class="nx">Demo</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">b</span><span class="p">.</span><span class="nx">member</span>  <span class="c1"># [&#39;a&#39;]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当我们使用<code>new</code>关键词的时候，希望得到的是一个干干净净的对象，可是在初始化b的时候我们发现他的成员变量member已经变成了<code>['a']</code>，这是我们不希望看到的。究其原因就是member是一个数组。解决办法是将这些变量的初始化放在coffeescript的构造方法<code>constructor</code>中。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="k">class</span> <span class="nx">Demo</span>
</span><span class="line">  <span class="nv">constructor: </span><span class="o">-&gt;</span>
</span><span class="line">    <span class="vi">@member = </span><span class="p">[]</span>
</span><span class="line">  <span class="nv">setMember: </span><span class="nf">(str) -&gt;</span>
</span><span class="line">    <span class="nx">@member</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nv">a = </span><span class="k">new</span> <span class="nx">Demo</span>
</span><span class="line"><span class="nx">a</span><span class="p">.</span><span class="nx">setMember</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">a</span><span class="p">.</span><span class="nx">member</span>  <span class="c1"># [&#39;a&#39;]</span>
</span><span class="line"><span class="nv">b = </span><span class="k">new</span> <span class="nx">Demo</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">b</span><span class="p">.</span><span class="nx">member</span>  <span class="c1"># []</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>至于为什么这两种写法会产生不一样的效果，可以将coffeescript编译成js来分析。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line">    <span class="p">(</span><span class="nx">use</span> <span class="nx">constructor</span><span class="p">)</span>                                             <span class="o">|</span>    <span class="p">(</span><span class="nx">not</span> <span class="nx">use</span> <span class="nx">constructor</span><span class="p">)</span>
</span><span class="line">    <span class="mi">5</span>   <span class="nx">Demo</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>                                      <span class="o">|</span>    <span class="mi">5</span>   <span class="nx">Demo</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="mi">6</span>     <span class="kd">function</span> <span class="nx">Demo</span><span class="p">()</span> <span class="p">{</span>                                       <span class="o">|</span>    <span class="mi">6</span>     <span class="kd">function</span> <span class="nx">Demo</span><span class="p">()</span> <span class="p">{}</span>
</span><span class="line">    <span class="mi">7</span>       <span class="k">this</span><span class="p">.</span><span class="nx">member</span> <span class="o">=</span> <span class="p">[];</span>                                     <span class="o">|</span>    <span class="mi">7</span>
</span><span class="line">    <span class="mi">8</span>     <span class="p">}</span>                                                       <span class="o">|</span>    <span class="mi">8</span>     <span class="nx">Demo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">member</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class="line">    <span class="mi">9</span>                                                             <span class="o">|</span>    <span class="mi">9</span>
</span><span class="line">   <span class="mi">10</span>     <span class="nx">Demo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setMember</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>              <span class="o">|</span>   <span class="mi">10</span>     <span class="nx">Demo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setMember</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">   <span class="mi">11</span>       <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">member</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>                         <span class="o">|</span>   <span class="mi">11</span>       <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">member</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>
</span><span class="line">   <span class="mi">12</span>     <span class="p">};</span>                                                      <span class="o">|</span>   <span class="mi">12</span>     <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面是vimdiff对比出的两种不同写法，第一种是使用构造方法<code>constructor</code>的，可以看到member作为Demo方法的私有变量，在没有用<code>new</code>实例化的时候，这个<code>member</code>是不存在的，所以每一次实例化我们都能得到一个全新未开箱的<code>member</code>。但是第二种写法则不同，在没有实例化Demo类的时候，<code>member</code>对象就已经存在，所有无论你实例化Demo多少次，调用的都是同一个<code>member</code>，也就造成了在多个Demo实例中共用一个<code>member</code>的结果。</p>

<h1 id="section-4">后记</h1>

<p>假如让我在javascript和coffeescript两种语言之间选择，我仍然倾向于coffeescript，抛开上面的问题不说，它给人编码的时候带来的愉悦是无法衡量的。So just try it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql 中的 date datetime 和 timestamp]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2013/06/05/mysql-zhong-de-date-datetime-he-timestamp/"/>
    <updated>2013-06-05T11:02:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2013/06/05/mysql-zhong-de-date-datetime-he-timestamp</id>
    <content type="html"><![CDATA[<p>mysql中用于表示时间的三种类型date, datetime, timestamp (如果算上int的话，四种) 比较容易混淆，下面就比较一下这三种类型的异同</p>

<h1 id="section">相同点</h1>

<ul>
  <li>都可以用于表示时间</li>
  <li>都呈字符串显示</li>
</ul>

<h1 id="section-1">不同点</h1>

<ul>
  <li>顾名思义，date只表示’YYYY-MM-DD’形式的日期，datetime表示’YYYY-MM-DD HH:mm:ss’形式的日期加时间，timestamp与datetime显示形式一样。</li>
  <li>date和datetime可表示的时间范围为’1000-01-01’到’9999-12-31’，timestamp由于受32位int型的限制，能表示’1970-01-01 00:00:01’到’2038-01-19 03:14:07’的UTC时间。</li>
  <li>mysql在存储timestamp类型时会将时间转为UTC时间，然后读取的时候再恢复成当前时区。
假如你存储了一个timestamp类型的值之后，修改了mysql的时区，当你再读取这个值时就会得到一个错误的时间。而这种情况在date和datetime中不会发生。</li>
  <li>timestamp类型提供了自动更新的功能，你只需要将它的默认值设置为CURRENT_TIMESTAMP。</li>
  <li>除了date是保留到天，datetime和timestamp都保留到秒，而忽略毫秒。</li>
</ul>

<h1 id="section-2">时间格式</h1>

<p>mysql提供了一种比较宽松的时间字符串格式用于增删改查。参考<a href="http://wwp.greenwichmeantime.com/info/iso.htm">iso时间格式</a>，一般习惯于写成’2013-06-05 16:34:18’。但是你也可以简写成’13-6-5’，但是这样容易造成混淆，比如mysql也会把’13:6:5’也当做年月日处理，而当’13:16:5’这种形式，则被mysql认为是不正确的格式，会给出一个警告，然后存入数据库的值是’0000-00-00 00:00:00’。</p>

<p>手册中还特意提到了一种情况，就是当年的值是0~69时，mysql认为是2000~2069，而70~99时则认为是1970~1999。我感觉是一种画蛇添足了。</p>

<p>总之，以不变应万变，使用’YYYY-MM-DD HH:mm:ss’格式总是不会错的。</p>

<p>原文链接：<a href="http://dev.mysql.com/doc/refman/5.1/en/datetime.html">datetime</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascript 中使用 callback 控制流程]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2013/06/05/javascript-zhong-shi-yong-callback-kong-zhi-liu-cheng/"/>
    <updated>2013-06-05T10:49:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2013/06/05/javascript-zhong-shi-yong-callback-kong-zhi-liu-cheng</id>
    <content type="html"><![CDATA[<p>javascript中随处可见的callback对于流程控制来说是一场灾难，缺点显而易见：</p>

<ul>
  <li>没有显式的<code>return</code>，容易产生多余流程，以及由此引发的bug。</li>
  <li>造成代码无限嵌套，难以阅读。</li>
</ul>

<p>下面就来说说怎么<del>解决</del>避免上述的问题。</p>

<p>第一个问题是一个习惯问题，在使用callback的时候往往会让人忘了使用<code>return</code>，这种情况在使用coffee-script的时候尤甚（虽然它在编译成javascript时会自行收集最后的数据作为返回值，但是这个返回值并不一定代表你的初衷）。看看下面的例子。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="nv">a = </span><span class="nf">(err, callback)-&gt;</span>
</span><span class="line">  <span class="nx">callback</span><span class="p">()</span> <span class="k">if</span> <span class="nx">err</span><span class="o">?</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&#39;you will see me&#39;</span>
</span><span class="line">
</span><span class="line"><span class="nv">b = </span><span class="o">-&gt;</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&#39;I am a callback&#39;</span>
</span><span class="line">
</span><span class="line"><span class="nx">a</span><span class="p">(</span><span class="s">&#39;error&#39;</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在这种所谓”error first”的代码风格中，显然我们不希望出错时方法<code>a</code>中的后续代码仍然被执行，但是又不希望用<code>throw</code>来让整个进程挂掉（要死也得优雅的死嘛~），那么上面的代码就会产生bug。</p>

<p>一种解决方案就是老老实实的写<code>if...else...</code>，但是我更倾向于下面的做法：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="nv">a = </span><span class="nf">(err, callback)-&gt;</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">callback</span><span class="p">()</span> <span class="k">if</span> <span class="nx">err</span><span class="o">?</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&#39;you will not see me&#39;</span>
</span><span class="line">
</span><span class="line"><span class="nv">b = </span><span class="o">-&gt;</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&#39;I am a callback&#39;</span>
</span><span class="line">
</span><span class="line"><span class="nx">a</span><span class="p">(</span><span class="s">&#39;error&#39;</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>javascript异步方法中的返回值大多没什么用处，所以这里用<code>return</code>充当一个流程控制的角色，比<code>if...else...</code>更少的代码，但是更加清晰。</p>

<p>第二个问题是娘胎里带来的，很难根除。</p>

<p>一种不错的方法是使用一些流程控制模块来将代码显得更加有条理，比如<a href="https://github.com/caolan/async">async</a>就是一个不错的模块，提供了一系列的接口，包括迭代，循环，和一些条件语句，甚至还包含了一个队列系统。下面的例子可以表名两种写法的优劣</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="c1">#normal</span>
</span><span class="line">
</span><span class="line"><span class="nv">first = </span><span class="nf">(callback)-&gt;</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&#39;I am the first function&#39;</span>
</span><span class="line">  <span class="nx">callback</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="nv">second = </span><span class="nf">(callback)-&gt;</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&#39;I am the second function&#39;</span>
</span><span class="line">  <span class="nx">callback</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="nv">third = </span><span class="nf">()-&gt;</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&#39;I am the third function&#39;</span>
</span><span class="line">
</span><span class="line"><span class="nx">first</span> <span class="o">-&gt;</span>
</span><span class="line">  <span class="nx">second</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="nx">third</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c1"># use async</span>
</span><span class="line">
</span><span class="line"><span class="nv">async = </span><span class="nx">require</span><span class="p">(</span><span class="s">&#39;async&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nx">async</span><span class="p">.</span><span class="nx">waterfall</span> <span class="p">[</span>
</span><span class="line">  <span class="nx">first</span><span class="p">,</span>
</span><span class="line">  <span class="nx">second</span><span class="p">,</span>
</span><span class="line">  <span class="nx">third</span>
</span><span class="line"><span class="p">],</span> <span class="nf">(err)-&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>作为睿智的你，会选择哪一种呢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[nginx] if is evil]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2013/05/15/nginx-if-is-evil/"/>
    <updated>2013-05-15T17:36:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2013/05/15/nginx-if-is-evil</id>
    <content type="html"><![CDATA[<p>最近用nginx配置中使用if遇到一些问题，碰巧想起以前在wiki中看到的这个页面，虽然我的问题可能和wiki中提到的不同，但是if还是能避免就避免吧</p>

<p>下面的内容翻译自<a href="http://wiki.nginx.org/IfIsEvil">IfIsEvil</a></p>

<h1 id="ifisevil-">IfIsEvil (标题就不翻了，保持原汁原味的比较带感)</h1>

<h2 id="section">简介</h2>

<p><a href="http://wiki.nginx.org/NginxHttpRewriteModule#if"><code>if</code></a>指令在使用在<code>location</code>上下文中时有一些问题。有时候它不能如你所愿，而是做一些完全相反的事情。有时候甚至会引发分段错误。通常来说应该尽量避免使用<code>if</code>。</p>

<p>唯一100%可以安全的在<code>location</code>上下文中使用<code>if</code>的场景是：</p>

<ul>
  <li><a href="http://wiki.nginx.org/NginxHttpRewriteModule#return">return</a> …;</li>
  <li><a href="http://wiki.nginx.org/NginxHttpRewriteModule#rewrite">rewrite</a> … last;</li>
</ul>

<p>任何其他情况都可能引发不可预知的行为，包括潜在的分段错误。</p>

<p>需要注意的是<code>if</code>的行为并不是始终如一的。两个相同的请求不会在其中一个上失败而在另一个上成功，通过完善的测试并且对<code>if</code>有深刻理解的话，它可以使用。但是仍然强烈建议使用其他指令来代替。</p>

<p>这些情况下可能你不能轻易的避免使用<code>if</code>，比如说你想测试一个变量，就没有类似的指令可以替代。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="nginx"><span class="line"><span class="k">if</span> <span class="s">(</span><span class="nv">$request_method</span> <span class="p">=</span> <span class="s">POST</span> <span class="s">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kn">return</span> <span class="mi">405</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">if</span> <span class="s">(</span><span class="nv">$args</span> <span class="p">~</span> <span class="sr">post=140)</span><span class="p">{</span>
</span><span class="line">  <span class="kn">rewrite</span> <span class="s">^</span> <span class="s">http://example.com/</span> <span class="s">permanent</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-1">用什么替代</h2>

<p>在符合你的需求前提下，可以用<a href="http://wiki.nginx.org/NginxHttpCoreModule#try_files"><code>try_files</code></a>代替。在其他情况下用”return …“或”rewrite … last”。在有些情况下可以将<code>if</code>移动到server级别（在这里它是安全的，只有其他重写模块指令允许写在它里面）。</p>

<p>例如，下面的的用法在处理请求时可以安全的修改<code>location</code>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="nginx"><span class="line"><span class="k">location</span> <span class="s">/</span> <span class="p">{</span>
</span><span class="line">    <span class="kn">error_page</span> <span class="mi">418</span> <span class="p">=</span> <span class="s">@other</span><span class="p">;</span>
</span><span class="line">    <span class="kn">recursive_error_pages</span> <span class="no">on</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kn">if</span> <span class="s">(</span><span class="nv">$something</span><span class="s">)</span> <span class="p">{</span>
</span><span class="line">        <span class="kn">return</span> <span class="mi">418</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># 一些配置</span>
</span><span class="line">    <span class="kn">...</span>
</span><span class="line"><span class="err">}</span>
</span><span class="line">
</span><span class="line"><span class="s">location</span> <span class="s">@other</span> <span class="p">{</span>
</span><span class="line">    <span class="c1"># 其他配置</span>
</span><span class="line">    <span class="kn">...</span>
</span><span class="line"><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>有些情况下，使用嵌入式脚本模块（<a href="http://wiki.nginx.org/EmbeddedPerlModule">嵌入式perl</a>，或其他<a href="http://wiki.nginx.org/3rdPartyModules">第三方模块</a>）来写这些脚本。</p>

<h2 id="section-2">例子</h2>

<p>下面是一些例子用来解释为什么”if is evil”。不要在家里尝试这些，你被警告过了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
</pre></td><td class="code"><pre><code class="nginx"><span class="line"><span class="c1"># 下面用一些意想不到的bug来说明在location块中if is evil</span>
</span><span class="line"><span class="c1"># 只有第二个header会被输出到响应，这事实上不是bug，它就是这样工作的。</span>
</span><span class="line">
</span><span class="line"><span class="k">location</span> <span class="s">/only-one-if</span> <span class="p">{</span>
</span><span class="line">    <span class="kn">set</span> <span class="nv">$true</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class="line">        <span class="kn">add_header</span> <span class="s">X-First</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class="line">        <span class="kn">add_header</span> <span class="s">X-Second</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kn">return</span> <span class="mi">204</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 请求会被发送到后端但是uri不会改变为&#39;/&#39;，这是if造成的</span>
</span><span class="line">
</span><span class="line"><span class="k">location</span> <span class="s">/proxy-pass-uri</span> <span class="p">{</span>
</span><span class="line">    <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:8080/</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kn">set</span> <span class="nv">$true</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class="line">        <span class="c1"># nothing</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 因为if的问题，try_files不会起作用</span>
</span><span class="line">
</span><span class="line"><span class="k">location</span> <span class="s">/if-try-files</span> <span class="p">{</span>
</span><span class="line">     <span class="kn">try_files</span>  <span class="s">/file</span>  <span class="s">@fallback</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">     <span class="kn">set</span> <span class="nv">$true</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">     <span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class="line">         <span class="c1"># nothing</span>
</span><span class="line">     <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1"># nginx会引发段冲突</span>
</span><span class="line">
</span><span class="line"><span class="k">location</span> <span class="s">/crash</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="kn">set</span> <span class="nv">$true</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class="line">        <span class="c1"># fastcgi_pass here</span>
</span><span class="line">        <span class="kn">fastcgi_pass</span>  <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">9000</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class="line">        <span class="c1"># no handler here</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 捕获的别名在if创造的嵌套location中不会被正确的继承</span>
</span><span class="line">
</span><span class="line"><span class="k">location</span> <span class="p">~</span><span class="sr">*</span> <span class="s">^/if-and-alias/(?&lt;file&gt;.*)</span> <span class="p">{</span>
</span><span class="line">    <span class="kn">alias</span> <span class="s">/tmp/</span><span class="nv">$file</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kn">set</span> <span class="nv">$true</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class="line">        <span class="c1"># nothing</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>假如你发现了一个没有在上面列出来的例子 - 请将它报告给<a href="http://wiki.nginx.org/User:MaximDounin">MaximDounin</a>。</p>

<h2 id="section-3">为什么这些问题存在但没有被修复</h2>

<p><code>if</code>指令是重写模块的一部分而且是必须的。从另一方面说，nginx的配置通常来说是说明式的。有些用户希望尝试在<code>if</code>指令中使用非重写的指令，这造成了这种处境。它大部分时间是有效的，但是。。。瞧上面。</p>

<p>看起来唯一正确的方式就是完全避免在<code>if</code>中使用非重写指令。这会破坏很多已存在的配置，所以这没有被实施。</p>

<h2 id="if">假如你还是想用<code>if</code></h2>

<p>假如你读了上面的内容仍然想用<code>if</code>：</p>

<ul>
  <li>请确保你知道它是怎么工作的。一些基础知识可以<a href="http://agentzh.blogspot.com/2011/03/how-nginx-location-if-works.html">看这里</a></li>
  <li>做完整的测试</li>
</ul>

<p>你被警告过了。</p>

<p><a href="http://wiki.nginx.org/IfIsEvil">原文链接</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[细数 php 中的那些坑]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2013/05/10/xi-shu-php-zhong-de-na-xie-keng/"/>
    <updated>2013-05-10T15:59:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2013/05/10/xi-shu-php-zhong-de-na-xie-keng</id>
    <content type="html"><![CDATA[<p>Wow，有逮到一个黑PHP的，作为“宇宙中最好的编程语言”，被黑只会加速它的改进，所以偶尔黑一下也无妨嘛~正所谓世界上只有两种语言，一种是被人黑的，另一种是没人用的。</p>

<p>进入正题，下面开始罗列一些PHP需要防备的坑，以免一不小心掉了进去。(只包含在5.3中仍然存在的，5.4中已修复的会做一下说明)。</p>

<h2 id="section">变量类型</h2>
<p>说PHP入门门槛低，其中一个原因是我们不需要关心变量的类型，PHP为我们做了自动的转化。但事实上是这样吗？下面就是一个隐蔽的bug。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="cp">&lt;?php</span>
</span><span class="line"><span class="nb">var_dump</span><span class="p">(</span><span class="s1">&#39;string&#39;</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span><span class="line"><span class="x">==&gt; true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>很神奇吧，php在这里自动将字符串作为整数0来比较了。由此引发了一系列问题：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="cp">&lt;?php</span>
</span><span class="line"><span class="nv">$a</span> <span class="o">=</span> <span class="s2">&quot;1234567&quot;</span><span class="p">;</span>
</span><span class="line"><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$a</span><span class="p">[</span><span class="s1">&#39;test&#39;</span><span class="p">]);</span>
</span><span class="line"><span class="o">==&gt;</span> <span class="mi">1</span>  <span class="c1">//坑爹的等同于$a[0], php5.4会给出一个非法索引warning，但是仍然返回1，php5.3则连warning都没有。</span>
</span><span class="line"><span class="nb">var_dump</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$a</span><span class="p">[</span><span class="s1">&#39;test&#39;</span><span class="p">]));</span>
</span><span class="line"><span class="o">==&gt;</span> <span class="k">true</span>  <span class="c1">//这是一个完全错误的结果，在php5.4中得到修复</span>
</span><span class="line"><span class="nb">var_dump</span><span class="p">(</span><span class="nb">in_array</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;xxx&#39;</span><span class="p">)));</span>
</span><span class="line"><span class="o">==&gt;</span> <span class="k">true</span>  <span class="c1">//这也是一个令人费解的bug，暂且还是理解为php将&#39;xxx&#39;转化成0了吧</span>
</span><span class="line"><span class="nb">var_dump</span><span class="p">(</span><span class="nb">in_array</span><span class="p">(</span><span class="k">false</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;xxx&#39;</span><span class="p">)));</span>
</span><span class="line"><span class="o">==&gt;</span> <span class="k">false</span>  <span class="c1">//与之相对的，这个结果确是符合预料的。问题是，在php中0==false呀。</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>所以当一个表达式中同时包含0和字符串的时候就要特别留意了，以免被奇葩的bug坑了。</p>

<h2 id="section-1">比较符号</h2>

<h3 id="section-2">等号<code>==</code>与不等<code>!=</code></h3>

<p>严格的来说，PHP中的<code>==</code>符号完全没有作用，因为<code>'string' == true</code>，而且<code>'string' == 0</code>，<strong>但是</strong>，<code>true != 0</code>。</p>

<p>然后是<code>123 == "123foo"</code>，但是当你用引号将123包起来以明确说明这是一个字符串时，<code>'123' != "123foo"</code>，但是在现实中，谁会用常量比较呢，这个123换成了一个变量，而根据php的哲学，谁会在意这个变量是什么类型。</p>

<p>在使用其他进制的时候这种混淆尤其明显，像下面的例子:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="cp">&lt;?php</span>
</span><span class="line"><span class="s2">&quot;133&quot;</span> <span class="o">==</span> <span class="s2">&quot;0133&quot;</span><span class="p">;</span>
</span><span class="line"><span class="mi">133</span> <span class="o">==</span> <span class="s2">&quot;0133&quot;</span><span class="p">;</span>
</span><span class="line"><span class="mi">133</span> <span class="o">==</span> <span class="mo">0133</span><span class="p">;</span>    <span class="c1">//因为0133是一个八进制数，转成十进制是91</span>
</span><span class="line"><span class="s2">&quot;0133&quot;</span> <span class="o">!=</span> <span class="mi">91</span><span class="p">;</span>   <span class="c1">//字符串中的数字始终是十进制的，这个也可以理解</span>
</span><span class="line"><span class="s2">&quot;0x10&quot;</span> <span class="o">==</span> <span class="mi">16</span><span class="p">;</span>   <span class="c1">//但是!，在十六进制中上面的说法又不成立了</span>
</span><span class="line"><span class="s2">&quot;1e3&quot;</span> <span class="o">==</span> <span class="mi">1000</span><span class="p">;</span>  <span class="c1">//科学计数表示也一样</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-3">大于<code>&gt;</code>小于<code>&lt;</code></h3>

<p>被搞糊涂的话，下面还有：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="cp">&lt;?php</span>
</span><span class="line"><span class="k">null</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>  <span class="c1">//这个可以理解</span>
</span><span class="line"><span class="k">null</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>  <span class="c1">//但是你会想到这个吗？难道zend认为0&lt;-1？</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>使用<code>==</code>时，参照javascript中的做法，我们可以使用<code>===</code>让比较更规范一些，但是<code>&gt;</code>,<code>&lt;</code>这些怎么办？只能尽量避免。</p>

<h2 id="section-4">三元运算符</h2>

<p>很多语言都提供了三元运算符<code>?:</code>，因为它足够简洁，也够geek。但是php中的表现与其他语言中又不同：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="cp">&lt;?php</span>
</span><span class="line"><span class="nv">$arg</span> <span class="o">=</span> <span class="s1">&#39;T&#39;</span><span class="p">;</span>
</span><span class="line"><span class="nv">$vehicle</span> <span class="o">=</span> <span class="p">(</span> <span class="p">(</span> <span class="nv">$arg</span> <span class="o">==</span> <span class="s1">&#39;B&#39;</span> <span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;bus&#39;</span> <span class="o">:</span>
</span><span class="line">             <span class="p">(</span> <span class="nv">$arg</span> <span class="o">==</span> <span class="s1">&#39;A&#39;</span> <span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;airplane&#39;</span> <span class="o">:</span>
</span><span class="line">             <span class="p">(</span> <span class="nv">$arg</span> <span class="o">==</span> <span class="s1">&#39;T&#39;</span> <span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;train&#39;</span> <span class="o">:</span>
</span><span class="line">             <span class="p">(</span> <span class="nv">$arg</span> <span class="o">==</span> <span class="s1">&#39;C&#39;</span> <span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;car&#39;</span> <span class="o">:</span>
</span><span class="line">             <span class="p">(</span> <span class="nv">$arg</span> <span class="o">==</span> <span class="s1">&#39;H&#39;</span> <span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;horse&#39;</span> <span class="o">:</span>
</span><span class="line">             <span class="s1">&#39;feet&#39;</span> <span class="p">);</span>
</span><span class="line"><span class="k">echo</span> <span class="nv">$vehicle</span><span class="p">;</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>猜猜结果是什么？’horse’，而我们预料中的（在其他语言中）应该是’train’。这种做法被称为”left associative”(左结合)，也即上面的表达式在php看来等同于<code>$vehicle = (condition) ? 'horse' : 'feet'</code>，所以你永远不可能得到中间的结果，这有违人的第一感觉，也与其他语言正好相反。</p>

<h2 id="empty">empty</h2>

<p>empty是我在php中非常喜欢的一个方法，这里我说错了，其实它是一个语言结构，而不是一个方法，但是它的使用方式又像一个方法。于是，empty()中包含运算式的话是会报错的，这也造成了它的局限性。</p>

<h2 id="section-5">数组</h2>

<p>php中的数组应该是一个’数组’,’hash表’,’集合’的结合体，这在使用上有它的方便之处，但是也造成了一些不易理解的地方，尤其体现在一些array相关的方法上。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="cp">&lt;?php</span>
</span><span class="line"><span class="k">array</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;bar&quot;</span><span class="p">,</span> <span class="s2">&quot;foo&quot;</span><span class="p">);</span>  <span class="c1">//这个时候，array就是数组</span>
</span><span class="line"><span class="k">array</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;bar&quot;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;foo&quot;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>  <span class="c1">//这个时候，array又变成了无序hash表</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>好吧，其实php中的array就是一个hash表，无论什么情况下。<code>array('bar', 'foo')</code>就是<code>array('0'=&gt;'bar', '1'=&gt;'foo')</code>，这样对理解array的一些奇怪表现应该会有帮助，但是下面的方法，有推翻了上面的论述，我将它算做一个bug：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="cp">&lt;?php</span>
</span><span class="line"><span class="nv">$first</span>  <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span> <span class="o">=&gt;</span> <span class="mi">123</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span> <span class="o">=&gt;</span> <span class="mi">456</span><span class="p">);</span>
</span><span class="line"><span class="nv">$second</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span> <span class="o">=&gt;</span> <span class="mi">456</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span> <span class="o">=&gt;</span> <span class="mi">123</span><span class="p">);</span>
</span><span class="line"><span class="nb">var_dump</span><span class="p">(</span><span class="nb">array_diff</span><span class="p">(</span><span class="nv">$first</span><span class="p">,</span> <span class="nv">$second</span><span class="p">));</span>
</span><span class="line"><span class="o">==&gt;</span> <span class="k">array</span><span class="p">()</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看到了吧，如果array是个hash表的话，$first和$second显然是不一样的。但是diff的结果却认为这是两个一样的数组。所以在愉快的使用array时，别忘了停下来，测试一下这些隐含的bug。</p>

<h2 id="section-6"><code>++</code>与<code>--</code></h2>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="cp">&lt;?php</span>
</span><span class="line"><span class="nv">$a</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class="line"><span class="nv">$a</span> <span class="o">++</span><span class="p">;</span>  <span class="c1">// $a == 1, 可以理解</span>
</span><span class="line"><span class="nv">$a</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class="line"><span class="nv">$a</span> <span class="o">--</span><span class="p">;</span>  <span class="c1">// $a == null, 凌乱了</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>解决这种<code>++</code>和<code>--</code>中的不一致的办法就是根本不用它们，用<code>+=</code>和<code>-=</code>代替。</p>

<h2 id="section-7">命名习惯</h2>

<p>下面这些就与bug无关了，而是php中过于随意的命名规则和变量顺序，像<code>htmlentities</code>和<code>html_entity_decode</code>，你能想象这两个方法是一张纸的两面吗？</p>

<p>其实方法的命名不规范问题也不大，但是变量顺序混乱就要人命了，比如array中的一大堆方法，看起来都以array打头，相当清晰。但是你能料到<code>array_filter($input, $callback)</code>和<code>array_map($callback, $input)</code>两个方法的回调方法位置正好相反吗？我就经常记错<code>strpos</code>中哪个参数才是该被搜索的字符串。</p>

<p>还有一个要命的地方就是很多参数的引用传递不明，比如上面的<code>array_filter</code>是对源对象的一个拷贝，但是<code>array_walk</code>却是一个引用。这些在<a href="http://www.php.net/">php.net</a>上有“粗略”的说明，我想谁也不希望一边翻文档一边写代码吧。</p>

<h2 id="section-8">错误控制</h2>

<p>关于php的错误控制其实是一个关于“配置优于约定”还是“约定优于配置”的讨论，而显然php选择了前者。在php中，有一个全局的配置文件“php.ini”，里面关于错误控制的两个选项<code>error_reporting</code>和<code>display_errors</code>分别代表错误等级和是否显示错误。</p>

<p>这没有问题，问题是这些配置在运行时是可以修改的。有些框架或有些人为了掩盖无处不在的<code>notice</code>，将<code>error_reporting</code>等级调高，或者索性将<code>display_errors</code>设置为<code>off</code>，这会让其他开发者困惑，让错误无迹可寻。</p>

<p>这也不是什么问题，最大的问题是php中还有<code>set_error_handler</code>和<code>set_exception_handler</code>，看字面意思，这两个都是用来控制错误的。但是在php中，<code>error</code>和<code>exception</code>却是不一样的。于是你要么在框架里写上两套一样的<code>handler</code>方法，要么就索性都不写，由php去决定这些错误该以什么形式表现。最糟糕的是只写一个或者写两套不一样的<code>handler</code>，这回让人困惑为什么有些错误以一种形式表现，而一些错误又以别的方式出现，而且要找到这些<code>handler</code>也不是一件容易的事，他们可能出现在任何一个文件的任何一个角落，除非你用<code>debug_backtrace</code>将堆栈信息都打印出来。</p>

<h2 id="section-9">后记</h2>

<p>以上大部分内容和例子来自<a href="http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/">PHP: a fractal of bad design</a>，一个狂热的python教徒。我不是python教徒，甚至连爱好者都说不上，所以写这篇文章只是为了记录php中存在的bug，以防一不小心被坑了。只有有了这些意识，才能在这门语言中更好的发挥，物尽其用。</p>

<h1 id="section-10">相关链接</h1>
<p><a href="http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/">PHP: a fractal of bad design</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql btree 与 hash 索引比较]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2013/05/07/mysql-btree-yu-hash-suo-yin-bi-jiao/"/>
    <updated>2013-05-07T11:45:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2013/05/07/mysql-btree-yu-hash-suo-yin-bi-jiao</id>
    <content type="html"><![CDATA[<p>mysql最常用的索引结构是btree(<code>O(log(n))</code>)，但是总有一些情况下我们为了更好的性能希望能使用别的类型的索引。hash就是其中一种选择，例如我们在通过用户名检索用户id的时候，他们总是一对一的关系，用到的操作符只是<code>=</code>而已，假如使用hash作为索引数据结构的话，时间复杂度可以降到<code>O(1)</code>。不幸的是，目前的mysql版本(5.6)中，hash只支持MEMORY和NDB两种引擎，而我们最常用的INNODB和MYISAM都不支持hash类型的索引。</p>

<p>不管怎样，还是要了解一下这两种索引的区别，下面翻译自<a href="http://dev.mysql.com/doc/refman/5.6/en/index-btree-hash.html">mysql官网文档</a>中对这两者的解释。</p>

<h2 id="b-tree-">B-Tree 索引特征</h2>
<p>B-Tree索引可以被用在像<code>=</code>,<code>&gt;</code>,<code>&gt;=</code>,<code>&lt;</code>,<code>&lt;=</code>和<code>BETWEEN</code>这些比较操作符上。而且还可以用于<code>LIKE</code>操作符，只要它的查询条件是一个不以通配符开头的常量。像下面的语句就可以使用索引：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">tbl_name</span> <span class="k">WHERE</span> <span class="n">key_col</span> <span class="k">LIKE</span> <span class="s1">&#39;Patrick%&#39;</span><span class="p">;</span>
</span><span class="line"><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">tbl_name</span> <span class="k">WHERE</span> <span class="n">key_col</span> <span class="k">LIKE</span> <span class="s1">&#39;Pat%_ck%&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面这两种情况不会使用索引：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">tbl_name</span> <span class="k">WHERE</span> <span class="n">key_col</span> <span class="k">LIKE</span> <span class="s1">&#39;%Patrick%&#39;</span><span class="p">;</span>
</span><span class="line"><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">tbl_name</span> <span class="k">WHERE</span> <span class="n">key_col</span> <span class="k">LIKE</span> <span class="n">other_col</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>第一条是因为它以通配符开头，第二条是因为没有使用常量。</p>

<p>假如你使用<code>... LIKE '%string%'</code>而且<code>string</code>超过三个字符，MYSQL使用<code>Turbo Boyer-Moore algorithm</code>算法来初始化查询表达式，然后用这个表达式来让查询更迅速。</p>

<p>一个这样的查询<code>col_name IS NULL</code>是可以使用<code>col_name</code>的索引的。</p>

<p>任何一个没有覆盖所有<code>WHERE</code>中<code>AND</code>级别条件的索引是不会被使用的。也就是说，要使用一个索引，这个索引中的第一列需要在每个<code>AND</code>组中出现。</p>

<p>下面的<code>WHERE</code>条件会使用索引：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="p">...</span> <span class="k">WHERE</span> <span class="n">index_part1</span><span class="o">=</span><span class="mi">1</span> <span class="k">AND</span> <span class="n">index_part2</span><span class="o">=</span><span class="mi">2</span> <span class="k">AND</span> <span class="n">other_column</span><span class="o">=</span><span class="mi">3</span>
</span><span class="line">    <span class="cm">/* index = 1 OR index = 2 */</span>
</span><span class="line"><span class="p">...</span> <span class="k">WHERE</span> <span class="k">index</span><span class="o">=</span><span class="mi">1</span> <span class="k">OR</span> <span class="n">A</span><span class="o">=</span><span class="mi">10</span> <span class="k">AND</span> <span class="k">index</span><span class="o">=</span><span class="mi">2</span>
</span><span class="line">    <span class="cm">/* 优化成 &quot;index_part1=&#39;hello&#39;&quot; */</span>
</span><span class="line"><span class="p">...</span> <span class="k">WHERE</span> <span class="n">index_part1</span><span class="o">=</span><span class="s1">&#39;hello&#39;</span> <span class="k">AND</span> <span class="n">index_part3</span><span class="o">=</span><span class="mi">5</span>
</span><span class="line">    <span class="cm">/* 可以使用 index1 的索引但是不会使用 index2 和 index3 */</span>
</span><span class="line"><span class="p">...</span> <span class="k">WHERE</span> <span class="n">index1</span><span class="o">=</span><span class="mi">1</span> <span class="k">AND</span> <span class="n">index2</span><span class="o">=</span><span class="mi">2</span> <span class="k">OR</span> <span class="n">index1</span><span class="o">=</span><span class="mi">3</span> <span class="k">AND</span> <span class="n">index3</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面的<code>WHERE</code>条件不会使用索引：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line">    <span class="cm">/* index_part1 没有被使用到 */</span>
</span><span class="line"><span class="p">...</span> <span class="k">WHERE</span> <span class="n">index_part2</span><span class="o">=</span><span class="mi">1</span> <span class="k">AND</span> <span class="n">index_part3</span><span class="o">=</span><span class="mi">2</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/* 索引 index 没有出现在每个 where 子句中 */</span>
</span><span class="line"><span class="p">...</span> <span class="k">WHERE</span> <span class="k">index</span><span class="o">=</span><span class="mi">1</span> <span class="k">OR</span> <span class="n">A</span><span class="o">=</span><span class="mi">10</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/* 没有索引覆盖所有列 */</span>
</span><span class="line"><span class="p">...</span> <span class="k">WHERE</span> <span class="n">index_part1</span><span class="o">=</span><span class="mi">1</span> <span class="k">OR</span> <span class="n">index_part2</span><span class="o">=</span><span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>有时候mysql不会使用索引，即使这个在可用的情况下。例如当mysql预估使用索引会读取大部分的行数据时。（在这种情况下，一次全表扫描可能比使用索引更快，因为它需要更少的检索）。然而，假如语句中使用<code>LIMIT</code>来限定返回的行数，mysql则会使用索引。因为当结果行数较少的情况下使用索引的效率会更高。</p>

<h2 id="hash-">Hash 索引特征</h2>

<p>Hash类型的索引有一些区别于以上所述的特征：</p>

<ul>
  <li>
    <p>它们只能用于对等比较，例如<code>=</code>和<code>&lt;=&gt;</code>操作符（但是快很多）。它们不能被用于像<code>&lt;</code>这样的范围查询条件。假如系统只需要使用像“键值对”的这样的存储结构，尽量使用hash类型索引。</p>
  </li>
  <li>
    <p>优化器不能用hash索引来为<code>ORDER BY</code>操作符加速。（这类索引不能被用于搜索下一个次序的值）</p>
  </li>
  <li>
    <p>mysql不能判断出两个值之间有多少条数据（这需要使用范围查询操作符来决定使用哪个索引）。假如你将一个<code>MyISAM</code>表转为一个依靠hash索引的<code>MEMORY</code>表，可能会影响一些语句（的性能）。</p>
  </li>
  <li>
    <p>只有完整的键才能被用于搜索一行数据。（假如用B-tree索引，任何一个键的片段都可以用于查找。我觉得可能意味着带通配符<code>LIKE</code>操作符会不起作用）。</p>
  </li>
</ul>

<h1 id="section">后记</h1>

<p>顺便记录一下在使用mysql过程中碰到的一些问题：</p>

<ul>
  <li>有时候使用脚本迁移数据时会碰到乱码的问题，即使将表字符集设置成<code>utf8</code>也无济于事，这个时候在执行sql之前加一句<code>set names utf8</code>即可。</li>
</ul>

<h1 id="section-1">参考文档</h1>

<ul>
  <li><a href="http://dev.mysql.com/doc/refman/5.6/en/index-btree-hash.html">index-btree-hash</a></li>
  <li><a href="http://dba.stackexchange.com/questions/2817/why-does-mysql-not-have-hash-indices-on-myisam-or-innodb">why-does-mysql-not-have-hash-indices-on-myisam-or-innodb</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[追求更快: jQuery.ready 如何实现]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2013/05/03/zhui-qiu-geng-kuai-jquery-dot-ready-ru-he-shi-xian/"/>
    <updated>2013-05-03T13:30:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2013/05/03/zhui-qiu-geng-kuai-jquery-dot-ready-ru-he-shi-xian</id>
    <content type="html"><![CDATA[<p>jQuery从1.0版本就提供了一个叫做<code>ready</code>的方法，最常见的调用场景是<code>$(document).ready(handler)</code>，表示当dom树下载完成后触发事件，也可以简写成<code>$(handler)</code>。</p>

<p>以前一直以为这个方法和javascript自己提供的<code>window.onload</code>事件是一回事，直到最近在做一个chrome小插件时搜索了一下，才发现这俩区别还是挺大的。</p>

<h2 id="windowonload">window.onload</h2>

<p><code>window.onload</code>是javascript自身提供的一个方法，表示当dom树中所有元素，包括img，js，css等等资源文件都加载完毕时触发的事件。最直观的就是在浏览器加载过程中标签栏上会有一个转动的loading图标，当这个图标消失或停止转动，就是onload时间触发的时候。这个方法还有另一种绑定的方式<code>window.addEventListener('load', handler)</code>。</p>

<p>这样就可以理解，假如页面中某个图片的加载时间特别长，那么<code>window.onload</code>是不可能触发的，但是大多数时候，我们想要的只是等dom结构完整加载之后，就可以绑定一些js事件了，假如我们把js代码都写在<code>window.onload</code>中，显然会有很长一段时间用户的操作得不到响应。</p>

<p>所以<code>jquery</code>提供了<code>ready</code>方法。</p>

<h2 id="documentreadyhandler">$(document).ready(handler)</h2>

<p>根据<a href="http://api.jquery.com/ready/">官方文档</a>，<code>ready</code>方法与<code>&lt;body onload=""&gt;</code>属性不兼容，不过后者现在也不是很常见了。下面一段代码放到浏览器中跑一下可以实验<code>ready</code>与<code>window.onload</code>谁先触发。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class="line"><span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class="line">    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;window onload&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class="line">    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;document ready&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line"><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个方法又是如何实现的呢？其实是利用了javascript中的<code>DOMContentLoaded</code>事件，至于这个事件为什么没有得到广泛的利用，可能是出于兼容性的考虑，至少在IE9以下，这个事件没有得到支持，所以jquery中使用了IE事件模型中的<code>onreadystatechange</code>来取代此方法。通过查找jquery源代码可以看到下面几行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>jquery-1.9.1.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// Catch cases where $(document).ready() is called after the browser event has already occurred.</span>
</span><span class="line"><span class="c1">// we once tried to use readyState &quot;interactive&quot; here, but it caused issues like the one</span>
</span><span class="line"><span class="c1">// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15</span>
</span><span class="line"><span class="k">if</span> <span class="p">(</span> <span class="nb">document</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">===</span> <span class="s2">&quot;complete&quot;</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// Handle it asynchronously to allow scripts the opportunity to delay ready</span>
</span><span class="line">    <span class="nx">setTimeout</span><span class="p">(</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">ready</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Standards-based browsers support DOMContentLoaded</span>
</span><span class="line"><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// Use the handy event callback</span>
</span><span class="line">    <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span> <span class="s2">&quot;DOMContentLoaded&quot;</span><span class="p">,</span> <span class="nx">completed</span><span class="p">,</span> <span class="kc">false</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// A fallback to window.onload, that will always work</span>
</span><span class="line">    <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span> <span class="s2">&quot;load&quot;</span><span class="p">,</span> <span class="nx">completed</span><span class="p">,</span> <span class="kc">false</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// If IE event model is used</span>
</span><span class="line"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// Ensure firing before onload, maybe late but safe also for iframes</span>
</span><span class="line">    <span class="nb">document</span><span class="p">.</span><span class="nx">attachEvent</span><span class="p">(</span> <span class="s2">&quot;onreadystatechange&quot;</span><span class="p">,</span> <span class="nx">completed</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// A fallback to window.onload, that will always work</span>
</span><span class="line">    <span class="nb">window</span><span class="p">.</span><span class="nx">attachEvent</span><span class="p">(</span> <span class="s2">&quot;onload&quot;</span><span class="p">,</span> <span class="nx">completed</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// If IE and not a frame</span>
</span><span class="line">    <span class="c1">// continually check to see if the document is ready</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">top</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class="line"><span class="p">......</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这是jquery中<code>ready</code>方法实现的一个片段，可以通过检测<code>document.readyState == "complete"</code>来判断<code>DOMContentLoaded</code>事件是否触发。</p>

<h2 id="chrome">在chrome扩展中</h2>

<p>在chrome扩展的content_scripts中，使用<code>DOMContentLoaded</code>有时候并不能得到想要的结果，这是content_scripts往往在页面加载后再插入页面，就不能响应这个事件了。解决办法是在manifest.json中加入<code>"run_at":"document_start"</code>一行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="json"><span class="line">  <span class="s2">&quot;content_scripts&quot;</span><span class="err">:</span> <span class="p">[</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">      <span class="nt">&quot;matches&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;http://*/*&quot;</span><span class="p">],</span>
</span><span class="line">      <span class="nt">&quot;js&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;ghost.js&quot;</span><span class="p">],</span>
</span><span class="line">      <span class="nt">&quot;run_at&quot;</span><span class="p">:</span> <span class="s2">&quot;document_start&quot;</span>  <span class="err">//</span> <span class="err">add</span> <span class="err">run_at</span> <span class="err">document_start</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">]</span><span class="err">,</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section">参考资料</h1>
<ul>
  <li><a href="http://api.jquery.com/ready/">api.jquery.ready</a></li>
  <li><a href="http://stackoverflow.com/questions/5959194/how-does-jquerys-document-ready-function-work">how-does-jquerys-document-ready-function-work</a></li>
  <li><a href="http://stackoverflow.com/questions/5082094/register-domcontentloaded-in-google-chrome">register-domcontentloaded-in-google-chrome</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/DOM/Mozilla_event_reference/DOMContentLoaded">DOMContentLoaded</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[执行 javascript 方法的几种方式]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2013/05/02/zhi-xing-javascript-fang-fa-de-ji-chong-fang-shi/"/>
    <updated>2013-05-02T12:41:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2013/05/02/zhi-xing-javascript-fang-fa-de-ji-chong-fang-shi</id>
    <content type="html"><![CDATA[<p>javascript语法灵活，同一个功能有五六种实现方式并不罕见，然后再加上有些反人类的原型继承和异步特性，就更让人一头雾水了。我经常搞不清楚<code>call</code>,<code>apply</code>之间的区别，今天就记录一下，以免再忘了。</p>

<p>在javascript中，方法可以通过以下几种方式执行：</p>

<ul>
  <li>func()，这是最直接最常见的调用方式，也符合一般人的思维逻辑，但是在某些情况下有一些不足，下面会解释。</li>
  <li>(function(arg){})(window)，匿名方法调用，在构造命名空间时比较有用，后面的括号中的参数与匿名方法中的入参一一对应。</li>
  <li>func.bind(sth)()，<a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind">mozilla手册</a>中提到<code>bind</code>是在<a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262 5th Edition</a>中新增的一个特性，这里单独列出来作为一种调用方式是因为它弥补了直接调用中不能绑定作用域的缺陷。</li>
  <li>func.call()，这是第二种调用方式，每个方法的原型中都定义了call方法，用来执行当前方法。</li>
  <li>func.apply()，call的双胞胎兄弟。</li>
</ul>

<h2 id="func">func()</h2>
<p>这是最常见的调用方式，在任何语言中随处可见。func(x, y)可以传入不同的参数。在某些语言，例如php，java中，这种调用足以解决一切问题。但是javascript是一门函数式语言，闭包的概念和一个奇怪的关键词<code>this</code>决定了这种调用方式的不足。<code>this</code>应该可以解释为当前代码段的作用域，会随着代码执行到不同的片段而改变，但是某些情况下我们不希望这个<code>this</code>被改变，例如绑定在某些dom上的事件，我们肯定不希望他们被调用的时候<code>this</code>被转移到了<code>window</code>对象上，但有时候确实如此，再比如下面的代码。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span><span class="p">{};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">func</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="nx">a</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class="line">    <span class="nx">func</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="nx">a</span><span class="p">.</span><span class="nx">onclick</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以把a想象成页面中的一个链接，由于我们只是想将定义好的方法绑定到onclick事件上，而不是立刻调用它，而且这个方法拥有一个参数，所以我们需要用一个匿名方法将他包起来传递给a的onclick事件。这样就有了一个问题，func中的this变成了全局对象window，显然我们并不希望如此。这个时候，使用func()这种直接调用的方式就不行了，于是我们需要将func外的this绑定到func方法上。于是就有了<code>bind</code>,<code>call</code>,<code>apply</code>方法。</p>

<h2 id="bind">bind</h2>

<p><code>bind</code>的目的非常简单，返回一个绑定了this对象的相同方法。上面的代码修改一行就可以实现绑定this在a对象上目的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span><span class="p">{};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">func</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="nx">a</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class="line">    <span class="nx">func</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)(</span><span class="nx">x</span><span class="p">);</span>  <span class="c1">// bind here</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="nx">a</span><span class="p">.</span><span class="nx">onclick</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样，onclick事件的this就不会像无头苍蝇一样到处乱跑啦。</p>

<h2 id="call--apply">call &amp; apply</h2>

<p><code>call</code>和<code>apply</code>要放在一起讲，因为他们实在太像了。他们都支持多参数，而且第一个参数都是即将绑定的this对象，第二个参数则是他们的区别所在，<code>call</code>使用独立的参数作为调用方法的入参，<code>apply</code>使用一个数组作为入参。有的时候我们并不是不想改变this对象，而是想人为的将他绑定到别的对象上，这个时候<code>call</code>和<code>apply</code>是很好用的。（并不是说不能用<code>bind</code>，不过貌似<code>bind</code>出现的比较晚，可能浏览器兼容性不好）。举个栗子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">a</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">func</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">              <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">          <span class="p">},</span>
</span><span class="line">    <span class="nx">x</span><span class="o">:</span> <span class="mi">0</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="nx">b</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">a</span><span class="o">:</span> <span class="nx">a</span><span class="p">,</span>
</span><span class="line">    <span class="nx">x</span><span class="o">:</span> <span class="mi">20</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">    <span class="nx">b</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">func</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的a和b对象中都有x，我们希望func能针对性的修改对应的x，但是直接调用只可能修改func作用域中的x，也就是a.x。修改一下代码，就可以实现修改b.x目的</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">a</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">func</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">              <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">          <span class="p">},</span>
</span><span class="line">    <span class="nx">x</span><span class="o">:</span> <span class="mi">0</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="nx">b</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">a</span><span class="o">:</span> <span class="nx">a</span><span class="p">,</span>
</span><span class="line">    <span class="nx">x</span><span class="o">:</span> <span class="mi">20</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">    <span class="nx">b</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">func</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span>  <span class="c1">// bind this to b</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个栗子举得不好，有点牵强附会，而且这是一种很容易让人迷惑的代码风格，有适用的场景，但不是处处都可用。</p>

<h1 id="section">参考资料</h1>
<ul>
  <li><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference">mozilla</a></li>
  <li><a href="http://fitzgeraldnick.com/weblog/26/">Nick Fitzgerald’s Weblog</a></li>
  <li><a href="http://dailyjs.com/2012/06/25/this-binding/">DailyJs</a></li>
  <li><a href="http://stackoverflow.com/questions/1986896/what-is-the-difference-between-call-and-apply">what-is-the-difference-between-call-and-apply</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 mac 中安装 wine]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2013/04/28/zai-mac-zhong-an-zhuang-wine/"/>
    <updated>2013-04-28T12:39:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2013/04/28/zai-mac-zhong-an-zhuang-wine</id>
    <content type="html"><![CDATA[<p>公司用奇葩的imo，由于没有mac版本，只能用web版。最近imo web版升级之后老是不稳定，又不想装一个笨重的windows虚拟机，于是曲线救国，找找mac上的<a href="http://www.winehq.org/">wine</a>该怎么用。</p>

<p>在mac上安装wine需要备齐三样神器：</p>

<ul>
  <li><a href="http://xquartz.macosforge.org/landing/">xquartz</a>，在mac上提供对x11的支持，由于mountain lion之后不在预装x11，所以这个需要手动下载。</li>
  <li><a href="http://winebottler.kronenberg.org/">winebottler</a>，这个包里两个软件，wine和winebottler，winebottler算是一个wine的管理器，里面预设了一些各种wine应用下需要的类库模板。</li>
</ul>

<p>安装顺序是xquartz-&gt;winebottler-&gt;wine，后面两个从包中直接拖到Application中就行了。安装完后需要先启动xquartz，然后启动wine之后在上面的panel中会有一个酒杯的图标，里面可以打开资源管理器等等，第一次打开时会在用户目录里生成一个Wine Files文件夹，这个就是winebottler中所谓的prefix，里面模拟了一套windows下面的环境。可以通过在winebottler中安装不同的prefix来切换不同应用环境。不过每个prefix都是一个完整的windows环境，非常占空间，没有必要的话，用默认的就行。然后增加类库可以点击wine图标，选择wine trick来安装，还是比较方便的。</p>

<p>youtube上有个<a href="http://www.youtube.com/watch?v=m0BBkISOcEA">视频</a>介绍了如何在mac上安装wine，按照上面说的一步步来，基本不会出错。</p>

<p>但是wine的种种缺点还是很明显的，一个是字体界面都很丑，在mac下更甚，即使想各种办法优化也无济于事。第二个就是很多库都没有，这是最致命的，imo最后还是没有安装成功，按照错误提示装了.net和vcrun2008等等之后还是不能正常启动，也是预料之中的事。wine还是只能算是一个玩具，给喜欢折腾的geek玩玩而已，真要用来跑wow之类的应用，那肯定是闲的蛋疼了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[TDWTF] 耐心测试]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2013/04/25/tdwtf-nai-xin-ce-shi/"/>
    <updated>2013-04-25T12:09:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2013/04/25/tdwtf-nai-xin-ce-shi</id>
    <content type="html"><![CDATA[<p>在Eric的公司，发布流程中代码从来就没有经过正规的测试。不是说没有这些流程，当然得有。毕竟哪有公司会不经过测试就将代码发布给用户。但是“严格测试”和“健壮度检验”跟他们的公司从来不沾边。甚至连“成功的演示”和“满足用户”这些原则都没有，但这又是另一回事了。</p>

<p>其中一个原因是公司认为为了测试付出大量金钱没什么好处。难道开发人员不应该保证代码不出问题？这有什么难的？</p>

<p>虽然如此，公司里仍有一些谨慎的人认为需要在发布新的应用之前做一些测试。所以他们指派了一些测试人员。然而，这些测试人员仅仅是一些半吊子。除了测试外他们还干一些别的事情。比如 Mark，就是一个客户支持人员-特别一线客户支持。一个任何人都轻视或者想摆脱的家伙。</p>

<p>Mark 接到一个任务是测试 Eric 写的新应用。所以当 Eric 收到一个由 Mark 提交到跟踪系统的新 bug 时，并不感到奇怪。由于距离交付日期只剩下一个礼拜，Eric 赶快读了一遍描述。</p>

<blockquote>
  <p>概要：粘贴不起作用<br />
描述：我在记事本中选择了一些文本。然后到软件中去粘贴这些文本，但是不起作用。而且我发现粘贴菜单是灰的。</p>
</blockquote>

<p>Eric 有一点迷惑，也仅有“一点儿”。这已经不是他第一次忘了在剪贴板中有内容时开启粘贴功能了。他启动软件，然后照着 Mark 的步骤做。但是没用，他不能重现这个问题。他粗略的过了一遍代码发现粘贴功能是被启用了。所以他给 bug 加了个注释然后重新指派给 Mark。</p>

<blockquote>
  <p>我尝试重现你说的问题，但是没有效果。你还做了些别的操作吗？</p>
</blockquote>

<p>两天以后，这个问题被加了条注释，重新指派给 Eric</p>

<blockquote>
  <p>我可能忘了一个步骤，当我复制文本之后，我把软件关了。这对你有帮助吗？</p>
</blockquote>

<p>这消息可能有用，Eric 想。然后他回过头去 debug。他尝试关闭记事本，关闭并重启他的软件。他关闭 Visual Studio。他甚至想关闭当地的核电站。但是粘贴功能始终可用。即使他一行行的看代码也没找出问题在哪里。不得已，他在 bug 后加了另一条注释并重新指派给 Mark</p>

<blockquote>
  <p>我尝试了各种关闭的组合，仍然不能重现这个问题。你再想想还有别的操作忘了提吗？</p>
</blockquote>

<p>这次只用了两个小时就收到了回复</p>

<blockquote>
  <p>恐怕我忘了提一件事，在我关闭你的软件之后，我重启了我的电脑。希望这能对你有所帮助。:)</p>
</blockquote>

<p>Eric 愣住了。脑中呈现中一堆难以名状的复杂感情。他对这个公司没有合格和测试人员而感到愤怒，对于 Mark 而言，只是一个重要的 bug 被修复了。风平浪静之后，是剩下疲倦。Mark 慢吞吞的将 bug 的状态改为“关闭-设计如此”。</p>

<p><a href="http://thedailywtf.com/Articles/Testing-Patience.aspx">原文链接</a></p>

<h2 id="section">后记</h2>

<p>这篇文章有些句子不太好翻译，例如最后一段的</p>

<blockquote>
  <p>Rage at the company for not having competent testers. Pity for Mark because…well… Relief that a significant bug had been put to rest.</p>
</blockquote>

<p>只能靠上下文来猜个大概。心理描写这种虚幻的东西还是不太好直译啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[TDWTF] 苏格兰早餐]]></title>
    <link href="http://sailxjx.github.io/blog/blog/2013/04/18/tdwtf-su-ge-lan-zao-can/"/>
    <updated>2013-04-18T11:32:00+08:00</updated>
    <id>http://sailxjx.github.io/blog/blog/2013/04/18/tdwtf-su-ge-lan-zao-can</id>
    <content type="html"><![CDATA[<p>这几天Robert感觉自己简直像英国国王一样。他为一个开发加密软硬件的英国公司工作，并不时在欧洲各地的客户端间飞来飞去。一天，一个叫Willie的苏格兰客户打电话过来，气急败坏的说他的加密服务器挂掉了。“啊~我已经尽了一切奴力！但祂还是泡不起来！”Robert安抚了一下Willie，然后按部就班得问一些问题。（它安装上了吗？开关开了没有？是不是加密组件没有正确的连接上？还是你的服务器被一只巨大的海怪给吃了？）但是毫无结果。</p>

<p>Robert只能跟Willie说：只有上机服务能解决这个问题了，但是我这周没有时间。“我今天在法国处理另一个客户的问题。”</p>

<p>“这可不行，哥们！我需要在这周末我去亚伯丁看足球之前让它能工作起来！”当Robert跟Willie说周末的紧急服务会产生高昂的费用时，Willie毫不犹豫的答应了。</p>

<p>Robert周六搭上了红眼的航班，Willie付了一大笔钱让他乘头等舱。Robert一边享用着热腾腾的坚果和毛巾，一边思考是什么搞坏了Willie的加密系统。它没有记录任何错误日志，而且最近一直工作正常。证据的缺乏让Robert的思绪一团糟。这绝不可能是一个简单的问题。</p>

<p>下飞机之后，Robert在一家四星级酒店签了到，但是没有时间睡觉了。他匆匆吃了宾馆的“大餐”，吃起来像是肉馅羊肚，而不是他一开始以为的鸡蛋配面包。</p>

<p>Robert将他的出租车停在一座没有窗户的浅褐色仓库前。要不是Willie跑出来迎接他，他差点要怀疑自己是不是找到了正确的地方，离开这个地方。“怎么这么就！你是不是掉海里面去了！近来！”Willie带着他穿过一个昏暗的走廊，到一个巨大的仓库中。这个回荡着回音的房间空空荡荡，只有一个吊钟，服务器，还有加密机。“我已经拂过钱了，所以你最好快点给我解决问题！”Willie嚷道。</p>

<p>Robert扫了一边硬件，注意到连接这安全机器的电线松了。他将螺丝拧紧，打开开关，然后加密机就像一个苏格兰球霸吃了红牌一样起死回生了。“额，这就是你的问题。。。”Robert说，看都不看Willie。</p>

<p>“天呐，太棒了。哥们！你搞定他了！”Willie给了Robert一个粗暴的熊抱。Robert告别了Willie回英国。在回去的航班上，他给Willie准备了这次旅途和修复问题的发票。当他看到短短五分钟的事就赚到了几千镑，忍不住偷着乐起来。我好，他好，大家好才是真的好嘛~</p>

<p><a href="http://thedailywtf.com/Articles/The-Scottish-Breakfast.aspx?utm_source=feedly">原文连接</a></p>

<h2 id="section">后记</h2>

<p>这篇文章中居然碰到了一个有这浓重口音的苏格兰人？。这让我想到了前几天听到的一个笑话：</p>

<blockquote>
  <p>一个同事和一个印度人闲聊，当人家问他：“where is your balance?”，他一下子愣住了。这句话是什么意思？是问他有没有能不能找到生活的平衡点吗？他答道：“Sorry I don’t known.”那印度人很惊讶：“You don’t known your balance!”。后来那同事问了别人，人家告诉他，这是在问你“你的父母在那里”。</p>
</blockquote>

<p>讲方言真的很有喜感。</p>
]]></content>
  </entry>
  
</feed>
