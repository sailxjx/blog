<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[novolander]]></title>
  <link href="http://sailxjx.github.com/blog/atom.xml" rel="self"/>
  <link href="http://sailxjx.github.com/blog/"/>
  <updated>2013-01-27T19:21:40+08:00</updated>
  <id>http://sailxjx.github.com/blog/</id>
  <author>
    <name><![CDATA[tristan]]></name>
    <email><![CDATA[sailxjx@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[初试图形数据库 neo4j]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/01/23/chu-shi-tu-xing-shu-ju-ku-neo4j/"/>
    <updated>2013-01-23T11:25:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/01/23/chu-shi-tu-xing-shu-ju-ku-neo4j</id>
    <content type="html"><![CDATA[<h2>安装</h2>

<p>作为一个java软件，就得充分发挥它<code>Write Once, Run Anywhere</code>的精神。直接下载tarball，解压后运行即可。官方还很贴心的提供了一个init脚本(./bin/neo4j)，链接到init.d下就可以开搞啦。</p>

<p>默认的服务实例在localhost:7474，其余配置还是值得好好研究一番的。</p>

<h2>neo4j shell</h2>

<p>neo4j提供了一种叫做<code>Cypher Query Language</code>的查询方言，可以看做是图形数据库的sql，neo4j还提供了一个<code>neo4j-shell</code>用于做查询交互，在命令行下可以使用<code>./bin/neo4j-shell</code>来开启，web中也有一个tab叫做<code>power-tool console</code>可以使用neo4j-shell。</p>

<h3>增删改节点</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 创建节点</span>
</span><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>CREATE <span class="nv">n</span> <span class="o">=</span> <span class="o">{</span> name : <span class="s1">&#39;Andres&#39;</span>, title : <span class="s1">&#39;Developer&#39;</span> <span class="o">}</span> RETURN n;
</span><span class='line'>+-------------------------------------------+
</span><span class='line'>| n                                         |
</span><span class='line'>+-------------------------------------------+
</span><span class='line'>| Node<span class="o">[</span>37<span class="o">]{</span>name:<span class="s2">&quot;Andres&quot;</span>,title:<span class="s2">&quot;Developer&quot;</span><span class="o">}</span> |
</span><span class='line'>+-------------------------------------------+
</span><span class='line'>1 row
</span><span class='line'>Nodes created: 1
</span><span class='line'>Properties <span class="nb">set</span>: 2
</span><span class='line'>8 ms
</span><span class='line'><span class="c"># 修改节点</span>
</span><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>START <span class="nv">n</span> <span class="o">=</span> node<span class="o">(</span>37<span class="o">)</span> SET n.surname <span class="o">=</span> <span class="s1">&#39;Taylor&#39;</span> RETURN n;
</span><span class='line'>+------------------------------------------------------------+
</span><span class='line'>| n                                                          |
</span><span class='line'>+------------------------------------------------------------+
</span><span class='line'>| Node<span class="o">[</span>37<span class="o">]{</span>name:<span class="s2">&quot;Andres&quot;</span>,title:<span class="s2">&quot;Developer&quot;</span>,surname:<span class="s2">&quot;Taylor&quot;</span><span class="o">}</span> |
</span><span class='line'>+------------------------------------------------------------+
</span><span class='line'>1 row
</span><span class='line'>Properties <span class="nb">set</span>: 1
</span><span class='line'>15 ms
</span><span class='line'><span class="c"># 删除节点</span>
</span><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>START <span class="nv">n</span> <span class="o">=</span> node<span class="o">(</span>37<span class="o">)</span> DELETE n;
</span><span class='line'>+-------------------+
</span><span class='line'>| No data returned. |
</span><span class='line'>+-------------------+
</span><span class='line'>Nodes deleted: 1
</span><span class='line'>4 ms
</span></code></pre></td></tr></table></div></figure>


<h3>创建关系</h3>

<p>图形数据库最重要的一个概念就是关系(relationship)，各个节点直接通过双向或单向的关系连接在一起，这样才能从一个节点查找到其他的节点，这种设计在某些场景下会让查询变得更加高效而灵活，例如社交网络中的好友关系，人立方中查找任意两人之间的亲友，假如使用传统的关系数据库，查找朋友的朋友就会变得非常的困难，其耗时也是指数型的增长，而使用图形数据库，则可以保持线性的效率。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 创建两个节点的关系</span>
</span><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>START <span class="nv">a</span> <span class="o">=</span> node<span class="o">(</span>34<span class="o">)</span>, <span class="nv">b</span> <span class="o">=</span> node<span class="o">(</span>36<span class="o">)</span> CREATE a-<span class="o">[</span>r:knowns<span class="o">]</span>-&gt;b RETURN r;
</span><span class='line'>+---------------+
</span><span class='line'>| r             |
</span><span class='line'>+---------------+
</span><span class='line'>| :knowns<span class="o">[</span>0<span class="o">]</span> <span class="o">{}</span> |
</span><span class='line'>+---------------+
</span><span class='line'>1 row
</span><span class='line'>Relationships created: 1
</span><span class='line'>20 ms
</span><span class='line'><span class="c"># 删除某节点和它的所有关系</span>
</span><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>START <span class="nv">n</span> <span class="o">=</span> node<span class="o">(</span>34<span class="o">)</span> MATCH n-<span class="o">[</span>r<span class="o">]</span>-<span class="o">()</span> DELETE n, r;
</span><span class='line'>+-------------------+
</span><span class='line'>| No data returned. |
</span><span class='line'>+-------------------+
</span><span class='line'>Nodes deleted: 1
</span><span class='line'>Relationships deleted: 3
</span><span class='line'>3 ms
</span></code></pre></td></tr></table></div></figure>


<p>在自己看来，<code>Cypher Query Language</code>的增删改语句还是比较直观的，但是一旦牵涉到关系就有点没节操了，一句查询中一半的操作符，真是让人看花眼，相较之下还是sql发展的比较成熟，也更易为人所接受了。<a href="http://docs.neo4j.org/chunked/milestone/cypher-query-lang.html">更多的操作符和更多的语法</a></p>

<p>不过，各种neo4j的客户端都将晦涩的<code>Cypher</code>语言封装起来，提供了可读性更高的接口方法，下面就找个客户端来试用一下。</p>

<h2>nodejs bundle</h2>

<p>官网上给出了java和python版本的实例，我等屌丝玩点轻量级的，这里找了一个<a href="https://github.com/thingdom/node-neo4j">nodejs的客户端</a>，初窥图形数据库的魅力。</p>

<h3>创建及修改节点</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">neo4j = </span><span class="nx">require</span> <span class="s">&#39;neo4j&#39;</span>     <span class="c1">#使用coffee-script，那就尽量写的更coffee一点儿吧</span>
</span><span class='line'><span class="nv">db = </span><span class="k">new</span> <span class="nx">neo4j</span><span class="p">.</span><span class="nx">GraphDatabase</span><span class="p">(</span><span class="s">&#39;http://localhost:7474&#39;</span><span class="p">)</span> <span class="c1">#连接默认的REST端口</span>
</span><span class='line'><span class="nx">node</span><span class="p">.</span><span class="nx">createNode</span> <span class="p">{</span>             <span class="c1">#初始化一个节点</span>
</span><span class='line'>    <span class="nv">username: </span><span class="s">&#39;bran&#39;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">node</span><span class="p">.</span><span class="nx">save</span> <span class="nf">(err, node)-&gt;</span>       <span class="c1">#需要save才能真正的保存这个节点到数据库</span>
</span><span class='line'>    <span class="nv">node.data = </span><span class="p">{</span>           <span class="c1">#可以通过直接修改node的data属性来修改node值</span>
</span><span class='line'>        <span class="nv">username: </span><span class="s">&#39;bran&#39;</span>
</span><span class='line'>        <span class="nv">nickname: </span><span class="s">&#39;bird man&#39;</span>
</span><span class='line'>        <span class="nv">email: </span><span class="s">&#39;bran@gmail.com&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">node</span><span class="p">.</span><span class="nx">save</span><span class="p">()</span>             <span class="c1">#不要忘了再次保存</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考文档</h2>

<ul>
<li><a href="http://docs.neo4j.org/chunked/milestone/">v1.9手册</a></li>
<li><a href="http://docs.neo4j.org.cn/">v1.8中文开发文档</a></li>
<li><a href="http://coffeedoc.info/github/thingdom/node-neo4j/master/">node-neo4j文档</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[awk 学习笔记(2)]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/01/21/awk-xue-xi-bi-ji-2/"/>
    <updated>2013-01-21T17:42:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/01/21/awk-xue-xi-bi-ji-2</id>
    <content type="html"><![CDATA[<h2>常用的选项</h2>

<ul>
<li>-F 指定分隔符</li>
<li>-f 指定调用脚本，可以多次引用，不同文件会被合并成一个awk脚本</li>
<li>-d 输出所有变量到文件，默认输出到awkvars.out，也可以通过在-d后加文件路径来指定文件，但是注意-d与文件名之间不能有空格。调试的时候这个选项会非常有用。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>awk -d./awk.dump <span class="s1">&#39;BEGIN { foo = &quot;test&quot; } /^foo/ { print $0 }&#39;</span> BBS-list
</span><span class='line'><span class="nv">$ </span>cat ./awk.dump
</span><span class='line'>ARGC: 2
</span><span class='line'>ARGIND: 1
</span><span class='line'>ARGV: array, 2 elements
</span><span class='line'>foo: <span class="s2">&quot;test&quot;</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>-p 将命令行下的awk脚本格式化输出到awkprof.out文件，可以在-p后加文件路径来指定文件，注意也不能有空格</li>
<li>-v 预设置awk程序变量，可以设置多次</li>
</ul>


<h2>分隔符的四种形式</h2>

<ul>
<li><code>-F " "</code>      默认，以空格或tab分隔，首尾的空格会被排除掉</li>
<li><code>-F "a"</code>      以普通字符串分隔，用户指定</li>
<li><code>-F "[: ]"</code>   以正则表达式分隔，一般在设定多个分隔符时比较有用（如右边就是按<code>:</code>或空格分隔）</li>
<li><code>-F ""</code>       每个字符都是单独的一列，只在gawk中支持</li>
</ul>


<h2>@include</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='awk'><span class='line'><span class="err">@</span><span class="o">in</span><span class="nx">clude</span> <span class="s1">&#39;./libfoo.awk&#39;</span>
</span><span class='line'><span class="nx">END</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">print</span> <span class="s2">&quot;end of file&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>多行记录</h2>

<p>有些文件中相关联的数据可能会分为多行显示，<a href="http://www.gnu.org/software/gawk/manual/gawk.html#Multiple-Line">看手册中的例子</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Jane Doe
</span><span class='line'>123 Main Street
</span><span class='line'>Anywhere, SE 12345-6789
</span><span class='line'>
</span><span class='line'>John Smith
</span><span class='line'>456 Tree-lined Avenue
</span><span class='line'>Smallville, MW 98765-4321</span></code></pre></td></tr></table></div></figure>


<p>很明显每个块中的数据是有联系的，然后每个块都以一行空字符分割，那么分析的awk脚本可以写成这样。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='awk'><span class='line'><span class="nx">BEGIN</span> <span class="p">{</span> <span class="nb">RS</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="p">;</span> <span class="nb">FS</span> <span class="o">=</span> <span class="s2">&quot;\n&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kr">print</span> <span class="s2">&quot;Name is:&quot;</span><span class="p">,</span> <span class="o">$</span><span class="mi">1</span>
</span><span class='line'>    <span class="kr">print</span> <span class="s2">&quot;Address is:&quot;</span><span class="p">,</span> <span class="o">$</span><span class="mi">2</span>
</span><span class='line'>    <span class="kr">print</span> <span class="s2">&quot;City and State are:&quot;</span><span class="p">,</span> <span class="o">$</span><span class="mi">3</span>
</span><span class='line'>    <span class="kr">print</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的RS也是支持正则表达式的</p>

<h2>格式化控制符</h2>

<p>OFMT与printf中用到的格式化控制符可以参考c中的printf，具体可以<a href="http://www.gnu.org/software/gawk/manual/gawk.html#Control-Letters">参考手册</a></p>

<h2>I/O</h2>

<p>awk可以用<code>&gt;</code>,<code>&gt;&gt;</code>,<code>|</code>将输出定向到文件或管道，但需要注意的是后面的文件名或命令都需要用双引号包起来。</p>

<h2>man tag</h2>

<p><a href="http://www.gnu.org/software/gawk/manual/gawk.html#Special-Files">Special-Files</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[awk 学习笔记(1)]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/01/16/awk-xue-xi-bi-ji-1/"/>
    <updated>2013-01-16T21:46:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/01/16/awk-xue-xi-bi-ji-1</id>
    <content type="html"><![CDATA[<h2>第一个awk程序</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='awk'><span class='line'><span class="c1">#!/bin/awk -f</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kr">print</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个程序会将所有的输入原封不动的输出，直到EOF(ctrl+d)</p>

<h2>在shell中使用awk</h2>

<h3>命令行</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>awk <span class="s1">&#39;BEGIN { print &quot;Here is a single quote &lt;&#39;</span><span class="se">\&#39;</span><span class="s1">&#39;&gt;&quot; }&#39;</span>
</span><span class='line'>Here is a single quote &lt;<span class="err">&#39;</span>&gt;
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，在命令行下引号的嵌套可能会造成一些难以预料的错误，假如在awk脚本内需要用到单引号，那就在它之前使用转义符<code>\</code>，并且不要忘了用另一个单引号结束它前面的字符，就上上面做的那样，实际分成了三段awk脚本，shell将他们链接起来之后实际就成了<code>BEGIN { print "Here is a single quote &lt;'&gt;" }</code>。</p>

<h3>在shell文件中</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">FIND_DATA</span><span class="o">=</span><span class="k">$(</span>awk <span class="s1">&#39;</span>
</span><span class='line'><span class="s1">BEGIN {</span>
</span><span class='line'><span class="s1">    print &quot;here is a single quote &lt;&#39;</span><span class="se">\&#39;</span><span class="s1">&#39;&gt;&quot;</span>
</span><span class='line'><span class="s1">}</span>
</span><span class='line'><span class="s1">&#39;</span><span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>有的时候awk会写的很长，这个时候需要换行，直接用单引号两边包住即可，注意脚本中的单引号还是需要转义的。</p>

<h2>使用正则表达式</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>awk <span class="s1">&#39;/^foo/ { print $0 }&#39;</span> BBS-list
</span><span class='line'><span class="nv">$ </span>awk <span class="s1">&#39;/^foo/ { print $0 }</span>
</span><span class='line'><span class="s1">&gt; /foo/ { print $0 }&#39;</span> BBS-list
</span></code></pre></td></tr></table></div></figure>


<p>上面的命令在BBS-list中匹配出所有以<code>foo</code>开头的行，多个表达式可以用在同一行上，会将匹配结果打印在不同行上。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>awk <span class="s1">&#39;{ if($1 ~ /foo$/) print $0 }&#39;</span> BBS-list
</span><span class='line'>macfoo       555-6480     1200/300          A
</span><span class='line'>sabafoo      555-2127     1200/300          C
</span></code></pre></td></tr></table></div></figure>


<p>在变量上使用正则表达式，使用<code>~</code>或<code>!~</code>符号，能满足多数的应用。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>awk <span class="s1">&#39;{ REGEXP = &quot;^foo&quot;; if($1 ~ REGEXP) print $0 }&#39;</span> BBS-list
</span></code></pre></td></tr></table></div></figure>


<p>动态的设置正则表达式，变量中需要省去两边的<code>/</code>。</p>

<h2>BEGIN/END</h2>

<p>开头和结尾的两块表达式，可以用来做一些全局参数设定和数据统计。</p>

<h2>有用的内置参数</h2>

<ul>
<li>FS            定义分隔符</li>
<li>OFS           定义输出分隔符</li>
<li>NF            列数</li>
<li>NR            行号</li>
<li>RS            输入条目分隔符，awk按这个字符来将整个文本分成不同条记录(默认为&#8221;\n&#8221;)</li>
<li>ORS           输出条目分隔符</li>
<li>IGNORECASE=1  忽略大小写(只支持gawk)</li>
<li>FIELDWIDTHS   指定每列的宽度(只支持gawk)，实际场景中貌似用处不大，除非原文本的格式本身就非常工整(每个field的字符数相等)，下面是<code>FS</code>变量可能会影响<code>FIELDWIDTHS</code>的地方</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>awk <span class="s1">&#39;BEGIN{FS = &quot;a&quot;;FIELDWIDTHS= &quot;4 4&quot;}{print $1, FS}&#39;</span> BBS-list <span class="c"># FS不生效</span>
</span><span class='line'><span class="nv">$ </span>awk <span class="s1">&#39;BEGIN{FIELDWIDTHS= &quot;4 4&quot;;FS = &quot;a&quot;}{print $1, FS}&#39;</span> BBS-list <span class="c"># FIELDWIDTHS不生效</span>
</span><span class='line'><span class="nv">$ </span>awk -Fa <span class="s1">&#39;BEGIN{FIELDWIDTHS= &quot;4 4&quot;}{print $1, FS}&#39;</span> BBS-list <span class="c"># FS不生效</span>
</span><span class='line'><span class="c"># 总而言之，就是哪个在后，哪个就优先。</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>PROCINFO      内置数组，用于记录一些程序信息，包括分隔符类型，进程号，用户组等等</li>
<li>FPAT          gawk特有的一个变量，不能与FS，FIELDWIDTHS共存，利用正则匹配出对应的field，手册中给出了一个常用的例子，匹配csv文件，<code>awk -vFPAT="([^,]+)|(\"[^\"]+\")" '{print "NF=",NF; for(i =1 ;i&lt;NF;i++){print $i}}' str.csv</code>，不过这种写法不够直观，也容易出错，用来应急可以，真刀真枪的干，还是求助其他语言吧</li>
<li>OFMT          输出格式，默认为<code>%.6g</code>，这在格式化数字时比较有效，例如用<code>%.1f</code>就是输出四舍五入后的一位小数，而用<code>%i</code>就是输出整数了。</li>
</ul>


<h2>有用的方法</h2>

<ul>
<li>length($1)    计算字符串或数组长度</li>
<li>srand()       生成随机数种子</li>
<li>rand()        生成一个浮点随机数，需要跟srand配合</li>
<li>tolower()     转小写</li>
<li>toupper()     转大写</li>
<li>sub()         <code>$ awk '{ sub(/foo/, "FOO"); print }' BBS-list</code>将foo字符串替换成FOO。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP 验证码]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/01/13/php-yan-zheng-ma/"/>
    <updated>2013-01-13T14:20:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/01/13/php-yan-zheng-ma</id>
    <content type="html"><![CDATA[<p>gd是一个强大的php图像处理库，最近在做验证码加强的策略，才发现用php作图也能玩出很多花样来。</p>

<h2>几个重要函数</h2>

<ul>
<li><a href="http://php.net/manual/en/function.imagecreatetruecolor.php">imagecreatetruecolor</a> 创建一张空的画布</li>
<li><a href="http://cn2.php.net/manual/zh/function.imagecreatefrompng.php">imagecreatefrompng</a> 从文件创建一个图片句柄</li>
<li><a href="http://cn2.php.net/manual/zh/function.imagecolorallocate.php">imagecolorallocate</a> 拾取一种颜色(rgb)</li>
<li><a href="http://cn2.php.net/manual/zh/function.imagettftext.php">imagettftext</a> 向画布写入文字</li>
<li><a href="http://cn2.php.net/manual/zh/function.imagecopy.php">imagecopy</a> 合并两张图片，可指定拷贝区域及大小</li>
<li><a href="http://cn2.php.net/manual/zh/function.imagecolorat.php">imagecolorat</a> 从图片指定像素点拾取一种颜色</li>
<li><a href="http://cn2.php.net/manual/zh/function.imagesetpixel.php">imagesetpixel</a> 画一个像素点</li>
<li><a href="http://cn2.php.net/manual/zh/function.imagearc.php">imagearc</a> 画一个椭圆，截取部分可用来绘制曲线</li>
</ul>


<p>php绘图用的最频繁的地方大概就是生成验证码了，我们最常见的验证码数字加英文的组合，生成这种验证码很简单，下面几行代码就可以搞定</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">genCode</span><span class="p">(</span><span class="nv">$n</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$dict</span> <span class="o">=</span> <span class="s1">&#39;ABCDEFGHIJKLNMPQRSTUVWXYZ123456789&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$dictlen</span> <span class="o">=</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$dict</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$image</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">image</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$verify</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$fontfile</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">sourcedir</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fonts</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="nv">$colors</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">imagecolorallocate</span><span class="p">(</span><span class="nv">$image</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="p">,</span> <span class="c1">//红</span>
</span><span class='line'>        <span class="nx">imagecolorallocate</span><span class="p">(</span><span class="nv">$image</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span> <span class="p">,</span> <span class="c1">//蓝</span>
</span><span class='line'>        <span class="nx">imagecolorallocate</span><span class="p">(</span><span class="nv">$image</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="p">,</span> <span class="c1">//黑</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$n</span><span class="p">;</span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$verify</span><span class="o">.=</span> <span class="nv">$code</span> <span class="o">=</span> <span class="nx">substr</span><span class="p">(</span><span class="nv">$dict</span><span class="p">,</span> <span class="nx">mt_rand</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$dictlen</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">imagettftext</span><span class="p">(</span><span class="nv">$image</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="nx">mt_rand</span><span class="p">(</span><span class="o">-</span><span class="mi">15</span><span class="p">,</span> <span class="mi">15</span><span class="p">)</span> <span class="p">,</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">*</span> <span class="mi">15</span><span class="p">)</span> <span class="o">+</span> <span class="mi">3</span><span class="p">,</span> <span class="nx">mt_rand</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">25</span><span class="p">)</span> <span class="p">,</span> <span class="nv">$colors</span><span class="p">[</span><span class="nb">array_rand</span><span class="p">(</span><span class="nv">$colors</span><span class="p">)</span> <span class="p">],</span> <span class="nv">$fontfile</span><span class="p">,</span> <span class="nv">$code</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>效果图：</p>

<blockquote><p><img src="http://sailxjx.github.com/blog/images/u/verify-code-simple.png" title="&#34;verify-code-simple&#34;" alt="&#34;verify-code-simple&#34;"></p></blockquote>

<p>其中合并了一张纹理背景并随机绘制出文字的颜色。下面我们再加点料，</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">addNoise</span><span class="p">(</span><span class="nv">$n</span> <span class="o">=</span> <span class="mi">50</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$image</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">image</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$color</span> <span class="o">=</span> <span class="nx">imagecolorallocate</span><span class="p">(</span><span class="nv">$image</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$n</span><span class="p">;</span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//噪声点</span>
</span><span class='line'>        <span class="nx">imagesetpixel</span><span class="p">(</span><span class="nv">$image</span><span class="p">,</span> <span class="nx">mt_rand</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">width</span><span class="p">)</span> <span class="p">,</span> <span class="nx">mt_rand</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">height</span><span class="p">)</span> <span class="p">,</span> <span class="nv">$color</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">addLine</span><span class="p">(</span><span class="nv">$n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$image</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">image</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$color</span> <span class="o">=</span> <span class="nx">imagecolorallocate</span><span class="p">(</span><span class="nv">$image</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$n</span><span class="p">;</span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">imagearc</span><span class="p">(</span><span class="nv">$image</span><span class="p">,</span> <span class="nx">rand</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">width</span> <span class="o">+</span> <span class="mi">10</span><span class="p">)</span> <span class="p">,</span> <span class="nx">rand</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="p">,</span> <span class="nx">rand</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">width</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">10</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">width</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">40</span><span class="p">)</span> <span class="p">,</span> <span class="nx">rand</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">height</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">height</span> <span class="o">+</span> <span class="mi">20</span><span class="p">)</span> <span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">360</span><span class="p">,</span> <span class="nv">$color</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的方法往图像中加入了50个噪点和一条干扰曲线，于是验证码变成了这样：</p>

<blockquote><p><img src="http://sailxjx.github.com/blog/images/u/verify-code-noise.png" title="&#34;verify-code-noise&#34;" alt="&#34;verify-code-noise&#34;"></p></blockquote>

<p>下面来实现汉字和带公式的验证码</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">genHanzi</span><span class="p">(</span><span class="nv">$n</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$dict</span> <span class="o">=</span> <span class="s2">&quot;的一是在了不和有大这主中人上为们地个用工时要&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$dictlen</span> <span class="o">=</span> <span class="nb">mb_strlen</span><span class="p">(</span><span class="nv">$dict</span><span class="p">,</span> <span class="s1">&#39;UTF-8&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$image</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">image</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$fontfile</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">sourcedir</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fonts</span><span class="p">[</span><span class="nb">array_rand</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fonts</span><span class="p">)</span> <span class="p">];</span>
</span><span class='line'>    <span class="nv">$color</span> <span class="o">=</span> <span class="nx">imagecolorallocate</span><span class="p">(</span><span class="nv">$image</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$verify</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$n</span><span class="p">;</span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$verify</span><span class="o">.=</span> <span class="nv">$word</span> <span class="o">=</span> <span class="nb">mb_substr</span><span class="p">(</span><span class="nv">$dict</span><span class="p">,</span> <span class="nx">mt_rand</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$dictlen</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;UTF-8&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">imagettftext</span><span class="p">(</span><span class="nv">$image</span><span class="p">,</span> <span class="nx">rand</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="mi">22</span><span class="p">)</span> <span class="p">,</span> <span class="nx">rand</span><span class="p">(</span><span class="o">-</span><span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span> <span class="p">,</span> <span class="mi">5</span> <span class="o">+</span> <span class="nv">$i</span> <span class="o">*</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="nv">$color</span><span class="p">,</span> <span class="nv">$fontfile</span><span class="p">,</span> <span class="nv">$word</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">verify</span> <span class="o">=</span> <span class="nv">$verify</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">genFomula</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$symbols</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;＋&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;+&#39;</span><span class="p">,</span><span class="s1">&#39;－&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span><span class="s1">&#39;×&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span><span class="s1">&#39;加&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;+&#39;</span><span class="p">,</span><span class="s1">&#39;减&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span><span class="s1">&#39;乘&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;*&#39;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>    <span class="nv">$numbers</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;0&#39;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span><span class="s1">&#39;1&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span><span class="s1">&#39;2&#39;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span><span class="s1">&#39;3&#39;</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span><span class="s1">&#39;4&#39;</span> <span class="o">=&gt;</span> <span class="mi">4</span><span class="p">,</span><span class="s1">&#39;5&#39;</span> <span class="o">=&gt;</span> <span class="mi">5</span><span class="err">，</span><span class="s1">&#39;叁&#39;</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span><span class="s1">&#39;肆&#39;</span> <span class="o">=&gt;</span> <span class="mi">4</span><span class="p">,</span><span class="s1">&#39;伍&#39;</span> <span class="o">=&gt;</span> <span class="mi">5</span><span class="p">,</span><span class="s1">&#39;陆&#39;</span> <span class="o">=&gt;</span> <span class="mi">6</span><span class="p">,</span><span class="s1">&#39;柒&#39;</span> <span class="o">=&gt;</span> <span class="mi">7</span><span class="p">,</span><span class="s1">&#39;捌&#39;</span> <span class="o">=&gt;</span> <span class="mi">8</span><span class="p">,</span><span class="s1">&#39;玖&#39;</span> <span class="o">=&gt;</span> <span class="mi">9</span><span class="p">,</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>    <span class="nv">$image</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">image</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$fontfile</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">sourcedir</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fonts</span><span class="p">[</span><span class="nb">array_rand</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fonts</span><span class="p">)</span> <span class="p">];</span>
</span><span class='line'>    <span class="nv">$numidx1</span> <span class="o">=</span> <span class="nb">array_rand</span><span class="p">(</span><span class="nv">$numbers</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$num1</span> <span class="o">=</span> <span class="nv">$numbers</span><span class="p">[</span><span class="nv">$numidx1</span><span class="p">];</span>
</span><span class='line'>    <span class="nv">$symbol</span> <span class="o">=</span> <span class="nb">array_rand</span><span class="p">(</span><span class="nv">$symbols</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$color</span> <span class="o">=</span> <span class="nx">imagecolorallocate</span><span class="p">(</span><span class="nv">$image</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$numidx2</span> <span class="o">=</span> <span class="nb">array_rand</span><span class="p">(</span><span class="nv">$numbers</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$num2</span> <span class="o">=</span> <span class="nv">$numbers</span><span class="p">[</span><span class="nv">$numidx2</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$symbols</span><span class="p">[</span><span class="nv">$symbol</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39;-&#39;</span> <span class="o">||</span> <span class="nv">$num2</span> <span class="o">&lt;=</span> <span class="nv">$num1</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//减法结果不为负数</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">eval</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\$</span><span class="s2">verify = &quot;</span> <span class="o">.</span> <span class="s2">&quot;</span><span class="si">$num1</span><span class="s2">&quot;</span> <span class="o">.</span> <span class="nv">$symbols</span><span class="p">[</span><span class="nv">$symbol</span><span class="p">]</span> <span class="o">.</span> <span class="s2">&quot;</span><span class="si">$num2</span><span class="s2">;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$verify</span> <span class="o">=</span> <span class="nb">intval</span><span class="p">(</span><span class="nv">$verify</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$codelist</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="nv">$numidx1</span><span class="p">,</span>
</span><span class='line'>        <span class="nv">$symbol</span><span class="p">,</span>
</span><span class='line'>        <span class="nv">$numidx2</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;=&#39;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$codelist</span> <span class="k">as</span> <span class="nv">$i</span> <span class="o">=&gt;</span> <span class="nv">$code</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">imagettftext</span><span class="p">(</span><span class="nv">$image</span><span class="p">,</span> <span class="nx">mt_rand</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span> <span class="p">,</span> <span class="nx">mt_rand</span><span class="p">(</span><span class="o">-</span><span class="mi">15</span><span class="p">,</span> <span class="mi">15</span><span class="p">)</span> <span class="p">,</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">*</span> <span class="mi">18</span><span class="p">)</span> <span class="o">+</span> <span class="mi">3</span><span class="p">,</span> <span class="nx">mt_rand</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">25</span><span class="p">)</span> <span class="p">,</span> <span class="nv">$color</span><span class="p">,</span> <span class="nv">$fontfile</span><span class="p">,</span> <span class="nv">$code</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成汉字和上面的英文组合差不多，加个字典就可以，然后可以加入一下随机的字体变换，生成公式呢，其实也是预先定义好数字和符号的字典，靠随机组合来生成图片，然后吧计算结果记录下来就行了。</p>

<blockquote><p><img src="http://sailxjx.github.com/blog/images/u/verify-hanzi.png" title="&#34;verify-hanzi&#34;" alt="&#34;verify-hanzi&#34;">
<img src="http://sailxjx.github.com/blog/images/u/verify-fomula.png" title="&#34;verify-fomula&#34;" alt="&#34;verify-fomula&#34;"></p></blockquote>

<p>很多验证码中还会对字体进行扭曲，这会让做的人和看的人都比较纠结。目前的方法大致是先生成一张正常的图，然后拾取图中每个像素点进行正弦变换位置后填入另一张相同大小的图，注意两张图的背景需要一致，否则边缘的图片就很不和谐咯。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">public function twist() {</span>
</span><span class='line'><span class="x">    $distImage = imagecreatetruecolor($this-&gt;width, $this-&gt;height);</span>
</span><span class='line'><span class="x">    imagecopy($distImage, $this-&gt;backimg, 0, 0, 0, 0, $this-&gt;width, $this-&gt;height);</span>
</span><span class='line'><span class="x">    for ($x = 0;$x &lt; $this-&gt;width;$x++) {</span>
</span><span class='line'><span class="x">        for ($y = 0;$y &lt; $this-&gt;height;$y++) {</span>
</span><span class='line'><span class="x">            $rgb = imagecolorat($this-&gt;image, $x, $y);</span>
</span><span class='line'><span class="x">            imagesetpixel($distImage, (int)($x + sin($y / $this-&gt;height * 2 * M_PI - M_PI * 0.1) * 4) , $y, $rgb);</span>
</span><span class='line'><span class="x">        }</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">    $this-&gt;image = $distImage;</span>
</span><span class='line'><span class="x">    return $this;</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>效果图：</p>

<blockquote><p><img src="http://sailxjx.github.com/blog/images/u/verify-code-twist.png" title="&#34;verify-code-twist&#34;" alt="&#34;verify-code-twist&#34;"></p></blockquote>

<p>最后再加入一个gif动态图的例子，主要原理是预先生成每一帧的gif图像，然后合并为一张图片，对gif进行编码的类库使用的是网上下载的GIFEncoder，代码不多，但是够用。<code>less is more</code>嘛。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">public function genCodeAnimate($n = 4, $flags = 40) {</span>
</span><span class='line'><span class="x">    $dict = &#39;ABCDEFGHIJKLNMPQRSTUVWXYZ123456789&#39;;</span>
</span><span class='line'><span class="x">    $dictlen = strlen($dict);</span>
</span><span class='line'><span class="x">    $verify = &#39;&#39;;</span>
</span><span class='line'><span class="x">    $fontfile = $this-&gt;sourcedir . $this-&gt;fonts[0];</span>
</span><span class='line'><span class="x">    $colors = array(</span>
</span><span class='line'><span class="x">        imagecolorallocate($this-&gt;image, 255, 0, 0) , //红</span>
</span><span class='line'><span class="x">        imagecolorallocate($this-&gt;image, 0, 0, 255) , //蓝</span>
</span><span class='line'><span class="x">        imagecolorallocate($this-&gt;image, 0, 0, 0) , //黑</span>
</span><span class='line'><span class="x">    );</span>
</span><span class='line'><span class="x">    $fontColors = array();</span>
</span><span class='line'><span class="x">    $fontSizes = array();</span>
</span><span class='line'><span class="x">    $gifs = array();</span>
</span><span class='line'><span class="x">    for ($i = 0;$i &lt; $n;$i++) {</span>
</span><span class='line'><span class="x">        $verify.= substr($dict, mt_rand(0, $dictlen - 1) , 1);</span>
</span><span class='line'><span class="x">        $fontColors[$i] = $colors[array_rand($colors) ];</span>
</span><span class='line'><span class="x">        $fontSizes[$i] = rand(18, 22);</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">    for ($f = 0;$f &lt; $flags;$f++) {</span>
</span><span class='line'><span class="x">        $image = $this-&gt;imgClone($this-&gt;image);</span>
</span><span class='line'><span class="x">        $angle = - 15 + abs($f - $flags / 2) * 2; //角度</span>
</span><span class='line'><span class="x">        $y = 20 + abs($f - $flags / 2) * 0.5;</span>
</span><span class='line'><span class="x">        for ($i = 0;$i &lt; $n;$i++) {</span>
</span><span class='line'><span class="x">            $code = substr($verify, $i, 1);</span>
</span><span class='line'><span class="x">            imagettftext($image, $fontSizes[$i], $angle, ($i * 15) - 20 + abs($f - $flags / 2) * 5, $y, $fontColors[$i], $fontfile, $code);</span>
</span><span class='line'><span class="x">        }</span>
</span><span class='line'><span class="x">        header(&quot;Content-type: image/gif&quot;);</span>
</span><span class='line'><span class="x">        imagegif($image);</span>
</span><span class='line'><span class="x">        imagedestroy($image);</span>
</span><span class='line'><span class="x">        $gifs[] = ob_get_contents();</span>
</span><span class='line'><span class="x">        ob_clean();</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">    ob_start();</span>
</span><span class='line'><span class="x">    $gifEncoder = new GIFEncoder($gifs, 100, 0, 1, 0, 0, 1, &#39;bin&#39;);</span>
</span><span class='line'><span class="x">    header(&#39;Content-type: image/gif&#39;);</span>
</span><span class='line'><span class="x">    echo $gifEncoder-&gt;GetAnimation();</span>
</span><span class='line'><span class="x">    return $verify;</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>效果图：</p>

<blockquote><p><img src="http://sailxjx.github.com/blog/images/u/verify-code-animate.gif" title="&#34;verify-code-animate&#34;" alt="&#34;verify-code-animate&#34;"></p></blockquote>

<h2>备忘</h2>

<ul>
<li><code>imagecreate</code>也是一个创建图像的方法，不过相对于<code>imagecreatetruecolor</code>，它会使用第一次由<code>imagecolorallocate</code>生成的颜色作为背景色，比较坑爹，不推荐。</li>
</ul>


<h2>下载</h2>

<ul>
<li><a href="http://sailxjx.github.com/blog/patches/verify.zip">源码</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx+php-fpm 配置记录]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2012/12/24/nginx-plus-php-fpm-pei-zhi-ji-lu/"/>
    <updated>2012-12-24T22:03:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2012/12/24/nginx-plus-php-fpm-pei-zhi-ji-lu</id>
    <content type="html"><![CDATA[<h3>安装nginx</h3>

<p>安装过程没什么好说的，不过tarball中没有包含init脚本，官网wiki中提供了<a href="http://wiki.nginx.org/Nginx-init-ubuntu">一个ubuntu的版本</a>，其实在所有linux发行版中都可用，下载下来放到/etc/init.d/nginx，大功告成。</p>

<p>假如在启动过程中遇到<code>undefined function: log_daemon_msg</code>等等报错，那是缺少一些公用方法，下载或安装init-functions然后在头部引入即可，google到一个可用的<a href="http://www.linuxfromscratch.org/lfs/view/7.0/scripts/apds02.html">地址</a>，此外，假如使用的是ubuntu，在/lib/lsb/中有个文件。</p>

<h3>安装php-fpm</h3>

<p>fpm已经包含在php的远吗中，编译php的时候加上<code>--enable-fpm</code>即可，fpm的init脚本包含在<code>sapi/fpm/init.d.php-fpm</code>，稍加修改即可使用，非常贴心滴。默认配置文件<code>sapi/fpm/php-fm.conf</code>，我把它复制在/etc目录中以供调用。</p>

<h3>配置php-fpm</h3>

<p>fpm的配置文件已很多个pool块分割，global是全局配置，www是默认的pool，这里不做修改。</p>

<figure class='code'><figcaption><span>php-fpm.conf  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[global]</span>
</span><span class='line'><span class="na">user</span> <span class="o">=</span> <span class="s">tristan</span>
</span><span class='line'><span class="na">group</span> <span class="o">=</span> <span class="s">tristan</span>
</span><span class='line'><span class="na">pid</span> <span class="o">=</span> <span class="s">/var/run/php-fpm.pid</span>
</span><span class='line'><span class="na">error_log</span> <span class="o">=</span> <span class="s">/var/log/php/fpm.err.log</span>
</span><span class='line'><span class="c">; 下面三个值表示当一分钟内假如有10个子进程收到SIGSEGV或SIGBUS信号而退出的话，php-fpm会自动重启，应该是一种自我保护的机制</span>
</span><span class='line'><span class="err">emergency_restart_threshold</span> <span class="err">10</span>
</span><span class='line'><span class="err">emergency_restart_interval</span> <span class="err">1m</span>
</span><span class='line'><span class="err">process_control_timeout</span> <span class="err">10s</span>
</span><span class='line'><span class="c">; 超过十秒的慢请求会被记录到fpm.slow.$pool.log中并在errlog中产生一条notice记录</span>
</span><span class='line'><span class="na">request_slowlog_timeout</span> <span class="o">=</span> <span class="s">10s</span>
</span><span class='line'><span class="na">slowlog</span> <span class="o">=</span> <span class="s">/var/log/php/fpm.slow.$pool.log</span>
</span><span class='line'><span class="c">; 允许任意客户端链接</span>
</span><span class='line'><span class="na">listen.allowed_clients</span> <span class="o">=</span> <span class="s">any</span>
</span><span class='line'><span class="c">; 可以包含一些分散的config文件</span>
</span><span class='line'><span class="na">include</span><span class="o">=</span><span class="s">/etc/php-fpm.d/*.conf</span>
</span><span class='line'><span class="c">; 下面是www pool的配置</span>
</span><span class='line'><span class="k">[www]</span>
</span><span class='line'><span class="c">; 设置子进程相关</span>
</span><span class='line'><span class="na">pm</span> <span class="o">=</span> <span class="s">dynamic</span>
</span><span class='line'><span class="na">pm.max_children</span> <span class="o">=</span> <span class="s">5</span>
</span><span class='line'><span class="na">pm.start_servers</span> <span class="o">=</span> <span class="s">3</span>
</span><span class='line'><span class="na">pm.min_spare_servers</span> <span class="o">=</span> <span class="s">2</span>
</span><span class='line'><span class="na">pm.max_spare_servers</span> <span class="o">=</span> <span class="s">4</span>
</span><span class='line'><span class="na">pm.max_requests</span> <span class="o">=</span> <span class="s">200</span>
</span><span class='line'><span class="c">; 下面还可以用env设置一些环境变量</span>
</span><span class='line'><span class="na">env[PATH]</span> <span class="o">=</span> <span class="s">/usr/local/bin:/usr/bin:/bin</span>
</span><span class='line'><span class="na">env[TMP]</span> <span class="o">=</span> <span class="s">/tmp</span>
</span></code></pre></td></tr></table></div></figure>


<p>配置完成后，<code>/etc/init.d/php-fpm start</code>即可启动php-fpm，通过<code>netstat -anp</code>可以看到9000端口被php-fpm占用了。</p>

<h3>配置nginx</h3>

<p>下面到了最艰苦卓绝的工作了，配置nginx。</p>

<figure class='code'><figcaption><span>nginx </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user tristan;
</span><span class='line'>worker_processes 2;
</span><span class='line'>error_log  /var/log/nginx/error.log;
</span><span class='line'>pid        /var/run/nginx.pid;
</span><span class='line'>events {
</span><span class='line'>    worker_connections  1024;
</span><span class='line'>}
</span><span class='line'>http {
</span><span class='line'>    include       mime.types;
</span><span class='line'>    default_type  application/octet-stream;
</span><span class='line'>    sendfile        on; 
</span><span class='line'>    keepalive_timeout  65; 
</span><span class='line'>    gzip on; 
</span><span class='line'>    include /usr/local/nginx/conf/sites-enabled/*;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>主配置文件中基本没什么可写的，重点在对每个站点的配置上。</p>

<p>对静态站点的配置是最简单的，比如下面的配置就部署了一个bootstrap的demo站点</p>

<figure class='code'><figcaption><span>boot </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>    listen *:80;
</span><span class='line'>    server_name boot.local.com;
</span><span class='line'>    access_log  /var/log/nginx/boot.log;
</span><span class='line'>    location / {
</span><span class='line'>        root /home/tristan/coding/github/bootstrap/docs; #根目录
</span><span class='line'>        index index.html; #添加默认索引文件
</span><span class='line'>    }   
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>动态站点稍微麻烦一点，通过fastcgi模式，使用php-fpm配置一个动态站点。</p>

<figure class='code'><figcaption><span>fun </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>    listen *:80;
</span><span class='line'>    server_name fun.local.com;
</span><span class='line'>    access_log /var/log/nginx/fun.log;
</span><span class='line'>    location / { 
</span><span class='line'>        index index.php;
</span><span class='line'>        rewrite ^(.*)$ /index.php$1 last; #大部分站点都做成了单入口，将所有url rewrite到index文件
</span><span class='line'>    }   
</span><span class='line'>    location ~ ^/index.php {
</span><span class='line'>        root /home/tristan/coding/webdata/fun;
</span><span class='line'>        fastcgi_pass 127.0.0.1:9000;
</span><span class='line'>        include fastcgi_params;
</span><span class='line'>        if ($fastcgi_script_name ~ "^(.+?\.php)(/.+)$") {
</span><span class='line'>            set $real_script_name $1; 
</span><span class='line'>            set $path_info $2; 
</span><span class='line'>        }   
</span><span class='line'>        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
</span><span class='line'>        fastcgi_param PATH_INFO $path_info; 
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>值得注意的是，有些框架使用pathinfo作为路由依据，默认情况下nginx并不会将pathinfo传递给php-fpm，所以上面需要通过正则匹配出准确的pathinfo，通过fastcgi_param传给fpm</p>

<p>下面是一个使用minify的静态资源站点，其中既包含纯静态文件(css|js)，也包含由php压缩成的伪静态文件</p>

<figure class='code'><figcaption><span>static </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>    listen *:80;
</span><span class='line'>    server_name static.local.com;
</span><span class='line'>    access_log /var/log/nginx/static.log;
</span><span class='line'>    root /home/tristan/coding/webdata/static;
</span><span class='line'>    location / { 
</span><span class='line'>        autoindex on; 
</span><span class='line'>        index index.php;
</span><span class='line'>        rewrite ^/static/(.*)\.(js|css)$ /static/index.php?g=$1 last;
</span><span class='line'>    }   
</span><span class='line'>    location ~ index.php {
</span><span class='line'>        fastcgi_pass 127.0.0.1:9000;
</span><span class='line'>        include fastcgi_params;
</span><span class='line'>        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
</span><span class='line'>    }   
</span><span class='line'>    location ~ ^(?!\/static)(.*)\.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
</span><span class='line'>        access_log off; #关闭log
</span><span class='line'>        log_not_found off;
</span><span class='line'>        expires 30d; #纯静态文件设置缓存时间
</span><span class='line'>    }   
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>参考资料</h2>

<ul>
<li><a href="http://www.if-not-true-then-false.com/2011/nginx-and-php-fpm-configuration-and-optimizing-tips-and-tricks/">Nginx and PHP-FPM Configuration and Optimizing Tips and Tricks</a></li>
<li><a href="http://stackoverflow.com/questions/8265941/empty-value-to-path-info-in-nginx-returns-junk-value">stackoverflow: Empty value to PATH_INFO in nginx returns junk value</a></li>
<li><a href="http://wiki.nginx.org/HttpFastcgiModule">HttpFastcgiModule</a></li>
<li><a href="http://wiki.nginx.org/HttpRewriteModule">HttpRewriteModule</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux 登录用户管理]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2012/12/19/linux-deng-lu-yong-hu-guan-li/"/>
    <updated>2012-12-19T22:35:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2012/12/19/linux-deng-lu-yong-hu-guan-li</id>
    <content type="html"><![CDATA[<p>最近换了mac后，需要在公司和家中多地登录，两地的ip又没有设置成一样的，结果每次切换ip就发现ssh到虚拟机的终端没响应了，再连上之后，之前登录的用户就永远活在虚拟机心中啦~当然这也没什么，但是作为有一点点洁癖的我来说，不清除这几个用户总是一件不太舒服的事情，于是就去网上找找命令，结果发现找到的资料还挺齐全，学到不少，记录下来，以免下次忘了。</p>

<h3>who</h3>

<blockquote><p>root     tty1         2012-12-19 17:51</p>

<p>tristan  pts/0        2012-12-19 17:57 (macshare)</p>

<p>tristan  pts/1        2012-12-19 18:00 (macshare)</p></blockquote>

<p>这个命令不用说，大多数人都知道，查看当前登录用户，登录时间，终端号(tty)和远程登录终端号(pts)</p>

<h3>whoami</h3>

<p>这个命令有点意思，顾名思义，告诉<code>我是谁</code>，曾经有位buddy获得了root权限，但是当使用<code>cd ~</code>的时候仍然回到了先前用户的主目录，这个时候<code>whoami</code>告诉他确实已经是root用户了，仔细想想，原来他是用<code>sudo -s</code>切到了root，所有环境变量沿用了老用户的。说明这个短小的命令还是挺实用啦。</p>

<h3>w [user]</h3>

<blockquote><p>18:43:48 up  9:39,  3 users,  load average: 0.06, 0.06, 0.06</p>

<p>USER     TTY       LOGIN@   IDLE   JCPU   PCPU WHAT</p>

<p>root     tty1      17:51   47:01   0.43s  0.40s -zsh</p>

<p>tristan  pts/0     17:57   30:20   0.44s  0.44s -zsh</p>

<p>tristan  pts/1     18:00    0.00s  0.18s  0.00s w</p></blockquote>

<p>更短的命令，却比who更强大。</p>

<p>第一行数值分别表示当前时间，系统运行时间，登录用户数，(1分钟，5分钟，15分钟)内的系统负载</p>

<p>第二行开始就是一个用户相关的表格了，每列的意思分别为：</p>

<ul>
<li>USER：显示登陆用户帐号名。</li>
<li>TTY：用户登录的终端号。</li>
<li>FROM：显示用户在何处登陆系统。</li>
<li>LOGIN@：是LOGIN AT的意思，表示登陆进入系统的时间。</li>
<li>IDLE：用户空闲时间，从用户上一次任务结束后，开始记时。</li>
<li>JCPU：一终端代号来区分，表示在某段时间内，所有与该终端相关的进程任务所耗费的CPU时间。</li>
<li>PCPU：指WHAT域的任务执行后耗费的CPU时间。</li>
<li>WHAT：表示当前执行的任务。</li>
</ul>


<h3>last [user]</h3>

<blockquote><p>tristan   ttys003                   Wed Dec 19 22:57   still logged in</p>

<p>tristan   ttys001                   Wed Dec 19 22:47   still logged in</p>

<p>tristan   ttys003                   Wed Dec 19 22:38 - 22:39  (00:01)</p></blockquote>

<p>这个命令显示用户的登录记录，后面可以跟用户名来只显示该用户的登录历史。一般还会搭配管道用<code>last | head</code>来显示最后登录历史或<code>last | grep still</code>来获取仍然登录中的用户</p>

<h3>ps -ef | grep [pts/0]</h3>

<blockquote><p>tristan   1042  1041  0 19:01 pts/0    00:00:00 -zsh</p>

<p>tristan   1916  1042  0 19:03 pts/0    00:00:00 ps -ef</p></blockquote>

<p>这个命令就是起初写这篇文章的用意啦，根据终端号(可以通过who命令查到)获取目标用户登录相关的pid，比如上面这个1042，然后使用<code>kill -9 1042</code>剔除这个用户，注意<code>kill</code>需要加上<code>-9</code>，默认的TERM信号是杀不了这个进程的。</p>

<h3>pkill -u [user]</h3>

<p>网上还有一种更简便的方法，根据用户名kill掉这个用户相关的所有进程，包括已这个用户身份运行的所有daemon进程，很黄很暴力，伤敌一千自损八百，不推荐。</p>

<h2>参考资料</h2>

<ul>
<li><p><a href="http://blog.csdn.net/linfengfeiye/article/details/4781507">Linux查看和剔除当前登录用户</a></p></li>
<li><p><a href="http://linux.about.com/library/cmd/blcmdl1_w.htm">Linux / Unix Command: w</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vagrant 笔记]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2012/12/11/vagrant-bi-ji/"/>
    <updated>2012-12-11T23:16:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2012/12/11/vagrant-bi-ji</id>
    <content type="html"><![CDATA[<h2>从virtualbox开始</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitlabhq 部署小记]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2012/11/14/gitlabhq-bu-shu-xiao-ji/"/>
    <updated>2012-11-14T20:12:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2012/11/14/gitlabhq-bu-shu-xiao-ji</id>
    <content type="html"><![CDATA[<p>冬天来了，不知github是不是也去冬眠了，速度慢的像在爬，没办法，屌丝买不起vps，只能自己内网部一套开源的。</p>

<p>gitlabhq是github的一个开源版本，虽然不是官方的，但是已经做的有模有样，总之能想到的功能都已具备，放在国内随便改改UI就能上线建站的那种。安装文档那是写的相当滴详细，体现了码农罕有的耐性，查看文档请移步<a href="https://github.com/gitlabhq/gitlabhq/blob/master/doc/install/installation.md">gitlab文档</a></p>

<p>以前部署中在ssh上碰到一些问题，这次在<a href="https://github.com/mk-qi">@mk-qi</a>童鞋的点拨下，进展是相当滴顺利，下面记录一些部署过程中的问题和解决方法。</p>

<p>自动部署脚本如下，基本由文档转成，可以省掉很多事情(但是遇到问题要学会google哦)，假如使用的是ubuntu，官方以前也提供了一个一键安装脚本，后来不知怎么又去掉了，估计是计划赶不上变化吧</p>

<figure class='code'><figcaption><span>gitlabhq自动化部署脚本  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># add user git</span>
</span><span class='line'>sudo adduser --system --shell /bin/bash --gecos <span class="s1">&#39;git version control&#39;</span> --group --disabled-password --home /home/git git
</span><span class='line'><span class="c"># add user gitlab</span>
</span><span class='line'>sudo adduser --disabled-login --gecos <span class="s1">&#39;gitlab system&#39;</span> gitlab
</span><span class='line'><span class="c"># move user gitlab to group git</span>
</span><span class='line'>sudo usermod -a -G git gitlab
</span><span class='line'>sudo usermod -a -G gitlab git
</span><span class='line'><span class="c"># generate key</span>
</span><span class='line'>sudo -H -u gitlab ssh-keygen -q -N <span class="s1">&#39;&#39;</span> -t rsa -f /home/gitlab/.ssh/id_rsa
</span><span class='line'><span class="c"># clone gitlab&#39;s fork to the gitolite source code</span>
</span><span class='line'><span class="nb">cd</span> /home/git
</span><span class='line'>sudo -H -u git git clone -b gl-v304 https://github.com/gitlabhq/gitolite.git /home/git/gitolite
</span><span class='line'><span class="c"># setup</span>
</span><span class='line'><span class="nb">cd</span> /home/git
</span><span class='line'>sudo -u git -H mkdir bin
</span><span class='line'>sudo -u git sh -c <span class="s1">&#39;echo -e &quot;PATH=\$PATH:/home/git/bin\nexport PATH&quot; &gt;&gt; /home/git/.profile&#39;</span>
</span><span class='line'>sudo -u git sh -c <span class="s1">&#39;gitolite/install -ln /home/git/bin&#39;</span>
</span><span class='line'>sudo cp /home/gitlab/.ssh/id_rsa.pub /home/git/gitlab.pub
</span><span class='line'>sudo chmod 0444 /home/git/gitlab.pub
</span><span class='line'>sudo -u git -H sh -c <span class="s2">&quot;PATH=/home/git/bin:$PATH; gitolite setup -pk /home/git/gitlab.pub&quot;</span>
</span><span class='line'><span class="c"># permissions</span>
</span><span class='line'>sudo chmod -R g+rwX /home/git/repositories/
</span><span class='line'>sudo chown -R git:git /home/git/repositories/
</span><span class='line'>sudo -u gitlab -H git clone git@localhost:gitolite-admin.git /tmp/gitolite-admin
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$?</span> !<span class="o">=</span> 0 <span class="o">]]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;error: gitolite is not installed correct, or the ssh key is not right&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>sudo rm -rf /tmp/gitolite-admin
</span><span class='line'><span class="c"># clone gitlab source and install prerequisites</span>
</span><span class='line'>sudo gem install charlock_holmes
</span><span class='line'>sudo pip install pygments
</span><span class='line'><span class="nb">cd</span> /home/gitlab
</span><span class='line'>sudo -H -u gitlab git clone git://github.com/51fanli/gitlabhq.git gitlab
</span><span class='line'><span class="nb">cd </span>gitlab
</span><span class='line'>sudo -u gitlab cp config/gitlab.yml.example config/gitlab.yml
</span><span class='line'><span class="c"># mysql databases init</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;connect to mysql&quot;</span>
</span><span class='line'>mysql -h127.0.0.1 -uroot -p
</span><span class='line'><span class="c"># CREATE DATABASE IF NOT EXISTS `gitlabhq_production` DEFAULT CHARACTER SET `utf8` COLLATE `utf8_unicode_ci`;</span>
</span><span class='line'><span class="c"># CREATE USER &#39;gitlab&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;</span>
</span><span class='line'><span class="c"># GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON `gitlabhq_production`.* TO &#39;gitlab&#39;@&#39;localhost&#39;;</span>
</span><span class='line'>sudo -u gitlab cp config/database.yml.example config/database.yml
</span><span class='line'>sudo -u gitlab -H bundle install --without development <span class="nb">test </span>sqlite postgres --deployment
</span><span class='line'>sudo -u gitlab -H git config --global user.email <span class="s2">&quot;gitlab@localhost&quot;</span>
</span><span class='line'>sudo -u gitlab -H git config --global user.name <span class="s2">&quot;Gitlab&quot;</span>
</span><span class='line'>sudo -u gitlab cp config/resque.yml.example config/resque.yml
</span><span class='line'>sudo -u gitlab cp config/unicorn.rb.example config/unicorn.rb
</span><span class='line'><span class="c"># init tables</span>
</span><span class='line'>sudo -u gitlab bundle <span class="nb">exec </span>rake gitlab:app:setup <span class="nv">RAILS_ENV</span><span class="o">=</span>production
</span><span class='line'>sudo cp ./lib/hooks/post-receive /home/git/.gitolite/hooks/common/post-receive
</span><span class='line'>sudo chown git:git /home/git/.gitolite/hooks/common/post-receive
</span><span class='line'><span class="c"># check status</span>
</span><span class='line'>sudo -u gitlab bundle <span class="nb">exec </span>rake gitlab:app:status <span class="nv">RAILS_ENV</span><span class="o">=</span>production
</span><span class='line'>sudo wget https://raw.github.com/gitlabhq/gitlab-recipes/master/init.d/gitlab -P /etc/init.d/
</span><span class='line'>sudo chmod +x /etc/init.d/gitlab
</span><span class='line'>sudo update-rc.d gitlab defaults 21
</span></code></pre></td></tr></table></div></figure>


<p>gitlabhq3.0后改用unicorn(紧跟github步伐)作为默认的启动server,要将它与nginx或apache一起使用请参考<a href="https://wiki.archlinux.org/index.php/Gitlab#Web_server_configuration">archwiki的gitlab手册</a>,下面是apache中的vhost配置(需要预先编译proxy模块)</p>

<figure class='code'><figcaption><span>apache vhost配置  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;VirtualHost *:80&gt;
</span><span class='line'>  ServerName gitlab.myserver.com
</span><span class='line'>  ServerAlias www.gitlab.myserver.com
</span><span class='line'>  DocumentRoot /home/gitlab/gitlab/public
</span><span class='line'>  ErrorLog /var/log/httpd/gitlab_error_log
</span><span class='line'>  CustomLog /var/log/httpd/gitlab_access_log combined
</span><span class='line'>
</span><span class='line'>  &lt;Proxy balancer://unicornservers&gt;
</span><span class='line'>      BalancerMember http://127.0.0.1:8080
</span><span class='line'>  &lt;/Proxy&gt;
</span><span class='line'>
</span><span class='line'>  &lt;Directory /home/gitlab/gitlab/public&gt;
</span><span class='line'>    AllowOverride All
</span><span class='line'>    Options -MultiViews
</span><span class='line'>  &lt;/Directory&gt;
</span><span class='line'>
</span><span class='line'>  RewriteEngine on
</span><span class='line'>  RewriteCond %<span class="o">{</span>DOCUMENT_ROOT<span class="o">}</span>/%<span class="o">{</span>REQUEST_FILENAME<span class="o">}</span> !-f
</span><span class='line'>  RewriteRule ^/<span class="o">(</span>.*<span class="o">)</span><span class="nv">$ </span>balancer://unicornservers%<span class="o">{</span>REQUEST_URI<span class="o">}</span> <span class="o">[</span>P,QSA,L<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  ProxyPass /uploads !
</span><span class='line'>  ProxyPass / balancer://unicornservers/
</span><span class='line'>  ProxyPassReverse / balancer://unicornservers/
</span><span class='line'>  ProxyPreserveHost on
</span><span class='line'>
</span><span class='line'>   &lt;Proxy *&gt;
</span><span class='line'>      Order deny,allow
</span><span class='line'>      Allow from all
</span><span class='line'>   &lt;/Proxy&gt;
</span><span class='line'>&lt;/VirtualHost&gt;
</span></code></pre></td></tr></table></div></figure>


<p>unicorn的配置文件在config/unicorn.rb，修改其中的 <code>listen="127.0.0.1:8080"</code>，然后重启apache，通过 <code>service gitlab start</code> 重启unicorn，访问一下gitlab.myserver.com吧，看到登录页面就说明大功告成啦。</p>

<h2>Q&amp;A</h2>

<h3>Q: 在装完gitolite后尝试<code>git clone git@localhost:gitolite-admin.git /tmp/gitolite-admin</code>遇到&#8217;remote hang-up unexpected&#8217;(貌似是这么写，意会。。。)</h3>

<p>A: 我在centos6.2上遇到过这个问题，其他发行版上不知道有没有这个问题，修改</p>

<p><code>sudo chmod 400 /home/git/.ssh/authorized_keys</code></p>

<p>可以修复这个问题。貌似是centos的安全策略造成ssh私钥不生效</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://github.com/gitlabhq/gitlabhq/blob/master/doc/install/installation.md">gitlab安装手册官方版</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Gitlab">gitlab手册archwiki版</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zsh自动补全]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2012/08/30/zshzi-dong-bu-quan/"/>
    <updated>2012-08-30T18:15:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2012/08/30/zshzi-dong-bu-quan</id>
    <content type="html"><![CDATA[<p>最近被zsh搞的够郁闷，Mark一下，好好翻翻文档，下周写出自己的自动补全脚本</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql 多实例启动]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2012/08/13/mysql-duo-shi-li-qi-dong/"/>
    <updated>2012-08-13T17:03:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2012/08/13/mysql-duo-shi-li-qi-dong</id>
    <content type="html"><![CDATA[<p>当开发与生产环境在同一台机器上，或需要在一台机器上部署多套测试环境时，往往需要同时起多个mysqld进程，最近帮测试搭环境的时候就碰到了这样的问题。</p>

<p>还是从安装mysql开始，下载tarball安装，</p>

<figure class='code'><figcaption><span>安装mysql  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>groupadd mysql
</span><span class='line'>useradd -g mysql mysql
</span><span class='line'>cmake . -DCMAKE_INSTALL_PREFIX<span class="o">=</span>/usr/local/mysql5.5.27/  -DMYSQL_DATADIR<span class="o">=</span>/data/mysql  -DWITH_INNOBASE_STORAGE_ENGINE<span class="o">=</span>1  -DMYSQL_TCP_PORT<span class="o">=</span>3306  -DMYSQL_UNIX_ADDR<span class="o">=</span>/var/run/mysql/mysql.sock -DWITH_DEBUG<span class="o">=</span>0
</span><span class='line'>make <span class="o">&amp;&amp;</span> make install
</span></code></pre></td></tr></table></div></figure>


<p>然后配置my.cnf，从support-files里面拷贝一个my-medium.cnf到/etc/my.cnf，里面mysqld配置段的内容基本是这个样子</p>

<figure class='code'><figcaption><span>my&#46;cnf配置 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[mysqld]
</span><span class='line'>port            = 3306
</span><span class='line'>socket          = /var/run/mysql/mysql.sock
</span><span class='line'>skip-external-locking
</span><span class='line'>key_buffer_size = 16M 
</span><span class='line'>max_allowed_packet = 1M
</span><span class='line'>table_open_cache = 64
</span><span class='line'>sort_buffer_size = 512K
</span><span class='line'>net_buffer_length = 8K
</span><span class='line'>read_buffer_size = 256K
</span><span class='line'>read_rnd_buffer_size = 512K
</span><span class='line'>myisam_sort_buffer_size = 8M</span></code></pre></td></tr></table></div></figure>


<p>默认mysqld只启动一个实例，既然我们的目的是启动多个mysqld实例，需要使用mysqld_multi。它是一个perl脚本，在使用之前，需要给my.cnf加一些料。</p>

<figure class='code'><figcaption><span>my&#46;cnf配置[增加mysqld_mutli] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># mysqld_multi会读取这个配置短的内容
</span><span class='line'>[mysqld_multi] 
</span><span class='line'>mysqld = /usr/local/mysql/bin/mysqld
</span><span class='line'>mysqladmin = /usr/local/mysql/bin/mysqladmin
</span><span class='line'>
</span><span class='line'># 第一个mysqld实例
</span><span class='line'>[mysqld1]
</span><span class='line'>port = 3306
</span><span class='line'>socket = /var/run/mysql/mysql1.sock
</span><span class='line'>datadir = /data/mysql1
</span><span class='line'>general-log-file = /var/log/mysql/error.log
</span><span class='line'>skip-external-locking
</span><span class='line'>key_buffer_size = 16M 
</span><span class='line'>max_allowed_packet = 1M
</span><span class='line'>table_open_cache = 64
</span><span class='line'>sort_buffer_size = 512K
</span><span class='line'>net_buffer_length = 8K
</span><span class='line'>read_buffer_size = 256K
</span><span class='line'>read_rnd_buffer_size = 512K
</span><span class='line'>myisam_sort_buffer_size = 8M
</span><span class='line'>log-bin=mysql-bin
</span><span class='line'>binlog_format=mixed
</span><span class='line'>server-id       = 1 
</span><span class='line'>user = mysql
</span><span class='line'>
</span><span class='line'># 第二个mysqld实例
</span><span class='line'>[mysqld2]
</span><span class='line'>port = 3307
</span><span class='line'>socket = /var/run/mysql/mysql2.sock
</span><span class='line'>datadir = /data/mysql2
</span><span class='line'>general-log-file = /var/log/mysql/error.log
</span><span class='line'>skip-external-locking
</span><span class='line'>key_buffer_size = 16M 
</span><span class='line'>max_allowed_packet = 1M
</span><span class='line'>table_open_cache = 64
</span><span class='line'>sort_buffer_size = 512K
</span><span class='line'>net_buffer_length = 8K
</span><span class='line'>read_buffer_size = 256K
</span><span class='line'>read_rnd_buffer_size = 512K
</span><span class='line'>myisam_sort_buffer_size = 8M
</span><span class='line'>log-bin=mysql-bin
</span><span class='line'>binlog_format=mixed
</span><span class='line'>server-id       = 1 
</span><span class='line'>user = mysql</span></code></pre></td></tr></table></div></figure>


<p>然后依配置创建mysql运行时文件夹并用mysql_install_db脚本初始化系统库</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p /data/mysql1 /data/mysql2 /var/log/mysql /var/run/mysql
</span><span class='line'>chgrp mysql /data/mysql* /var/log/mysql /var/run/mysql
</span><span class='line'>chown mysql /data/mysql* /var/log/mysql /var/run/mysql
</span><span class='line'>mysql_install_db --datadir<span class="o">=</span>/data/mysql1 --user<span class="o">=</span>mysql
</span><span class='line'>mysql_install_db --datadir<span class="o">=</span>/data/mysql2 --user<span class="o">=</span>mysql
</span><span class='line'>mysqld_multi start 1-2
</span></code></pre></td></tr></table></div></figure>


<p>最后一条命令其实已经将我们配置好的mysqld1和mysqld2启动了，这时候在进程表中应该能看到两个mysqld进程，试着用-P参数指定端口能分别访问在/data/mysql1和/data/mysql2下面的两个库，两者互不影响，正好能满足测试的要求。当然需要配置更多的实例也是可以的。</p>

<h2 id="mysql_extra">额外收获</h2>


<p>这次配置过程中还遇到一些额外的问题，记下来备忘。</p>

<ul>
<li>假如使用的是ubuntu(我目前的版本还是11.10)，默认会安装apparmor，这个软件是一个诡异的存在，它就像一个暗恋者，一直默默限制软件的访问权限，然后又不被系统待见，以至于我根本不知道它的存在。其实它是一个白名单，在/etc/apparmor.d/中指定了/usr/sbin/mysqld对各文件的访问权限，当我想将mysql的数据文件夹迁移到别的位置时，一直报这个错误</li>
</ul>


<p><code>Can't create test file /data/mysql1/littleboy.lower-test</code></p>

<p>而令人费解的就是mysql对这些文件夹是有读写权限的，其实只需要编辑/etc/apparmor.d/usr.sbin.mysqld文件，依样画葫芦地为文件夹加上rw权限就可以了</p>

<ul>
<li>给mysql设置远程访问权限，只需要下面这条sql</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="n">mysql</span><span class="p">.</span><span class="k">user</span> <span class="p">(</span> <span class="o">`</span><span class="k">Host</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="k">User</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">Password</span><span class="o">`</span> <span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span> <span class="s1">&#39;%&#39;</span><span class="p">,</span> <span class="s1">&#39;root&#39;</span><span class="p">,</span> <span class="n">PASSWORD</span><span class="p">(</span><span class="s1">&#39;123456&#39;</span><span class="p">)</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中最关键的就是那个&#8217;%&#8217;，表示通过任意host均可以访问到本机的mysql</p>

<ul>
<li>给mysql设置密码。</li>
</ul>


<p><code>mysqladmin -u root -h 127.0.0.1 password 123456</code></p>

<p>上面那种是在不登录mysql的情况下修改密码，还有两种可以通过改表的方式。见<a href="#mysql_refer">MySQL设置密码的三种方法</a></p>

<p>修改过密码以后，mysqld_multi可能就不能通过默认配置来结束mysqld进程了，这时候需要在配置里加上用户名和密码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[mysqld_multi]
</span><span class='line'>mysqld = /usr/local/mysql/bin/mysqld
</span><span class='line'>mysqladmin = /usr/local/mysql/bin/mysqladmin
</span><span class='line'>user = root
</span><span class='line'>password = 123456</span></code></pre></td></tr></table></div></figure>


<p>当然这样可能会有一些安全隐患，因为my.cnf是可见的。假如是多人使用，可以将password这行去掉，每次操作mysqld_multi的时候，在后面加上<code>--password=123456</code>参数就行了</p>

<h2 id="mysql_refer">参考资料</h2>


<ul>
<li><a href="http://www.neocanable.com/error-for-mysql-multi-and-mysql-install-db/">解决apparmor引起的报错1</a></li>
<li><a href="http://ubuntuforums.org/showthread.php?t=1861136">解决apparmor引起的报错2</a></li>
<li><a href="http://blog.csdn.net/magicbreaker/article/details/2392764">MySQL设置密码的三种方法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[竞技的乐趣]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2012/07/29/jing-ji-de-le-qu/"/>
    <updated>2012-07-29T19:06:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2012/07/29/jing-ji-de-le-qu</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[redis hashes 实践]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2012/07/19/redis-hashes-shi-jian/"/>
    <updated>2012-07-19T14:27:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2012/07/19/redis-hashes-shi-jian</id>
    <content type="html"><![CDATA[<p>这是项目中遇到的一个问题，mysql的用户表做了分表，主键可以通过取模来读取分表信息，但是往往在注册的时候需要检测邮箱的唯一性，这个email就无法定位到分表了，之前的做法是用另一张表emailtoid对邮箱和id做了一个映射，现在想将该表迁移到redis上。就想测试一下redis对hashes类型的处理性能了。</p>

<h3>方案一(multi)：</h3>

<p>只使用一个key，所有的email都是这个key的field，id是value</p>

<h3>方案二(hashed key)：</h3>

<p>使用多个key，取email的md5值前两位作为key，email值仍为field，id是value，这些都不变</p>

<h3>附加测试(single)：</h3>

<p>给redis设置一个hashes，只有一个field和value，反复读写，用于比较redis在hashes长度变化时性能的升降幅度</p>

<iframe id="highchart" src="http://sailxjx.github.com/demo/redis-hashes-test-chart.html" style="width: 100%; height: 280px;"></iframe>


<p>测试对redis进行1000000次读写，使用本地loop，没有网络延迟，没有事务，结果基本没有多大意外。总结成三点：</p>

<ol>
<li>redis的读写速度基本持平</li>
<li>hashes长度增加对于redis的读写速度影响很小（官网也注明了hget和hset的时间复杂度均为O(1)）</li>
<li>储存在多个key中因为需要预先对field的值进行hash，整体的效率不如单个key</li>
</ol>


<p>测试结果见图。</p>

<p>整个用户表数据在600w条左右，只存email,id对的话占用内存在60m左右，使用单个key来保存redis数据应该是足够满足性能的需求了。</p>

<p><a href="http://sailxjx.github.com/blog/raw/redis_hash_test.php">测试文件</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[体验gollum]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2012/07/12/ti-yan-gollum/"/>
    <updated>2012-07-12T18:07:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2012/07/12/ti-yan-gollum</id>
    <content type="html"><![CDATA[<p>gollum是一个轻量级的wiki系统，使用git作为版本管理和跟踪工具，支持markdown，mediawiki，texttile等多种语法，由github开发并且已经投入到githubwiki的应用中。</p>

<ul>
<li><a href="#gollum_install">安装</a></li>
<li><a href="#gollum_deploy">部署</a></li>
<li><a href="#gollum_bug">已发现的bug</a></li>
<li><a href="#gollum_refer">参考资料</a></li>
</ul>


<h2 id="gollum_install">安装</h2>


<p>gollum与指环王中某个屌丝同名，不知道开发人员的命名灵感是不是来自那里，我们知道，程序员老是喜欢用一些稀奇古怪的东西来给自己的软件命名，像python（莽蛇），octopress（章鱼）等等，搞得好像人人都是动物保护主义者一样～</p>

<p>根据<a href="https://github.com/github/gollum">github主页</a>的说明，gollum的安装非常简单，一条命令解决</p>

<figure class='code'><figcaption><span>安装gollum  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="o">[</span>sudo<span class="o">]</span> gem install gollum
</span></code></pre></td></tr></table></div></figure>


<p>假如你喜欢追新，觉得这样安装的版本太老，想直接上HEAD的话，clone一个镜像使用<code>bundle install</code>安装好依赖之后，其bin文件夹下面的gollum就直接可以执行了，绝对绿色环保无污染。</p>

<p>现在就来体验一下gollum带来的不同与其他wiki的小清新感觉吧，在主目录下使用以下命令</p>

<figure class='code'><figcaption><span>执行gollum  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir gowiki
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>gowiki
</span><span class='line'><span class="nv">$ </span>git init
</span><span class='line'><span class="nv">$ </span>gollum
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://sailxjx.github.com/blog/images/u/gollum-exec-info.png"><img class="right" src="http://sailxjx.github.com/blog/images/u/gollum-exec-info.png" width="450" height="70" title="&#34;gollum-exec-info&#34;" alt="&#34;gollum-exec-info&#34;"></a>
看到右图就说明gollum已经正确的运行了，gollum默认监听4567端口，并且提供了一个可交互的前端，这个时候用户可以通过浏览器打开<a href="http://localhost:4567">http://localhost:4567</a>来看一下gollum了</p>

<p><a href="http://sailxjx.github.com/blog/images/u/gollum-frontend.png"><img class="right" src="http://sailxjx.github.com/blog/images/u/gollum-frontend.png" width="450" height="115" title="&#34;gollum-frontend&#34;" alt="&#34;gollum-frontend&#34;"></a></p>

<p>界面实在是足够简洁，提供的几个button实现了wiki的基本功能增删改查，还能查看历史页面，而且还有一套开放的用户系统，name和email由git的使用者决定，头像则由gravatar生成。</p>

<p>除了通过页面编辑wiki以外，gollum还支持直接由git提交版本来更新页面。由于我们gollum默认读取master分支，而我们正checkout在master上，不方便其他人的编辑，所以我们暂时新建一个demo分支来避免冲突。</p>

<figure class='code'><figcaption><span>用git来写wiki  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git branch demo
</span><span class='line'><span class="nv">$ </span>git checkout demo
</span><span class='line'><span class="nv">$ </span>mkdir ../gowiki2 <span class="o">&amp;&amp;</span> <span class="nb">cd</span> ../gowiki2
</span><span class='line'><span class="nv">$ </span>git init <span class="o">&amp;&amp;</span> git remote add origin ../gowiki
</span><span class='line'><span class="nv">$ </span>git pull
</span></code></pre></td></tr></table></div></figure>


<p>现在gowiki2中应该有了之前编辑过的几个页面，修改以后push到origin的master，就可以在wiki中看到刚刚的更新了。</p>

<!--more-->




<h2 id="gollum_deploy">部署</h2>


<p>虽然gollum提供了一个命令行工具监听端口来提供web服务，但是没有daemon选项，也没有容错机制，何况想来也没有多少人会使用4567端口来访问webserver。那有没有办法将gollum托管给我们的web服务器呢，答案是肯定的，下面以apache为例。</p>

<p>gollum由ruby写成，所以首先需要安装<a href="http://www.modrails.com">passenger(mod_rails)</a>模块，这个模块的安装在<a href="http://www.modrails.com/install.html">官网</a>上有详细的介绍，与其他apache模块的安装大同小异，下面主要介绍一下vhost的配置。</p>

<p>首先进入gollum的安装路径，不知道的可以用下面的命令找一下</p>

<figure class='code'><figcaption><span>查找gollum路径  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem which gollum
</span><span class='line'>/usr/local/ruby/lib/ruby/gems/1.9.1/gems/gollum-2.0.0/lib/gollum.rb
</span></code></pre></td></tr></table></div></figure>


<p>gollum的前端app在gollum/frontend/public/下(将这个uri跟在上面找出来的路径下就行了)，下面将用<code>frontpath=/usr/local/ruby/lib/ruby/gems/1.9.1/gems/gollum-2.0.0/lib/gollum/frontend/</code>来替代，然后配置vhost</p>

<figure class='code'><figcaption><span>apache的virtual-hosts配置  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;VirtualHost *&gt;
</span><span class='line'>    ServerName www.gollum.local.com  <span class="c">#替换成自己的域名</span>
</span><span class='line'>    DocumentRoot <span class="k">${</span><span class="nv">frontpath</span><span class="k">}</span>public/ <span class="c">#替换成本地路径</span>
</span><span class='line'>&lt;/VirtualHost&gt;
</span></code></pre></td></tr></table></div></figure>


<p>然后在${frontpath}(同上，真实路径)下新建一个文件config.ru，写入下面的内容</p>

<figure class='code'><figcaption><span>config.ru  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/local/bin/env ruby</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;gollum/frontend/app&#39;</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;which git&quot;</span><span class="p">)</span> <span class="ow">or</span> <span class="k">raise</span> <span class="s2">&quot;Looks like I can&#39;t find the git CLI in your path.</span><span class="se">\n</span><span class="s2">Your path is: </span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;PATH&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">gollum_path</span> <span class="o">=</span> <span class="s1">&#39;/home/{user}/gowiki&#39;</span> <span class="c1">#这里的路径替换成实际想存放wiki文档的git目录</span>
</span><span class='line'><span class="n">disable</span> <span class="ss">:run</span>
</span><span class='line'><span class="n">configure</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:staging</span><span class="p">,</span> <span class="ss">:production</span> <span class="k">do</span>
</span><span class='line'> <span class="n">set</span> <span class="ss">:raise_errors</span><span class="p">,</span> <span class="kp">true</span>
</span><span class='line'> <span class="n">set</span> <span class="ss">:show_exceptions</span><span class="p">,</span> <span class="kp">true</span>
</span><span class='line'> <span class="n">set</span> <span class="ss">:dump_errors</span><span class="p">,</span> <span class="kp">true</span>
</span><span class='line'> <span class="n">set</span> <span class="ss">:clean_trace</span><span class="p">,</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="vg">$path</span> <span class="o">=</span> <span class="n">gollum_path</span>
</span><span class='line'><span class="no">Precious</span><span class="o">::</span><span class="no">App</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="ss">:gollum_path</span><span class="p">,</span> <span class="n">gollum_path</span><span class="p">)</span>
</span><span class='line'><span class="no">Precious</span><span class="o">::</span><span class="no">App</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="ss">:wiki_options</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'><span class="n">run</span> <span class="no">Precious</span><span class="o">::</span><span class="no">App</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了使/home/{user}/gowiki目录具有写权限，可以将这个目录的权限这是设为777或者让passenger进程的用户组设为user，修改httpd.conf增加一行<code>PassengerDefaultUser user</code>，这样我们通过web端更新wiki的时候就不会报权限问题了。</p>

<p>现在重启apache，然后访问www.gollum.local.com，结果就与上面看到的页面一模一样啦～～。</p>

<h2 id="gollum_bug">已发现的bug</h2>


<p>gollum绑定的grit库中存在一个关于编码的错误[<a href="https://github.com/github/gollum/issues/147">issue</a>],当提交的文本中包含unicode字符时会导致一个fetal error。在grit2.5.0中修复了这个错误，所以在bundle之前需要先将grit版本设置为2.5.0。gollum最近的两个版本中需要修改的地方还不太一样，晕了～。输入<code>gollum --version</code>看一下版本，假如是2.0.0(gem安装的版本)，则修改gollum.gemspec，若是2.1.0(目前的HEAD版本)，则修改Gemfile.lock。将其中的grit版本改为2.5.0即可。</p>

<h2 id="gollum_refer">参考资料</h2>


<ul>
<li><a href="https://github.com/github/gollum/blob/master/README.md">README</a></li>
<li><a href="https://github.com/tecnh/gollum/wiki/Gollum-and-Passenger">Gollum and Passenger</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[thunderbird and davmail]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2012/06/28/thunderbird-and-davmail/"/>
    <updated>2012-06-28T12:23:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2012/06/28/thunderbird-and-davmail</id>
    <content type="html"><![CDATA[<p>邮件客户端之间的竞争在当今的软件貌似一直处在一个打酱油的位置（就像opera看浏览器之争），毕竟，web端的邮件体验是越做越完美了，传统的客户端不减减肥的话很难再在用户那边分到一杯羹。</p>

<p>不过，在办公领域客户端还是能占有一席之地的，毕竟云端容量有限，而且实时性也是个问题。公司使用内网的ms exchange，那么gmail之类的web端就不考虑了，况且几千封邮件的索引查找还是靠客户端比较靠谱。</p>

<p>比较了一圈linux下的客户端，evolution用的时间最长，但是对html样式的支持不是太好，某些表格粘贴进去排版就乱了。正好ubuntu11.10以后就默认安装了thunderbird，试用以后感觉也不错，写篇备忘，主要是记录不同协议下的配置。</p>

<p><a href="http://sailxjx.github.com/blog/images/u/thunderbird-main-furry.png"><img class="right" src="http://sailxjx.github.com/blog/images/u/thunderbird-main-furry.png" width="200" height="161" title="&#34;thunderbird-main-furry&#34;" alt="&#34;thunderbird-main-furry&#34;"></a>
thunderbird诞生于mozilla的开源项目，有个叫firefox的高帅富兄弟，所以从菜单到细节处处都力争向高帅富靠拢，于是我们就看到了这个长得酷似浏览器的email客户端&#8211;多标签切换，附加组件。。。不幸的是，最近<a href="http://tech.sina.com.cn/s/2012-07-07/10247360817.shtml">mozilla宣布不再为thunderbird开发新功能</a>，看来以后还是得靠自己撸啊。</p>

<p>添加账户很简单，编辑-账户设置-添加账户，输入用户名邮箱密码以后会自动在mozilla在线数据库中寻找适合的配置，像gmail,hotmail.163之流的基本都不需要额外的配置，直接确认就行。这里主要介绍一下exchange服务的配置。</p>

<p>默认情况下没有安装exchange的支持，在工具-附加组件里搜索exchange安装一个&#8221;Provider for Microsoft Exchange&#8221;的插件，再回到账户配置中选择手动配置，就有相应exchange的接收协议选项了，然后手动填写域名用户名密码，确定以后就可以开始接收邮件了。</p>

<p>接收邮件，对，我只提到收邮件。这个插件只提供了exchange同步接收的功能，配置SMTP服务器时遇到了问题，无论尝试哪种验证方式，连接远程服务器时都会报错，网上搜罗了一下相关的帖子也没有找到有效的解决方案。但exchange服务确是可以通过https/ssl访问的，无奈只能采用曲线救国的方式，就是下面要介绍的<a href="http://davmail.sourceforge.net/">davmail</a>。</p>

<p>根据官网上的介绍，davmail是一个通用的POP/IMAP/SMTP/Caldav/Carddav/LDAP交换接口，允许用户用任何客户端链接到exchange服务器。其他的鸟文就不做解释了，这不是重点，重点是，这玩意儿管用。ubuntu用户下可以在sourceforge下载deb包安装，<a href="http://sourceforge.net/projects/davmail/files/latest/download?source=files">下载地址</a>。</p>

<p><a href="http://sailxjx.github.com/blog/images/u/davmail-ui.png"><img class="right" src="http://sailxjx.github.com/blog/images/u/davmail-ui.png" width="350" height="206" title="&#34;davmail-ui&#34;" alt="&#34;davmail-ui&#34;"></a>
安装完成后，davmail提供了一个简陋的UI界面，不过对于配置来说已经足够了，在owaurl一栏填入域中使用的exchange owa地址，类似https://exchange.domain.com/owa的，不确定是否可用可以在浏览器里面直接访问一下试试。下面的协议端口都用默认的，save一下就ok。</p>

<p>现在回到thunderbird，修改账户设置-发送SMTP服务器-添加或编辑，服务器名称填localhost，端口1025，选择密码验证，填写用户名，保存，现在试一试，应该可以正常的收发邮件了。</p>

<p>davmail其实是在本地搭建了一个邮件收发服务器，用户与远程服务器的通信都通过davmail的代理，简化了不同平台的配置。当然软件的功能远远不止这些，这里只是为了解决thunderbird与exchange连接的问题。假如thunderbird插件能直接支持exchange的收发，那就更好了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitpage and octopress]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2012/06/20/gitpage-and-octopress/"/>
    <updated>2012-06-20T20:45:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2012/06/20/gitpage-and-octopress</id>
    <content type="html"><![CDATA[<p>花了一天时间（上班时不务正业。。。），总算把gitpage主页和这个blog搭起来了</p>

<p>写一些备忘，免得以后忘了。。。</p>

<ul>
<li><a href="#gitpage">gitpage</a></li>
<li><a href="#octopress">octopress</a></li>
<li><a href="#scss">scss</a></li>
<li><a href="#markdown">markdown</a></li>
</ul>


<h2 id="gitpage">gitpage</h2>


<p>github给用户提供了一个非常cool的方式来搭建自己的主页，简单几步，就能完成网站的部署。</p>

<h4>1.建立分支</h4>

<p>github给每个用户提供了一个形似{user}.github.com的二级域名，只要首先在自己的帐号下建立名为{user}.github.com的分支，就可以通过git来维护自己的主页啦。</p>

<h4>2.clone和commit</h4>

<p>分支建立好之后，将{user}.github.com分支clone到本地，以方便编辑。</p>

<figure class='code'><figcaption><span>本地gitpage  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone git@github.com:<span class="o">{</span>user<span class="o">}</span>/<span class="o">{</span>user<span class="o">}</span>.github.com <span class="o">{</span>your <span class="nb">local </span>dir<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后就是建立自己的index啦，gitpage使用纯静态的方式来管理页面，可以通过本地程序预先将这些静态页面生成好再丢给github嘛。</p>

<figure class='code'><figcaption><span>编辑提交首页  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;hello git-page&quot;</span> &gt; index.html
</span><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -am <span class="s1">&#39;init&#39;</span>
</span><span class='line'><span class="nv">$ </span>git push origin master
</span></code></pre></td></tr></table></div></figure>


<p>提交以后可以在github的通知中心和邮箱中收到页面建立的通知。第一次提交可能需要10多分钟才能看到效果，以后的提交基本都是立即生效的。</p>

<p>现在访问<a href="http://sailxjx.github.com">{user}.github.com</a>看一下效果吧。</p>

<h4>3.建立项目页面</h4>

<p>除了首页，github还为用户的每一个项目提供了一个展示的平台，只需要在需要展示的项目下建立一个名为gh-pages的分支并push到github，剩余的操作就和首页如出一辙了。</p>

<figure class='code'><figcaption><span>项目主页  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> <span class="o">{</span>project<span class="o">}</span>
</span><span class='line'><span class="nv">$ </span>git branch gh-pages
</span><span class='line'><span class="nv">$ </span>git checkout gh-pages
</span><span class='line'><span class="nv">$ </span>git push origin gh-pages
</span></code></pre></td></tr></table></div></figure>


<p>提交以后会在github产生一个类似{user}.github.com/{project}的域名，访问的其实是<a href="https://github.com/sailxjx/blog/tree/gh-pages">gh-pages</a>分支下的index文件，这个<a href="http://sailxjx.github.com/blog">blog</a>就是托管给gitpage的项目页面的。</p>

<h4>4.使用gitpage模板</h4>

<p>github提供了一种最快捷的方式来建立pages</p>

<ul>
<li>进入你的<a href="https://github.com/{user}/{project}/admin">项目管理页</a></li>
<li>点击右下角的<a href="https://github.com/{user}/{project}/generated_pages/new">Automatic Page Generator</a></li>
<li>编辑内容并选择自己喜欢的模板</li>
<li>done</li>
</ul>


<p>然后就可以将gitpage clone到本地进行编辑并提交了</p>

<figure class='code'><figcaption><span>编辑项目主页  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> <span class="o">{</span>project<span class="o">}</span>
</span><span class='line'><span class="nv">$ </span>git fetch origin
</span><span class='line'><span class="nv">$ </span>git checkout gh-pages
</span></code></pre></td></tr></table></div></figure>




<!--more-->




<h2 id="octopress">octopress</h2>


<p><a href="http://octopress.org/">octopress</a>是基于<a href="http://github.com/mojombo/jekyll">Jekyll</a>的一个博客框架。所有的博文都用静态页面保存，不仅能很好的和gitpage集成，还有很高的可配置性，对于喜欢个性化的码农来说简直就是神器丫～</p>

<p>言归正传，安装octopress，必须保证系统中已经安装了git,ruby[1.9.2以上]。然后从github复制一份octopress的拷贝</p>

<figure class='code'><figcaption><span>安装octopress  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>octopress
</span><span class='line'><span class="nv">$ </span>gem install bundler
</span><span class='line'><span class="nv">$ </span>bundle install <span class="c">#安装依赖关系，在网络不好的情况下，这一步会相当相当的耗时，并且常有失败的情况。请一定要耐心，淡定。。。</span>
</span><span class='line'><span class="nv">$ </span>rake install <span class="c">#安装默认主题，以后可以用别的命令更新octopress的主题。不过官方的主题已经足够简洁大气了，遇到其他心仪的主题之前，我恐怕不会再去折腾这些了(&gt;_&lt;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>ok，安装结束，除了蛋疼的网络等待，整个安装过程还是比较简单顺利的，下面进入配置阶段</p>

<p>在根目录下的配置文件有四个，_config.yml,config.rb,config.ru,Rakefile。其中Rakefile实现了部署更新的所有操作，一般情况下不需要修改。理想状态下只需要修改_config.yml文件就可以了。</p>

<figure class='code'><figcaption><span>_config.yml中与用户相关的配置项 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span>                <span class="c1"># 需要部署的博客站链接</span>
</span><span class='line'><span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span>              <span class="c1"># 又短又二的博客标题，如XX的窝，孤独的根号三等等</span>
</span><span class='line'><span class="l-Scalar-Plain">subtitle</span><span class="p-Indicator">:</span>           <span class="c1"># 小标题，会显示在网站头部，用来辩解标题其实没有那么二</span>
</span><span class='line'><span class="l-Scalar-Plain">author</span><span class="p-Indicator">:</span>             <span class="c1"># 用户名，说明到底是谁写出了这么二的标题</span>
</span><span class='line'><span class="l-Scalar-Plain">simple_search</span><span class="p-Indicator">:</span>      <span class="c1"># 站内搜索的工具，例如http://google.com/search，当然也可以用一样二的baidu</span>
</span><span class='line'><span class="l-Scalar-Plain">description</span><span class="p-Indicator">:</span>        <span class="c1"># 网站说明，会加在meta中，给搜索引擎看的东东</span>
</span><span class='line'><span class="l-Scalar-Plain">subscribe_rss</span><span class="p-Indicator">:</span>      <span class="c1"># rss文件路径，默认atom.xml</span>
</span><span class='line'><span class="l-Scalar-Plain">subscribe_email</span><span class="p-Indicator">:</span>    <span class="c1"># 联系邮箱，这里填写的内容会直接带入页首的mailto链接中，如&quot;mailto: sailxjx#gmail.com?subject=greeting&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">email</span><span class="p-Indicator">:</span>              <span class="c1"># 这里就是填写完整的邮箱地址啦，显示在页脚</span>
</span><span class='line'><span class="l-Scalar-Plain">root</span>                <span class="c1"># 假如博客不是发布在根目录下，而是发布到类似domain.com/blog的二级目录，这里要设置成二级目录的名字(blog)。</span>
</span></code></pre></td></tr></table></div></figure>


<p>在下面还有一些第三方网站接入的配置，包括google，twitter，github，facebook，disqus等等。大部分都只需要填写注册的用户名和是否启用就行了。这里值得一提的是disqus，当填写了disqus用户名之后，在博文下面会加载disqus的回复功能，正好弥补了octopress缺少动态内容的缺陷。</p>

<p>在默认配置下，可以很轻松的将博客部署到主站下面，在这里我将octopress部署在blog二级目录下面(gitpage只给我提供了一个域名，被博客全占了，多亏啊～～～)，需要修改_config.yml和config.rb中的对应目录配置</p>

<figure class='code'><figcaption><span>_config.yml && config.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1">## _config.yml 全站配置</span>
</span><span class='line'><span class="n">url</span><span class="p">:</span>    <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">sailxjx</span><span class="o">.</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">blog</span>
</span><span class='line'><span class="n">root</span><span class="p">:</span>   <span class="sr">/blog</span>
</span><span class='line'><span class="sr">## config.rb 这个文件主要影响一些静态文件的加载</span>
</span><span class='line'><span class="sr">http_path = &quot;/</span><span class="n">blog</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">http_images_path = &quot;</span><span class="o">/</span><span class="n">blog</span><span class="o">/</span><span class="n">images</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">http_fonts_path = &quot;</span><span class="o">/</span><span class="n">blog</span><span class="o">/</span><span class="n">fonts</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在开始写第一篇博客，只需要简单一个命令</p>

<figure class='code'><figcaption><span>new_post  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake new_post<span class="o">[</span><span class="s1">&#39;first blog&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>这条命令会在source/_posts中生成一个名为YYYY-MM-DD-first-blog.markdown文件，惊喜的是，假如使用中文作为博客标题，这里的文件名（包括deploy后的url）会自动转成拼音。</p>

<p>打开_posts中的文件，这是一个以<a href="http://daringfireball.net/projects/markdown/">markdown</a>语法写成的文档，具体语法下面再介绍，先看一下头部有用的信息</p>

<figure class='code'><figcaption><span>post设置 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>layout: post
</span><span class='line'>title: "gitpage and octopress"                          //标题
</span><span class='line'>date: 2012-06-20 20:45                                  //生成的时间，会作为发布时间显示在页底
</span><span class='line'>comments: true                                          //设置成false可以关闭评论
</span><span class='line'>categories: [gitpage, octopress, scss, ruby, markdown]  //博客分类，这些tag可以用来做筛选
</span><span class='line'>author: Your Name                                       //假如有多个作者，可以添加在这里</span></code></pre></td></tr></table></div></figure>


<p>完成一篇博客以后，使用下面的命令可以将博客生成或者发布出去</p>

<figure class='code'><figcaption><span>发布博客  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake setup_github_pages   //这个命令会让你填写可读写的github分支作为远程仓库，然后在_deploy文件夹中生成一个gh-pages分支
</span><span class='line'><span class="nv">$ </span>rake generate             //在public文件夹中生成静态文件，可以在本地配置一个服务器指向这个文件夹预览博客发布后的样子
</span><span class='line'><span class="nv">$ </span>rake deploy               //在deploy中生成静态文件，然后会自动调用git push将博客发布到github上
</span></code></pre></td></tr></table></div></figure>


<p>写到这里基本已经完成了基本博客的发布，有兴趣可以学一学ruby，玩出自己的花样来。</p>

<h2 id="scss">scss</h2>


<h2 id="markdown">markdown</h2>


<p>to be continue&#8230;</p>
]]></content>
  </entry>
  
</feed>
