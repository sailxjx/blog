<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[CodeBean]]></title>
  <link href="http://sailxjx.github.com/blog/atom.xml" rel="self"/>
  <link href="http://sailxjx.github.com/blog/"/>
  <updated>2013-03-13T17:17:45+08:00</updated>
  <id>http://sailxjx.github.com/blog/</id>
  <author>
    <name><![CDATA[tristan]]></name>
    <email><![CDATA[sailxjx@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[css transition &amp; transform &amp; animation]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/03/12/css-transition-and-transform-and-animation/"/>
    <updated>2013-03-12T16:41:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/03/12/css-transition-and-transform-and-animation</id>
    <content type="html"><![CDATA[<p><link rel="stylesheet" href="http://sailxjx.github.com/blog/u/css/trans.css"></p>

<p>小时候没花功夫学英语（悔之莫及啊~），以至于经常将css中的transition和transform搞混，再加上一个强大而复杂的animation，就更是一头雾水了，今天整理一下，做个笔记。</p>

<ul>
<li><code>transition</code> 将style的变化用动画的方式来过渡</li>
<li><code>transform</code> style的一些高级变换，像拉伸，旋转，缩放之类</li>
<li><code>animation</code> css自定义动画，功能强大，并且由于是浏览器内置，流畅度会比javascript动画高</li>
</ul>


<p>注意咯，以上css属性都不支持IE浏览器，其中，IE9以上支持<code>transform</code>，需要加&#8217;-ms-&#8216;前缀。</p>

<h2>transition</h2>

<p>transition可以在同一dom元素的两种不同样式之间添加平滑的动画切换效果，下面是一个简单的例子，可以看出在没transition和有transition的情况下的区别。</p>

<p>
<div class="color-transition color-demo">color<br/>transition</div>
<div class="color-notransition color-demo">color<br/>notransition</div>
</p>


<p>transition是一种比较好的用户体验，不会让用户对于style的切换感到突兀，要实现上面的效果，只需要在css中添加一行代码：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.color-transition</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">transition</span><span class="o">:</span> <span class="k">background</span> <span class="m">0.7s</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">transition</span><span class="o">:</span> <span class="k">background</span> <span class="m">0.7s</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">transition</span><span class="o">:</span> <span class="k">background</span> <span class="m">0.7s</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">transition</span><span class="o">:</span> <span class="k">background</span> <span class="m">0.7s</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可能在心里暗暗骂我SB（嗯，对的，我也讨厌不会数数的淫），上面明明有四行代码，这个也没办法啦，谁让各个浏览器对于css3标准的支持都不一样，添加不同的prefix只是为了兼容一些较低版本的浏览器，在目前的主流中，一行transition就可以走遍天下。（当然，IE是没救了）。</p>

<p>transition中支持的参数是比较容易理解的，第一个是css中的属性(默认的all可以决定所有style的切换都显示成动画)，第一个表示过渡时间，还有第三个参数表示切换的动画类型，有ease(类似正弦曲线的先慢后快再慢)，linear(匀速)等等，第四个参数表示渐变开始的延时。而且可以用逗号分割多个属性，不嫌麻烦的话可以将它们都写上，就像下面这样。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.color-ratate-transition</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">transition</span><span class="o">:</span> <span class="k">background</span> <span class="m">0.7s</span> <span class="n">ease</span><span class="o">-</span><span class="n">in</span><span class="o">-</span><span class="n">out</span><span class="o">,</span> <span class="n">rotate</span> <span class="m">3s</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面既然已经用到了rotate，这是一个transform属性，下面就解释一下transform。</p>

<h2>transform</h2>

<p>transform是对dom样式的一种变性，一般的样式中，我们可以定义宽高位置，甚至包括圆角。但是要实现旋转，缩放甚至一些3D效果，就需要用到transform了。下面还是先看一个例子：</p>

<p>
<div class="transform-rotate transform-demo">rotate</div>
<div class="transform-scale transform-demo">scale</div>
</p>


<p>rotate可以在很多场景中得到应用，一个比较取巧的方法是用来做输入框的提示箭头，像下面这样.</p>

<p>
    <div class="rotate-arrow"></div>
    <div class="input-tip">your messages</div>
</p>


<p>而scale的作用是在不调整宽高的情况下实现放大与缩小，灵活利用，也能实现一些有趣的功能，比如放大镜，异形字体等。</p>

<p>transform的语法是非常简单的，它只有一个参数，但是形式的是很多变的，详细的列表可见于<a href="http://www.w3schools.com/cssref/css3_pr_transform.asp">w3school的页面</a>。</p>

<h2>animation</h2>

<p>下面是重点要介绍的animation了。用css做动画是意见非常geek的事情，相比于js动画，css动画需要更少的代码以及更直观的语法。在做css动画之前，需要先了解keyframes属性，这是css3中新增的一个规则类，实现的方法类似于一些语言中的mixin，而在设计理念上又类似flash中的关键帧，在keyframes中需要定义几个关键帧中dom元素的样式，这几个关键帧可以用百分比来表示，也可以用from,to等一些词汇来表示起点和终点。下面的keyframes表示让一个元素从左向右移动，并加上一些旋转效果。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@keyframes</span> <span class="nt">move</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">0</span><span class="o">%,</span> <span class="nt">100</span><span class="o">%</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">left</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
</span><span class='line'>    <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
</span><span class='line'>    <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
</span><span class='line'>    <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">transition</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">50</span><span class="o">%</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">left</span><span class="o">:</span> <span class="m">300px</span><span class="p">;</span>
</span><span class='line'>    <span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">180</span><span class="n">deg</span><span class="p">);</span>
</span><span class='line'>    <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">180</span><span class="n">deg</span><span class="p">);</span>
</span><span class='line'>    <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">180</span><span class="n">deg</span><span class="p">);</span>
</span><span class='line'>    <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">transition</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">180</span><span class="n">deg</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>keyframes是一个预定义的方法，将它与animation结合，就能实现有趣的css动画，例如上面名叫move的keyframes，放到下面的代码中，就可以看到完整的动画演示了。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.animate-move</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">:</span> <span class="n">move</span> <span class="m">5s</span> <span class="n">infinite</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">animation</span><span class="o">:</span> <span class="n">move</span> <span class="m">5s</span> <span class="n">infinite</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">animation</span><span class="o">:</span> <span class="n">move</span> <span class="m">5s</span> <span class="n">infinite</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">animation</span><span class="o">:</span> <span class="n">move</span> <span class="m">5s</span> <span class="n">infinite</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
    <div class="animate-move animate-demo">animate<br/>move</div>
</p>


<p>上面的例子中包含了animation中的三个参数：keyframes方法名，一次动画持续时间，循环次数。其中无限循环用infinite表示。animation还包含不少有用的参数，比如延迟时间，动画效果等等，在<a href="http://www.w3schools.com/cssref/css3_pr_animation.asp">w3school手册</a>中有详细的记载。</p>

<p>国内音乐网站<a href="http://jing.fm/">jing.fm</a>在交互方面一直很前卫，播放音乐时，专辑封面会像真的在cd中一样打转，模仿一种收听cd的感觉。这个效果就是用animation实现的，下面我们也可以山寨一个玩玩。</p>

<h3>第一步，打磨圆角</h3>

<p>首先需要的是将正方形的专辑封面变成cd的形状，也就是圆形啦。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.album</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">300px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">300px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">150px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>专辑封面我们选择300像素的正方形，然后使用150像素的圆角，可以正好变成一个正圆形。</p>

<h3>第二步，keyframes</h3>

<p>下面就要定义我们的keyframes了，这个动画很简单，在开头设置成rotate(0)，结尾设置成rotate(360deg)。这样我们比较容易计算循环的时间。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@keyframes</span> <span class="nt">dj</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">0</span><span class="o">%</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
</span><span class='line'>    <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
</span><span class='line'>    <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
</span><span class='line'>    <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">transition</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">100</span><span class="o">%</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">360</span><span class="n">deg</span><span class="p">);</span>
</span><span class='line'>    <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">360</span><span class="n">deg</span><span class="p">);</span>
</span><span class='line'>    <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">360</span><span class="n">deg</span><span class="p">);</span>
</span><span class='line'>    <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">transition</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">360</span><span class="n">deg</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>第三步，转起来</h3>

<p>将我们的dj keyframes加入animation，选择匀速(linear)，下面就看效果吧。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.album</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">300px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">300px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">150px</span><span class="p">;</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">:</span> <span class="n">dj</span> <span class="m">10s</span> <span class="n">infinite</span> <span class="n">linear</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">animation</span><span class="o">:</span> <span class="n">dj</span> <span class="m">10s</span> <span class="n">infinite</span> <span class="n">linear</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">animation</span><span class="o">:</span> <span class="n">dj</span> <span class="m">10s</span> <span class="n">infinite</span> <span class="n">linear</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">animation</span><span class="o">:</span> <span class="n">dj</span> <span class="m">10s</span> <span class="n">infinite</span> <span class="n">linear</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
    <img src="http://sailxjx.github.com/blog/images/u/album-milk.jpg" alt="album-milk" class="album">
</p>


<h2>后记</h2>

<p>上面的效果没有用到一行js。css真是将技术与艺术完美结合的产物，这些动画无疑需要激发人无限的创意，随着浏览器的支持度提高，在web上的应用也会越来越广，应用的明天会非常美好。</p>

<h2>代码</h2>

<p>在自己的项目中，我会使用scss来书写css，省却了很多重复的工作。这个页面的scss文件放到这里保存一下。</p>

<p><a href="http://sailxjx.github.com/blog/u/scss/trans.scss">trans.scss</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[程序猿与脏话]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/03/08/cheng-xu-yuan-yu-zang-hua/"/>
    <updated>2013-03-08T09:51:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/03/08/cheng-xu-yuan-yu-zang-hua</id>
    <content type="html"><![CDATA[<p>俗话说林子大了什么鸟都有，在程序猿这个群体中，脏话和吹牛是两大显著特征。脏话的种类也是花样百出，下面就来归归类</p>

<h3>第一类，加强语气型</h3>

<p>常见的有<code>damn</code>,<code>f**k</code>，<code>shit</code>等等，往往后面还跟着些动词与形容词，像<code>stupid</code>啦，<code>idiot</code>啦，没啥创意但是足够醒目。</p>

<h3>第二类，表达不满型</h3>

<p>这一类就没有第一类那么无脑啦，至少人家不是词不达意嘛~如<code>what the f**k</code>，<code>a** hole</code>，<code>son of a b*tch</code>，<code>f**k off</code>，<code>beast</code>等等，常作用于老板和项目经理等不招人待见的群体。</p>

<h3>第三类，口头禅</h3>

<p>这一类人往往从第一类进化而来，某些词说习惯了就很难改过来啦，说着说着就喜欢夹一些动词进来，没办法，不然哪像个大老爷们嘛~</p>

<h3>第四类，自嘲型</h3>

<p>这一类就得注意语境啦，说的好了人家会心一笑，说不好人家可真能拔刀相见。</p>

<p>程序猿向来都是独来独往，心高气傲，自然不甘与程序小白为伍啦，甚至在圈内也是互相看不惯的嘛，于是才有了<code>geek</code>的称号，而<code>geek</code>本身就有着讨厌鬼的意思。不少人以<code>geek</code>自居，嘴上更是得理不饶人。因为很多真正的大牛据说也是脾气古怪，比如linus torvalds，就常常在公众场合竖中指，在邮件中更是口无遮拦，著名的有那句<code>Read the F**ing Source Code</code>，顿时霸气十足，节操掉一地。</p>

<p>这是在网上，但是在生活中，我所接触的程序猿往往又成了别人眼里内向，闷骚的代名词，时不时也能冒出一两句冷笑话，提高下存在感。这种现实与虚拟中的反差很有意思，喜欢心理的可以研究一下。</p>

<p>而且在东西方程序猿的文化上，也有差异，老外骂人直来直往，少不了那一个动词。国人比较含蓄，除了问候一家老小七大姑八大姨之外，还会拐弯抹角，引经据典，凸显我大中华之悠久历史，比如最近流行的<code>去年买了个表</code>，就颇具亲和力。在这方面，猫扑天涯是集大成者，但这又不在我们讨论范围内了。</p>

<p>程序猿的脏话，往往见于注释，这也成了代码中的一道亮丽风景，辛辛苦苦读了一天代码，发现一头雾水，这个时候，要是看到这些注释，发现前人也在这里大吐苦水，心里也就释然了。</p>

<p>在这个大数据横行的时候，什么都得靠挖掘嘛，如果写个爬虫，去抓一下各大论坛的脏话做个统计，应该是一件很有意思的事情。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[react.php 中的异步实现]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/03/05/react-dot-php-zhong-de-yi-bu-shi-xian/"/>
    <updated>2013-03-05T15:29:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/03/05/react-dot-php-zhong-de-yi-bu-shi-xian</id>
    <content type="html"><![CDATA[<p>在基于事件的异步模型大行其道的今天，各语言都相继推出了自己的异步框架，nodejs原生的异步模型当然是其中的翘楚，然后python有Twisted，ruby有EventMachine(名字俗了点)。php也有一个不错的异步框架，<a href="https://github.com/reactphp/react">react</a>。下面我们从内而外的看看这个异步模型是怎么实现的。</p>

<h3>événement</h3>

<p>首先react的事件模型是建立在一个叫<a href="https://github.com/igorw/evenement">événement</a>的框架上，也是react作者所作，代码只有短短的74行，实现了<code>on</code>(事件监听),<code>emit</code>(触发事件)等方法。下面就单就这两个事件方法分析一下。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">on</span><span class="p">(</span><span class="nv">$event</span><span class="p">,</span> <span class="nv">$listener</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">is_callable</span><span class="p">(</span><span class="nv">$listener</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nx">\InvalidArgumentException</span><span class="p">(</span><span class="s1">&#39;The provided listener was not a valid callable.&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">listeners</span><span class="p">[</span><span class="nv">$event</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">listeners</span><span class="p">[</span><span class="nv">$event</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">listeners</span><span class="p">[</span><span class="nv">$event</span><span class="p">][]</span> <span class="o">=</span> <span class="nv">$listener</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">emit</span><span class="p">(</span><span class="nv">$event</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$arguments</span> <span class="o">=</span> <span class="k">array</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">listeners</span><span class="p">(</span><span class="nv">$event</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$listener</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">call_user_func_array</span><span class="p">(</span><span class="nv">$listener</span><span class="p">,</span> <span class="nv">$arguments</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的<code>$event</code>其实就是一个事件标识，一般是一个字符串，<code>$listener</code>是一个回调方法。调用<code>on</code>时用数组listeners记录所有回调方法，调用<code>emit</code>时再按次序触发，由此还衍生了<code>once</code>(只触发一次就解除绑定的事件)，<code>removeListener</code>(移除事件)等方法。</p>

<h3>EventLoop</h3>

<p>更进一步，react事件模型的上一层是一个监听循环，叫做<code>EventLoop</code>，有了这个，就往消息队列或webserver的异步处理模型更近了一步。</p>

<p>下面可以看一下<code>EventLoop</code>的接口文件<code>LoopInterface.php</code>：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">namespace</span> <span class="nx">React\EventLoop</span><span class="p">;</span>
</span><span class='line'><span class="k">interface</span> <span class="nx">LoopInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">addReadStream</span><span class="p">(</span><span class="nv">$stream</span><span class="p">,</span> <span class="nv">$listener</span><span class="p">);</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">addWriteStream</span><span class="p">(</span><span class="nv">$stream</span><span class="p">,</span> <span class="nv">$listener</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">removeReadStream</span><span class="p">(</span><span class="nv">$stream</span><span class="p">);</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">removeWriteStream</span><span class="p">(</span><span class="nv">$stream</span><span class="p">);</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">removeStream</span><span class="p">(</span><span class="nv">$stream</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">addTimer</span><span class="p">(</span><span class="nv">$interval</span><span class="p">,</span> <span class="nv">$callback</span><span class="p">);</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">addPeriodicTimer</span><span class="p">(</span><span class="nv">$interval</span><span class="p">,</span> <span class="nv">$callback</span><span class="p">);</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">cancelTimer</span><span class="p">(</span><span class="nv">$signature</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">tick</span><span class="p">();</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">run</span><span class="p">();</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">stop</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p><code>react</code>支持php的社区库<code>libevent</code>提供的事件支持，同时有个<code>LibEventLoop.php</code>用来实现<code>LoopInterface</code>接口，但是<code>react</code>也有自己的实现方案<code>StreamSelectLoop</code>，与<code>LibEventLoop</code>不兼容，这点可以在<code>EventLoop\LibEventLoop\Factory</code>中看到。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">create</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// @codeCoverageIgnoreStart</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">function_exists</span><span class="p">(</span><span class="s1">&#39;event_base_new&#39;</span><span class="p">))</span> <span class="p">{</span> <span class="c1">//使用libevent</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nx">LibEventLoop</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nx">StreamSelectLoop</span><span class="p">();</span> <span class="c1">//不使用libevent</span>
</span><span class='line'>        <span class="c1">// @codeCoverageIgnoreEnd</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>我们主要来看看<code>StreamSelectLoop</code>的实现。<code>LoopInterface</code>中几个重要的方法<code>addReadStream</code>, <code>addWriteStream</code>, <code>addTimer</code>, <code>tick</code>都可以在<code>StreamSelectLoop</code>找到踪影。下面先说一下<code>addReadStream</code>中的两个参数：</p>

<p><em><code>$stream</code>是一个由<code>stream_socket_server</code>方法生成的socket句柄，支持tcp或文件socket等方式。
</em><code>$listener</code>其实就是一个callback方法，在这个方法中就需要实现具体的应用逻辑了。</p>

<p><code>addWriteStream</code>与<code>addReadStream</code>方法差不多，这两个方法其实啥都没做，只是注册一下两个方法，以供后面调用。真正起作用的方法是<code>tick</code>和<code>runStreamSelect</code>。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>    <span class="k">protected</span> <span class="k">function</span> <span class="nf">runStreamSelect</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$read</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">readStreams</span> <span class="o">?:</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$write</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">writeStreams</span> <span class="o">?:</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$except</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$read</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nv">$write</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">sleepOnPendingTimers</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">stream_select</span><span class="p">(</span><span class="nv">$read</span><span class="p">,</span> <span class="nv">$write</span><span class="p">,</span> <span class="nv">$except</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getNextEventTimeInMicroSeconds</span><span class="p">())</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$read</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">foreach</span> <span class="p">(</span><span class="nv">$read</span> <span class="k">as</span> <span class="nv">$stream</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nv">$listener</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">readListeners</span><span class="p">[(</span><span class="nx">int</span><span class="p">)</span> <span class="nv">$stream</span><span class="p">];</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$listener</span><span class="p">,</span> <span class="nv">$stream</span><span class="p">,</span> <span class="nv">$this</span><span class="p">)</span> <span class="o">===</span> <span class="k">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">removeReadStream</span><span class="p">(</span><span class="nv">$stream</span><span class="p">);</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$write</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">foreach</span> <span class="p">(</span><span class="nv">$write</span> <span class="k">as</span> <span class="nv">$stream</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">writeListeners</span><span class="p">[(</span><span class="nx">int</span><span class="p">)</span> <span class="nv">$stream</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                    <span class="nv">$listener</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">writeListeners</span><span class="p">[(</span><span class="nx">int</span><span class="p">)</span> <span class="nv">$stream</span><span class="p">];</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$listener</span><span class="p">,</span> <span class="nv">$stream</span><span class="p">,</span> <span class="nv">$this</span><span class="p">)</span> <span class="o">===</span> <span class="k">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">removeWriteStream</span><span class="p">(</span><span class="nv">$stream</span><span class="p">);</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p><code>runStreamSelect</code>方法在<code>tick</code>方法中被调用，目的是在每个间隔中重复调用之前绑定的<code>$listener</code>方法，这个可以理解，因为本来<code>EventLoop</code>的目的就是实现事件的监听，监听的最简单方法就是通过轮询的方式来调用，假如某些方法不希望被重复调用或者希望在某次成功之后就不再调用，那么在定义<code>$listener</code>方法时，将返回值设置成false即可。至于这个间隔，则是通过<code>Timer</code>来实现的。</p>

<p>在<code>runStreamSelect</code>中调用了一个有意思的方法<a href="http://php.net/manual/en/function.stream-select.php"><code>stream_select</code></a>，用timeout取代传统的<code>sleep</code>，并兼具监听socket端口的功能，一旦有新的连接或者改动，<code>stream_select</code>会立刻返回read或write中被修改的socket连接总数。这样，既能合理的释放cpu资源，又能及时对事件发起响应。比起传统的<code>while+sleep</code>，实在是高明很多。</p>

<h3>Timer</h3>

<p>说到<code>tick</code>就不得不提<code>Timer</code>，<code>react</code>中用一个<code>Timer</code>类来模拟步进操作。每隔一定的ticket会唤起一个事件，这样才能保证异步操作能正确的被调用，这个ticket的数量有讲究，设置的太小会让系统耗用大量资源，设置的太大又不能保证异步事件能及时的被调用。下面我们来看看<code>Timer</code>中的tick。</p>

<p><code>Timer</code>中使用一个队列来记录所有将触发的事件，并且将它们按照优先级(也就是触发事件)排序，最后每次调用优先级最高的事件。</p>

<p><code>react</code>中使用<code>SplPriorityQueue</code>类来做优先级队列，这是php5.3后新增的一个标准库类，其功能很简单，就是实现一个按照rank排序的队列，有点类似redis中的zset，但是其值是可以重复的，所以它不是一个集合。它实现了<code>insert</code>, <code>count</code>, <code>count</code>, <code>extract</code>等方法，通过<code>insert</code>往队列中插入的数据会自动按照优先级(priority)由大到小排序(<code>react</code>中根据interval时间取负，实现了由小到大排序)，免去了sort的麻烦，然后可以通过<code>extract</code>方法得到队列顶部优先级(priority)最高的数据。</p>

<p>有了Timer，用户就可以给<code>react</code>设置延迟事件，可以参考js中的<code>setTimeout</code>方法。</p>

<p>最后，<code>react</code>通过<code>EventLoop</code>中的<code>run</code>方法将tick放入一个while循环，实现了监听的目的。</p>

<p>总结一下，<code>react</code>的异步事件模型：</p>

<p>核心的on-emit事件模型 &#8211;> EventLoop实现响应socket事件 &#8211;> Timer实现事件优先级排序 &#8211;> while循环来pending服务端的程序。</p>

<p><code>react</code>还提供了很多的示例文件，一个简单的http-server可以实现如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require</span> <span class="nx">__DIR__</span><span class="o">.</span><span class="s1">&#39;/../vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="nv">$app</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$request</span><span class="p">,</span> <span class="nv">$response</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="o">&amp;</span><span class="nv">$i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$text</span> <span class="o">=</span> <span class="s2">&quot;This is request number </span><span class="si">$i</span><span class="s2">.</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$headers</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="nv">$headers</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">(</span><span class="nv">$text</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nv">$loop</span> <span class="o">=</span> <span class="nx">React\EventLoop\Factory</span><span class="o">::</span><span class="na">create</span><span class="p">();</span>
</span><span class='line'><span class="nv">$socket</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">React\Socket\Server</span><span class="p">(</span><span class="nv">$loop</span><span class="p">);</span>
</span><span class='line'><span class="nv">$http</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">React\Http\Server</span><span class="p">(</span><span class="nv">$socket</span><span class="p">);</span>
</span><span class='line'><span class="nv">$http</span><span class="o">-&gt;</span><span class="na">on</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">,</span> <span class="nv">$app</span><span class="p">);</span>
</span><span class='line'><span class="nv">$socket</span><span class="o">-&gt;</span><span class="na">listen</span><span class="p">(</span><span class="mi">1337</span><span class="p">);</span>
</span><span class='line'><span class="nv">$loop</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h2>后记</h2>

<p><code>react</code>中用到了很多php5.3之后才出现的新特性(EventEmitter2甚至只支持5.4以上的php版本)，很多方法以前也没有接触过，可以说相比于国内对php的应用，老外对语言的研究更加透彻。想起国内这么普及的php应用，很多人只是略知皮毛，就喜欢大言不惭，甚至能人云亦云的挑出一堆语言的弊端。老外的钻研精神确实值得学习。</p>

<p>记录一下几个可能有用但是不常用的类或方法：</p>

<ul>
<li><a href="http://php.net/manual/en/function.stream-socket-server.php"><code>stream_socket_server</code></a> 创建一个服务端套接字。</li>
<li><a href="http://php.net/manual/en/function.stream-select.php"><code>stream_select</code></a> 监听读写socket状态的变化，带timeout时间</li>
<li><a href="http://www.php.net/manual/en/splpriorityqueue.insert.php"><code>SplPriorityQueue</code></a> 创建一个带优先级的有序队列</li>
</ul>


<h2>参考文档</h2>

<p><a href="http://www.mwop.net/blog/253-Taming-SplPriorityQueue.html">Taming SplPriorityQueue</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php的命名空间]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/03/04/php-de-namespace/"/>
    <updated>2013-03-04T11:38:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/03/04/php-de-namespace</id>
    <content type="html"><![CDATA[<p>php中命名空间的概念出现的比较晚(>=5.3)，这也造成了很多人写php程序的时候忽略了这个问题(包括我:)，不过，最近很多老外的开源项目中渐渐流行起在php中使用命名空间。于是我也跟风一把，看看究竟好在哪儿。</p>

<p>在php namespace语句出现之前，通行的做法是根据文件路径定义类名，某些特殊文件再加上后缀，比如存放controller的文件夹中有两个文件，分别存放在<code>controller/Base.php</code>和<code>controller/login/Base.php</code>，根据命名可以看出这是两个基类文件，文件名是一样的，它们的类名一般会写成<code>BaseController</code>和<code>Login_BaseController</code>(首字母大写也是一种约定)，这样就不存在类名冲突的问题了。这样做的一个缺点是类名会很长，用某些人的说法，就是不够优雅，于是命名空间就应运而生了。</p>

<p>命名空间的使用在别的语言中的使用历史不算短，其中微软系的c#由盛。在php中基本是照搬这种思想，下面先举个简单的栗子：</p>

<figure class='code'><figcaption><span>myname1.php  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">namespace</span> <span class="nx">my\name1</span><span class="p">;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MyClass</span> <span class="p">{}</span> <span class="c1">//定义类</span>
</span><span class='line'><span class="k">function</span> <span class="nf">myfunction</span><span class="p">()</span> <span class="p">{</span><span class="k">echo</span> <span class="s2">&quot;helloworld&quot;</span><span class="p">;}</span> <span class="c1">//定义方法</span>
</span><span class='line'><span class="k">const</span> <span class="no">MYCONST</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">//定义常量</span>
</span></code></pre></td></tr></table></div></figure>


<p>假如我们有另一个php文件myname2.php，需要include myname1.php。用下面几种方式是可以的。</p>

<p>一. 在同一namespace下</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">namespace</span> <span class="nx">my\name1</span><span class="p">;</span>
</span><span class='line'><span class="k">include</span> <span class="s1">&#39;myname1.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nb">print_r</span><span class="p">(</span><span class="k">new</span> <span class="nx">MyClass</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>从输出结果可以看出实例名已经变成了<code>my\name1\MyClass Object</code>，命名空间会自动的加到类名前面。</p>

<p>二. 在不同namespace下用<code>use</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">namespace my\name2; //不同的命名空间</span>
</span><span class='line'><span class="x">include &#39;myname1.php&#39;;</span>
</span><span class='line'><span class="x">use my\name1; //使用命名空间</span>
</span><span class='line'><span class="x">print_r(\my\name1\MYCONST); //这里用调用常量举例</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，在使用namespace前需要以<code>\</code>开头，否则会自动加到当前的namespace后面，变成<code>my\name2\my\name1\MYCONST</code>，也就得不到正确的结果了。这个有点类似url或*nux系统中用<code>/</code>来表示PATH的根目录。</p>

<p>三. 在不同namespace下用<code>use .. as ..</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">namespace my\name2;</span>
</span><span class='line'><span class="x">include &#39;myname1.php&#39;;</span>
</span><span class='line'><span class="x">use my\name1 as m1; //使用命名空间别名</span>
</span><span class='line'><span class="x">m1\myfunction(); //调用方法举例</span>
</span></code></pre></td></tr></table></div></figure>


<p>这就是命名空间的真正益处了，短啊~不过别名前就不能用<code>\</code>符号了，否则会把<code>m1</code>当做已存在的命名空间来处理。</p>

<h3>P.S.</h3>

<ul>
<li>php5.3之后还有一个全局常量<code>__NAMESPACE__</code>来表明当前文件所在的命名空间，至于用处？谁知道呢。</li>
<li>在同一个文件中是可以使用多个namespace的。</li>
<li>假如在命名空间中定义了与全局方法同名的方法，可以使用在前面加<code>\</code>符号的方式调用全局方法，例如在<code>fopen</code>中用<code>\fopen()</code>。而不使用命名空间的时候，重复定义是不允许的。遇到重定义常量也是一样。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[virtualbox hates sendfile]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/02/18/virtualbox-hates-sendfile/"/>
    <updated>2013-02-18T16:39:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/02/18/virtualbox-hates-sendfile</id>
    <content type="html"><![CDATA[<p>事情的起因是这个样子滴~</p>

<p>代码文件都放在mac中，运行环境在virtualbox中，通过mount主机的文件夹来工作，相信很多同学都搭建过这样的环境，一切相安无事，直到某一天。。。</p>

<p>修改过的静态文件不生效了！</p>

<p>本来以为是nginx中缓存设置的问题，使尽各种解数，包括把expires设置为off，header中加Expire为0，给文件加时间戳，依然如此。果断google之，原来是virtualbox使用的特殊文件系统造成的。</p>

<p>apache和nginx中都有个默认开启的选项sendfile，表示通过内核文件指针来读取或复制文件，在vboxsf(virtualbox共享文件所使用的文件系统)中，sendfile会造成文件无法更新。于是我们无论怎么刷新，都只能看到第一次访问得到的文件了。</p>

<p>解决办法也很简单，将nginx.conf中设置<code>sendfile off</code>就可以了。</p>

<p>由于这个问题折腾了我很久，特此记录一下，同时借用某同样遇到此问题的<a href="http://abitwiser.wordpress.com/2011/02/24/virtualbox-hates-sendfile/">blog标题</a>。</p>

<h2>后记</h2>

<p>1.<a href="https://forums.virtualbox.org/viewtopic.php?f=1&amp;t=24905">virtualbox论坛</a>2009年的时候就有人讨论过这个问题，那时候的版本还是3.0，现在都4.2了，问题仍然没有得到解决，唉~被oracle X过的软件果然不行啊~。</p>

<p>2.在主机中修改文件，虚拟机中的inode不会变化，反过来也一样，不知道是不是因为vboxsf的问题，然而使用samba共享的文件系统中两边的inode是同时变化的。</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://abitwiser.wordpress.com/2011/02/24/virtualbox-hates-sendfile/">VirtualBox Hates Sendfile</a></li>
<li><a href="http://serverfault.com/questions/269420/disable-caching-when-serving-static-files-with-nginx-for-development">serverfault</a></li>
<li><a href="https://forums.virtualbox.org/viewtopic.php?f=1&amp;t=24905">virtualbox forum</a></li>
<li><a href="http://wiki.nginx.org/HttpCoreModule#sendfile">nginx wiki</a></li>
<li><a href="http://comments.gmane.org/gmane.linux.kernel.cifs/3517">mac中samba共享的问题</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cypher Query Language 学习笔记(2)]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/02/06/cypher-query-language-xue-xi-bi-ji-2/"/>
    <updated>2013-02-06T14:32:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/02/06/cypher-query-language-xue-xi-bi-ji-2</id>
    <content type="html"><![CDATA[<h3>create unique</h3>

<p>顾名思义，<code>create unique</code>与<code>create</code>在功能上是类似的，不过当新建的node或relationship已经存在时，<code>create unique</code>不会再生成一个新的node或relationship。</p>

<p>另一个区别是<code>create unique</code>只能在一个<code>path</code>表达式中使用，例如下面的代码：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>start <span class="nv">bran</span> <span class="o">=</span> node<span class="o">(</span>6<span class="o">)</span> create unique bran-<span class="o">[</span>r:littlebrotherof<span class="o">]</span>-&gt;<span class="o">(</span>n<span class="o">{</span>name:<span class="s2">&quot;jon&quot;</span><span class="o">})</span> <span class="k">return </span>n;
</span><span class='line'>+----------------------------+
</span><span class='line'>| n                          |
</span><span class='line'>+----------------------------+
</span><span class='line'>| Node<span class="o">[</span>7<span class="o">]{</span>name:<span class="s2">&quot;jon&quot;</span>,age:17<span class="o">}</span> |
</span><span class='line'>+----------------------------+
</span><span class='line'>1 row
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码中，path中name=&#8221;jon&#8221;的node已经存在，neo4j认为这是一个<code>unique node</code>，所以不会再新建一个node，稍加修改，将age属性调整一下，就可以新建一个不同的node。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>start <span class="nv">bran</span> <span class="o">=</span> node<span class="o">(</span>6<span class="o">)</span> create unique bran-<span class="o">[</span>r:littlebrotherof<span class="o">]</span>-&gt;<span class="o">(</span>n<span class="o">{</span>name:<span class="s2">&quot;jon&quot;</span>,age:18<span class="o">})</span> <span class="k">return </span>n;
</span><span class='line'>+----------------------------+
</span><span class='line'>| n                          |
</span><span class='line'>+----------------------------+
</span><span class='line'>| Node<span class="o">[</span>8<span class="o">]{</span>name:<span class="s2">&quot;jon&quot;</span>,age:18<span class="o">}</span> |
</span><span class='line'>+----------------------------+
</span><span class='line'>1 row
</span><span class='line'>Nodes created: 1
</span><span class='line'>Relationships created: 1
</span><span class='line'>Properties <span class="nb">set</span>: 2
</span></code></pre></td></tr></table></div></figure>


<p>新建relationship的方式和上面差不多，举一反三即可。</p>

<h3>foreach</h3>

<p>foreach针对的neo4j中的集合做遍历，可以做一些批量的修改操作。其语法块需要用括号围起来，像下面的代码，更新path p关联的所有node的uptime属性为100。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>start <span class="nv">bran</span> <span class="o">=</span> node<span class="o">(</span>6<span class="o">)</span> match <span class="nv">p</span> <span class="o">=</span> bran-<span class="o">[]</span>-&gt;<span class="o">()</span> foreach <span class="o">(</span>n in nodes<span class="o">(</span>p<span class="o">)</span>: <span class="nb">set </span>n.uptime <span class="o">=</span> 100<span class="o">)</span>;
</span><span class='line'>+-------------------+
</span><span class='line'>| No data returned. |
</span><span class='line'>+-------------------+
</span><span class='line'>Properties <span class="nb">set</span>: 4
</span></code></pre></td></tr></table></div></figure>


<p>至于什么是neo4j中的集合，比如<code>nodes()</code>方法得到的结果就是一个集合，用集合表达式表示的也是一个集合，但是<code>n = node(*)</code>中匹配出来的n并不是一个集合。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>start <span class="nv">bran</span> <span class="o">=</span> node<span class="o">(</span>6<span class="o">)</span>, <span class="nv">jon</span> <span class="o">=</span> node<span class="o">(</span>7<span class="o">)</span> foreach <span class="o">(</span>n in <span class="o">[</span>bran, jon<span class="o">]</span>: <span class="nb">set </span>n.uptime <span class="o">=</span> 101<span class="o">)</span>;
</span><span class='line'>+-------------------+
</span><span class='line'>| No data returned. |
</span><span class='line'>+-------------------+
</span><span class='line'>Properties <span class="nb">set</span>: 2
</span></code></pre></td></tr></table></div></figure>


<h3>functions</h3>

<p><a href="http://docs.neo4j.org/chunked/milestone/query-function.html">官方手册</a>中罗列了所有的可用方法，非常详尽，需要慢慢研究了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vagrant 打包与发布]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/02/06/vagrant-da-bao-yu-fa-bu/"/>
    <updated>2013-02-06T14:31:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/02/06/vagrant-da-bao-yu-fa-bu</id>
    <content type="html"><![CDATA[<p>上次失败的<a href="http://sailxjx.github.com/blog/blog/2012/12/11/vagrant-bi-ji/">vagrant尝试</a>之后，很久没有再去捣鼓这玩意儿，最近又想试一试，居然一举成功了，特别记录一下。</p>

<h2>打包</h2>

<p>上手第一件事就是制作自己的box，网上已经有了许多现成的<a href="http://www.vagrantbox.es/">各linux版本box</a></p>

<p>首先用virtualbox安装好自己的linux，版本任选，我这里用的是ubuntu server 12.10，虚拟机名是<code>ubuntu_server_12.10</code>，装好后在其中添加<code>vagrant</code>账号。再用下面的命令就可以生成自己的box了。</p>

<blockquote><p>vagrant package &#8211;base ubuntu_server_12.10 &#8211;output vagrant_ubuntu.box</p></blockquote>

<p>这样就在当前目录下生成了一个vagrant_ubuntu.box文件，压缩前原始vdi文件在1.4G左右，打包后的box是415M，压缩比还是不错的。</p>

<h2>导入</h2>

<p>下面就是导入box文件了。</p>

<blockquote><p>vagrant box add vagrant_ubuntu vagrant_ubuntu.box</p></blockquote>

<p>vagrant的磁盘文件储存在<code>~/.vagrant.d/</code>文件夹中。导入之后用下面的命令生成一个&#8217;Vagrantfile&#8217;配置文件</p>

<blockquote><p>vagrant init</p></blockquote>

<p>然后就可以通过<code>up</code>命令启动虚拟机了</p>

<blockquote><p>vagrant up</p></blockquote>

<h2>ssh</h2>

<p>如果不做任何修改，虚拟机默认使用的是NAT的连接方式，而且做了一个端口转发(22->2222)，这个时候直接通过<code>vagrant ssh</code>命令或22端口是登陆不了虚拟机的，需要在Vagrantfile中添加下面两项</p>

<blockquote><p>config.ssh.port = 2222</p>

<p>config.ssh.private_key_path = &#8220;/Users/tristan/.ssh/id_rsa&#8221;</p></blockquote>

<p>其中第一项指定使用本机的2222作为ssh端口，其中第二项是指定使用的私钥路径，如果事先在虚拟机中加入了对应的公钥，这样连接时就可以免去输入密码的步骤。(还要注意的是网上大部分box都是使用vagrant用户名，密码也是vagrant，算是一个便于传播的约定)。现在可以看一下ssh配置。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tristan@bran:vagrant<span class="nv">$ </span>vagrant ssh-config
</span><span class='line'>Host default
</span><span class='line'>  HostName 127.0.0.1
</span><span class='line'>  User vagrant
</span><span class='line'>  Port 2222
</span><span class='line'>  UserKnownHostsFile /dev/null
</span><span class='line'>  StrictHostKeyChecking no
</span><span class='line'>  PasswordAuthentication no
</span><span class='line'>  IdentityFile /Users/tristan/.ssh/id_rsa
</span><span class='line'>  IdentitiesOnly yes
</span></code></pre></td></tr></table></div></figure>


<p>然后使用下面的命令，就可以直接登录虚拟机了。</p>

<blockquote><p>vagrant ssh</p></blockquote>

<p>包括下面的一系列命令，也均可以使用。</p>

<ul>
<li><code>vagrant up</code> 启动</li>
<li><code>vagrant halt</code> 关机</li>
<li><code>vagrant reload</code> 重启</li>
<li><code>vagrant suspend</code> 休眠</li>
</ul>


<p>总而言之，搞定ssh，一切就很顺利鸟。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cypher Query Language 学习笔记(1)]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/02/01/cypher-query-language-xue-xi-bi-ji-1/"/>
    <updated>2013-02-01T11:30:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/02/01/cypher-query-language-xue-xi-bi-ji-1</id>
    <content type="html"><![CDATA[<p>紧接前文<a href="http://sailxjx.github.com/blog/blog/2013/01/23/chu-shi-tu-xing-shu-ju-ku-neo4j/">初试图形数据库 neo4j</a>初窥了这种语言的特性，几天使用下来，初期不适应的便秘感慢慢退去，渐入佳境，竟然觉得有些妙不可言鸟。就如同nodejs基于事件的特点和函数式语法对传统编程方法的改变，学习<code>Cypher</code>同样需要改改传统<code>Sql</code>的思路，下面记录一下最近的新发现。</p>

<h3>版本号</h3>

<p><code>dbinfo</code>可以用于查询一些与数据库状态相关的信息，查看版本号是其中一个应用。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>dbinfo -g Kernel
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;KernelStartTime&quot;</span>: <span class="s2">&quot;Mon Feb 04 14:45:48 CST 2013&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;KernelVersion&quot;</span>: <span class="s2">&quot;Neo4j - Graph Database Kernel 1.9.M04&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;MBeanQuery&quot;</span>: <span class="s2">&quot;org.neo4j:instance=kernel#0,name=*&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;ReadOnly&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>  <span class="s2">&quot;StoreCreationDate&quot;</span>: <span class="s2">&quot;Thu Jan 31 16:42:31 CST 2013&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;StoreDirectory&quot;</span>: <span class="s2">&quot;/usr/local/neo4j/data/graph.db&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;StoreId&quot;</span>: <span class="s2">&quot;b9dcdac5ae2b9e82&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;StoreLogVersion&quot;</span>: 1
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>match</h3>

<p>说起这<code>match</code>真是个很神奇的东西，可以用<code>sql</code>中的<code>where</code>作类比，但是又不同于<code>where</code>，因为<code>Cypher</code>中有专门的<code>where</code>。</p>

<p>这个<code>match</code>可以比作正则中的捕获组，还兼具了赋值的功能，如下面的例子</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>start <span class="nv">bran</span> <span class="o">=</span> node<span class="o">(</span>13<span class="o">)</span> match bran-<span class="o">[</span>r<span class="o">]</span>-&gt;b <span class="k">return </span>r, b;
</span><span class='line'>+--------------------------------------------------------------------------+
</span><span class='line'>| r                                         | b                            |
</span><span class='line'>+--------------------------------------------------------------------------+
</span><span class='line'>| :islittlebrotherof<span class="o">[</span>2<span class="o">]</span> <span class="o">{</span>age:1359622995523<span class="o">}</span> | Node<span class="o">[</span>14<span class="o">]{</span>name:<span class="s2">&quot;snow&quot;</span>,age:17<span class="o">}</span> |
</span><span class='line'>+--------------------------------------------------------------------------+
</span><span class='line'>1 row
</span><span class='line'>0 ms
</span></code></pre></td></tr></table></div></figure>


<p>上面的例子中通过<code>match</code>找出了节点bran出去的所有关系r和所有终点b，这在传统的<code>sql</code>中可以比较难办到的哦。</p>

<p><code>match</code>一般需要和下面要提到的独有的模式(pattern)配合使用，比如下面这个很神奇的语句，能匹配出与节点summer和snow都有关系的中间节点，甚至你可以在中途添加一些表达式来获得沿途的关系对象。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>start <span class="nv">summer</span> <span class="o">=</span> node<span class="o">(</span>15<span class="o">)</span>, <span class="nv">snow</span> <span class="o">=</span> node<span class="o">(</span>14<span class="o">)</span> match summer-<span class="o">[</span>r<span class="o">]</span>-&gt;n&lt;--snow <span class="k">return </span>n, r;
</span><span class='line'>+--------------------------------------------------------+
</span><span class='line'>| n                            | r                       |
</span><span class='line'>+--------------------------------------------------------+
</span><span class='line'>| Node<span class="o">[</span>13<span class="o">]{</span>name:<span class="s2">&quot;bran&quot;</span>,age:10<span class="o">}</span> | :isdogof<span class="o">[</span>3<span class="o">]</span> <span class="o">{</span>ctime:100<span class="o">}</span> |
</span><span class='line'>+--------------------------------------------------------+
</span><span class='line'>1 row
</span><span class='line'>1 ms
</span></code></pre></td></tr></table></div></figure>


<p>当你不想要将匹配结果赋值时，可以使用()来代替node，用[]来代替relationship，当然，relationship不填写也是可以的。</p>

<p><code>match</code>中还有一种表示深度的方式，类似于<code>coffee</code>中的数组定义<code>[0..10]</code>来表示深度范围。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>start <span class="nv">s</span> <span class="o">=</span> node<span class="o">(</span>15<span class="o">)</span>, <span class="nv">snow</span> <span class="o">=</span> node<span class="o">(</span>14<span class="o">)</span> match <span class="nv">p</span> <span class="o">=</span> s-<span class="o">[</span>r:knowns*1..2<span class="o">]</span>-&gt;snow <span class="k">return </span>r;
</span><span class='line'>+-------------------------------+
</span><span class='line'>| r                             |
</span><span class='line'>+-------------------------------+
</span><span class='line'>| <span class="o">[</span>:knowns<span class="o">[</span>6<span class="o">]</span> <span class="o">{}</span>,:knowns<span class="o">[</span>7<span class="o">]</span> <span class="o">{}]</span> |
</span><span class='line'>+-------------------------------+
</span><span class='line'>1 row
</span><span class='line'>1 ms
</span></code></pre></td></tr></table></div></figure>


<p>官网手册中还提供了一个深度为0的例子，表示指向自己的relationship。同样如果不需要赋值或者不需要指定类型，用[*1..2]代替。</p>

<p>求最短路径在很多地方都会应用到,neo4j提供了<code>shortestpath</code>方法来提供两点间的最短路径</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>start <span class="nv">bran</span> <span class="o">=</span> node<span class="o">(</span>1<span class="o">)</span>, <span class="nv">jon</span> <span class="o">=</span> node<span class="o">(</span>2<span class="o">)</span> match <span class="nv">p</span> <span class="o">=</span> shortestpath<span class="o">(</span>bran-<span class="o">[</span>*..2<span class="o">]</span>-&gt;jon<span class="o">)</span> <span class="k">return </span>p;
</span><span class='line'>+------------------------------------------------------------------------------------------------------+
</span><span class='line'>| p                                                                                                    |
</span><span class='line'>+------------------------------------------------------------------------------------------------------+
</span><span class='line'>| <span class="o">[</span>Node<span class="o">[</span>1<span class="o">]{</span>name:<span class="s2">&quot;bran&quot;</span>,age:10<span class="o">}</span>,:islittlebrotherof<span class="o">[</span>0<span class="o">]</span> <span class="o">{</span>ctime:1359963465947<span class="o">}</span>,Node<span class="o">[</span>2<span class="o">]{</span>name:<span class="s2">&quot;jon&quot;</span>,age:17<span class="o">}]</span> |
</span><span class='line'>+------------------------------------------------------------------------------------------------------+
</span><span class='line'>1 row
</span><span class='line'>1 ms
</span></code></pre></td></tr></table></div></figure>


<p>不过假如在<code>shortestpath</code>参数中指定最短长度值的话会报错(如<code>p = shortestpath(bran-[*0..2]-&gt;jon)</code>)，不过貌似没有<code>longestpath</code>来获得最长路径，可能一是因为应用场景较少，二是在算法上也会复杂很多，略显遗憾。</p>

<h3>pattern</h3>

<p>现在再记录pattern有点本末倒置的感觉，毕竟前面的match已经用到了很多种pattern，那么这里权作总结，将常用的pattern归归类。</p>

<ul>
<li><code>a--&gt;b</code> 最简单的，由一个node到另一个node</li>
<li><code>a-[r]-&gt;b</code> 加上了relationship的path</li>
<li><code>()-[]-&gt;b</code> 如果都不想要标注变量，可用<code>()</code>表示一个node（或一个子pattern），用<code>[]</code>表示一个relationship</li>
<li><code>a-[r:TYPE1|TYPE2]-&gt;b</code> 指定relationship type，其中type可以指定多个，为或的关系。</li>
<li><code>a-[?*]-&gt;b</code> 得到node a到node b的所有路径，如果不存在路径则返回null。（假如没有<code>?</code>则返回空）</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>start <span class="nv">a</span> <span class="o">=</span> node<span class="o">(</span>1<span class="o">)</span> match <span class="nv">p</span> <span class="o">=</span> a-<span class="o">[</span>*<span class="o">]</span>-&gt;b <span class="k">return </span>p;
</span><span class='line'>+----------------------------------------------------------------------------------------------------------------------+
</span><span class='line'>| p                                                                                                                    |
</span><span class='line'>+----------------------------------------------------------------------------------------------------------------------+
</span><span class='line'>| <span class="o">[</span>Node<span class="o">[</span>1<span class="o">]{</span>name:<span class="s2">&quot;bran&quot;</span>,age:10<span class="o">}</span>,:islittlebrotherof<span class="o">[</span>0<span class="o">]</span> <span class="o">{</span>ctime:1359963465947<span class="o">}</span>,Node<span class="o">[</span>2<span class="o">]{</span>name:<span class="s2">&quot;jon&quot;</span>,age:17<span class="o">}]</span>                 |
</span><span class='line'>| <span class="o">[</span>Node<span class="o">[</span>1<span class="o">]{</span>name:<span class="s2">&quot;bran&quot;</span>,age:10<span class="o">}</span>,:isownerof<span class="o">[</span>1<span class="o">]</span> <span class="o">{}</span>,Node<span class="o">[</span>3<span class="o">]{</span>name:<span class="s2">&quot;summer&quot;</span>,age:4<span class="o">}]</span>                                          |
</span><span class='line'>| <span class="o">[</span>Node<span class="o">[</span>1<span class="o">]{</span>name:<span class="s2">&quot;bran&quot;</span>,age:10<span class="o">}</span>,:isownerof<span class="o">[</span>1<span class="o">]</span> <span class="o">{}</span>,Node<span class="o">[</span>3<span class="o">]{</span>name:<span class="s2">&quot;summer&quot;</span>,age:4<span class="o">}</span>,:knowns<span class="o">[</span>5<span class="o">]</span> <span class="o">{}</span>,Node<span class="o">[</span>2<span class="o">]{</span>name:<span class="s2">&quot;jon&quot;</span>,age:17<span class="o">}]</span> |
</span><span class='line'>+----------------------------------------------------------------------------------------------------------------------+
</span><span class='line'>3 rows
</span><span class='line'>1 ms
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>a-[*3..5]-&gt;b</code> 指定path的深度，是可以是一个范围值。</li>
<li><code>me-[:KNOWS*1..2]-remote_friend</code> 将前面集中pattern整合一下，主要是注意其中各pattern的位置，不能搞乱。</li>
</ul>


<h3>index</h3>

<p><code>neo4j</code>的索引是一个key=>value对，基于lucene，据说也可以换其他的引擎，没试过。通过索引可以供<code>Cypher</code>或Rest api查找对应的node或relationship或任何想要的集合。</p>

<p>索引分为两种，自动索引和手动索引，就目前的<code>Cypher</code>版本(1.9.M04)来说，还没有提供创建手动索引的功能，遗憾的是，在nodejs客户端中同样没有完善这一功能，所以我找到了一个ruby版本的客户端用于实验这一功能。</p>

<p><a href="https://github.com/maxdemarzi/neography">neography</a>是官方推荐的一个ruby driver(其实官方推荐中排名更靠前的是<a href="https://github.com/andreasronge/neo4j">neo4j.rb</a>，但是基于jruby的，出于对java的不感冒，还是绕行了)，文档很详细，不赘述了</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;neography&#39;</span>
</span><span class='line'><span class="vi">@neo</span> <span class="o">=</span> <span class="no">Neography</span><span class="o">::</span><span class="no">Rest</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="vi">@neo</span><span class="o">.</span><span class="n">create_node_index</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)</span>                      <span class="c1">#新增一个索引，其中第一个参数是索引主键</span>
</span><span class='line'><span class="vi">@neo</span><span class="o">.</span><span class="n">add_node_to_index</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;bran&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>   <span class="c1">#将一个node添加到索引，其中最后的`1`是node id，也可以是一个node对象，很神奇，很kiss</span>
</span></code></pre></td></tr></table></div></figure>


<p>建好一个索引之后，就可以由<code>Cypher</code>出场了。<code>Cypher</code>中通过索引可以查到对应的node和relationship。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#                       节点:索引主键(key=value)</span>
</span><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>start <span class="nv">n</span> <span class="o">=</span> node:name<span class="o">(</span><span class="nv">name</span><span class="o">=</span><span class="s2">&quot;bran&quot;</span><span class="o">)</span> <span class="k">return </span>n;
</span><span class='line'>+-----------------------------+
</span><span class='line'>| n                           |
</span><span class='line'>+-----------------------------+
</span><span class='line'>| Node<span class="o">[</span>1<span class="o">]{</span>name:<span class="s2">&quot;bran&quot;</span>,age:10<span class="o">}</span> |
</span><span class='line'>+-----------------------------+
</span><span class='line'>1 row
</span></code></pre></td></tr></table></div></figure>


<p>使用<code>Cypher</code>可以创建自动索引，前提是配置中打开了<code>node_auto_indexing</code>(针对node)或<code>relationship_auto_indexing</code>(针对relationship)这一项，而且这个索引是后写入的，也就是说假如之前已经存在的node，在没有改动的情况下，是不会加入到索引中的。</p>

<p>自动索引可以设定需要的fields，在配置文件中用<code>node_keys_indexable</code>和<code>relationship_keys_indexable</code>表示</p>

<p>创建索引的<code>Cypher</code>语句如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>index --create node_auto_index -t node
</span><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>index --indexes
</span><span class='line'>Node indexes:
</span><span class='line'>  name
</span><span class='line'>  node_auto_index
</span><span class='line'>
</span><span class='line'>Relationship indexes:
</span></code></pre></td></tr></table></div></figure>


<p>自动索引默认是关闭的，可能是出于效率的考虑，毕竟在正常的应用中我们不需要对所有node进行索引。而且自动索引是只读的，就是说索引建立以后，除了清空数据库，木有别的方法删掉它啊~。</p>

<h2>注意事项</h2>

<ul>
<li><code>Cypher</code>中遇到某些查询条件中包含空格或别的非英文字符的，可以用`把字符串包起来。</li>
</ul>


<h2>参考资料</h2>

<ul>
<li><a href="http://docs.neo4j.org/chunked/milestone/">v1.9手册</a></li>
<li><a href="https://github.com/maxdemarzi/neography/wiki">neography wiki</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[get post put delete 傻傻分不清楚]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/01/30/get-post-put-delete-sha-sha-fen-bu-qing-chu/"/>
    <updated>2013-01-30T12:41:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/01/30/get-post-put-delete-sha-sha-fen-bu-qing-chu</id>
    <content type="html"><![CDATA[<p>最近看了一些REST API设计的文章，被http中的四种请求类型搞的晕头转向，记录一下，以免忘记。</p>

<h2>准备工具</h2>

<ul>
<li><a href="https://chrome.google.com/webstore/detail/rest-console/cokgbflfommojglbmbpenpphppikmonn?utm_source=chrome-ntp-icon">Chrome插件REST Console</a></li>
<li>一个用于接收参数的php文件</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nb">print_r</span><span class="p">(</span><span class="nv">$_REQUEST</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>开始</h2>

<p>在通常的lamp开发中，我们最常用到的两种类型是<code>GET</code>和<code>POST</code>，例如用户注册的表单我们会通过<code>POST</code>方式提交到服务器，而一般的ajax接口我们通过<code>GET</code>方式调用。另两种方式不常用，根据w3c关于http1.1的草案，<code>PUT</code>在对象存在的时候用于更新，不存在时与<code>POST</code>相同，用于新建，<code>DELETE</code>顾名思义就是删除对象了。</p>

<p>这也解释了为什么我们在一般的web接口设计中(即使想尽量迎合<code>restful</code>)很少用到<code>PUT</code>和<code>DELETE</code>了，就拿用户账号来说，一般我们的服务器api清楚用户需要做什么，一般分为以下几种情况。</p>

<ul>
<li>注册： 用户初来乍到，肯定是新建资料，这个时候用<code>POST</code></li>
<li>登录： 登录需要获取用户信息和密码，用<code>GET</code></li>
<li>修改账户： 修改的操作比较纠结，按照<code>rest</code>的设计风格，应该用<code>PUT</code>，但是我们一般在服务器端会先做校验，而且当用户信息不存在的情况下不会主动去做创建的操作，而是返回错误信息，更重要的一点是，目前的表单中只支持<code>GET</code>和<code>POST</code>两种方式，所以这个时候一般还是用<code>POST</code>。</li>
<li>注销账户： 注销账户的情况比较少，而且一般不会做硬删除(否则用户后悔了找上门来咋办捏~)，所以这个时候实质上还是更新的操作，那么同上，一般会使用<code>POST</code>。</li>
</ul>


<p>如此看来，<code>PUT</code>和<code>DELETE</code>岂不是没有用武之地了？在很多server-to-server的api设计中，这些请求方式还是很有用的，灵活利用，可以设计出优雅易读的web-api来，<a href="https://github.com/sofish">@sofish</a>在数月之前有一篇<a href="http://sofish.de/2100">博文</a>很好的解释这种设计的理念和优势。</p>

<h2>application/x-www-form-urlencoded</h2>

<p>为了对比<code>GET</code>和<code>POST</code>的异同，在测试过程中还有一个新发现。REST console中默认发送<code>application/x-www-form-urlencoded</code>这个请求头，于是在使用<code>POST</code>方式时，服务器端的php代码不能正确的获得参数，查看请求头，发现本来应该是<code>POST DATA</code>的地方变成了下面这样。</p>

<blockquote><p>Request Payload
url=http%3A%2F%2Fwww.google.com</p></blockquote>

<p>google了一个这个<code>Request Payload</code>，找到了<a href="http://stackoverflow.com/questions/9597052/how-to-retrieve-request-payload">stackoverflow君</a>，大意是说假如header中没有<code>application/x-www-form-urlencoded</code>的话，参数不是通过表单项来传递，而是作为request body的一部分。我们的server比较死板，自然认不出这些马甲咯。</p>

<h2>安全与幂等</h2>

<p><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html">w3c关于http method的定义</a>中有一段犹如天书一样的文字，解释了各种方式之间的异同，其中提到了<code>安全</code>与<code>幂等</code>两个概念，大致可以做如下解释。</p>

<ul>
<li>安全性： api的目的只是从服务器获取数据，无任何新建或更新操作，就认为是安全的。例如<code>GET</code>和<code>HEAD</code></li>
<li>幂等性： 这个比较难解释的，概括一下可以说是不管一个api调用多少次，返回的结果应该都是唯一的。比如设计的比较规范的<code>GET</code>和<code>DELETE</code>接口。</li>
</ul>


<h2>rest api的效率问题</h2>

<p>api的效率其实就是http的效率，可以用一个例子来说明。</p>

<p>redis是一个高性能的nosql数据库，但是没有提供rest api。通过tcp连接redis读写效率快的没话说，可是假如对外提供api则需要通过php等客户端做中间件。一次请求需要经过<code>http request-&gt;nginx-&gt;php-&gt;redis</code>层层深入，才能到达最终目标，降低了效率，<a href="https://github.com/nicolasff/webdis">webdis</a>则通过提供redis的rest api将流程简化成了<code>http request-&gt;webdis-&gt;redis</code>，省去了中间的周折，效率自然也就上去了。</p>

<h2>所有method类型</h2>

<p><a href="http://hc.apache.org/httpclient-3.x/apidocs/org/apache/commons/httpclient/HttpMethod.html">apache的interface httpmethod</a>中列举了所有已知的类型，林林总总加起来有十多项了，可以作为一个查询的索引。不过最常用的应该还是<code>GET</code>，<code>POST</code>，<code>PUT</code>，<code>DELETE</code>四种了。</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Representational_state_transfer#RESTful_web_services">RESTful_web_services</a></li>
<li><a href="http://sofish.de/2100">让牛懂琴 by sofish</a></li>
<li><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html">rfc2616</a></li>
<li><a href="http://coolshell.cn/articles/4787.html">HTTP幂等性概念和应用 by </a></li>
<li><a href="http://hc.apache.org/httpclient-3.x/apidocs/org/apache/commons/httpclient/HttpMethod.html">Interface HttpMethod</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node-neo4j 学习笔记]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/01/28/node-neo4j-xue-xi-bi-ji/"/>
    <updated>2013-01-28T11:49:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/01/28/node-neo4j-xue-xi-bi-ji</id>
    <content type="html"><![CDATA[<h2><a href="https://github.com/thingdom/node-neo4j">node-neo4j</a></h2>

<h3>查找节点</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">neo4j = </span><span class="nx">require</span> <span class="s">&#39;neo4j&#39;</span>
</span><span class='line'><span class="nv">db = </span><span class="k">new</span> <span class="nx">neo4j</span><span class="p">.</span><span class="nx">GraphDatabase</span><span class="p">(</span><span class="s">&#39;http://localhost:7474&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">getNodeById</span> <span class="mi">1</span><span class="p">,</span> <span class="nf">(err, node)-&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">||</span> <span class="o">!</span><span class="nx">node</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">err</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">node</span><span class="p">.</span><span class="nx">data</span>
</span></code></pre></td></tr></table></div></figure>


<p>查找节点的api设计的很有dom的风格，与大多数nodejs方法一样，node-neo4j提供的api都是异步的，回调函数中第一个参数都是错误流，第二个因方法而异，<code>getNodeById</code>中的第二个参数node是一个完整的json对象，在这个对象上可以使用node-neo4j针对node的所有方法，要取得或修改node中的成员则可以通过<code>node.data</code>获取。</p>

<h3>创建关系</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># 创建节点</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">getNodeById</span> <span class="mi">1</span><span class="p">,</span> <span class="nf">(err, n1)-&gt;</span>
</span><span class='line'>    <span class="nx">db</span><span class="p">.</span><span class="nx">getNodeById</span> <span class="mi">2</span><span class="p">,</span> <span class="nf">(err, n2)-&gt;</span>
</span><span class='line'>       <span class="c1">#当前节点                 目标节点 关系类型 关系结构</span>
</span><span class='line'>        <span class="nx">n2</span><span class="p">.</span><span class="nx">createRelationshipTo</span> <span class="nx">n1</span><span class="p">,</span> <span class="s">&#39;isdogof&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nv">ctime: </span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()},</span> <span class="nf">(err, r)-&gt;</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">r</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 查找节点</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">getRelationshipById</span> <span class="mi">0</span><span class="p">,</span> <span class="nf">(err, rel)-&gt;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">rel</span>
</span></code></pre></td></tr></table></div></figure>


<p>目前通过<code>node-neo4j</code>创建关系只能在node上做文章，通过<code>createRelationshipFrom</code>和<code>createRelationshipTo</code>来创建点对点的关系。客户端的作者很坑爹的在Graphdatabase._coffee中声明了一个<code>createRelationship</code>方法，但是没有实现，调用这个方法是不会有任何效果的。</p>

<h3>查询关系</h3>

<p><code>node-neo4j</code>中声明了四种方式来获取关于某个节点的关系，分别是
* node.getRelationships 获取与节点相关的所有关系
* node.outgoing         获取以该节点为起点的关系
* node.incoming         获取以该节点为终点的关系
* node.all              同getRelationships
这些方法最终都调用<code>_getRelationships</code>，虽然我们也能直接调用这个方法，不过既然人家已声明其为私有，那还是直接调用上面的方法比较好。下面举例：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">getNodeById</span> <span class="mi">2</span><span class="p">,</span> <span class="nf">(err, nBran)-&gt;</span>
</span><span class='line'>    <span class="nx">db</span><span class="p">.</span><span class="nx">getNodeById</span> <span class="mi">1</span><span class="p">,</span> <span class="nf">(err, nSnow)-&gt;</span>
</span><span class='line'>        <span class="nx">nSnow</span><span class="p">.</span><span class="nx">incoming</span> <span class="s">&#39;islittlebrotherof&#39;</span><span class="p">,</span> <span class="nf">(err, rel)-&gt;</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">rel</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">data</span>
</span></code></pre></td></tr></table></div></figure>


<p>假如关系类型(type)不存在或者没有关联到这个节点的关系，getRelationships返回rel为一个空数组。否则返回节点在这个类型的所有关系数组，<code>rel[0].data</code>则是获取关系的属性。</p>

<h3>根据关系种类查询</h3>

<p>neo4j的关系中还有个比较重要的概念是种类(type)，在<code>Cypher</code>中可以通过<code>type()</code>方法来获取某个关系的种类</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>start <span class="nv">r</span> <span class="o">=</span> rel<span class="o">(</span>*<span class="o">)</span> <span class="k">return </span><span class="nb">type</span><span class="o">(</span>r<span class="o">)</span>;
</span><span class='line'>+---------------------+
</span><span class='line'>| <span class="nb">type</span><span class="o">(</span>r<span class="o">)</span>             |
</span><span class='line'>+---------------------+
</span><span class='line'>| <span class="s2">&quot;islittlebrotherof&quot;</span> |
</span><span class='line'>+---------------------+
</span><span class='line'>1 row
</span><span class='line'>0 ms
</span></code></pre></td></tr></table></div></figure>


<p>在<code>node-neo4j</code>中，<code>getRelationships</code>可以获取某节点某个种类的关系，</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">getNodeById</span> <span class="mi">13</span><span class="p">,</span> <span class="nf">(err, bran)-&gt;</span>
</span><span class='line'>    <span class="nx">bran</span><span class="p">.</span><span class="nx">getRelationships</span> <span class="s">&#39;islittlebrotherof&#39;</span><span class="p">,</span> <span class="nf">(err, rel)-&gt;</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">rel</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">data</span>
</span></code></pre></td></tr></table></div></figure>


<p>callback中返回的是一个关系对象数组。</p>

<h3>万能的query</h3>

<p>db对象上有一个万能的<code>query</code>方法，就是直接通过<code>Cypher</code>语句得到查询结果啦，这个弥补了作者很多没有实现的方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初试图形数据库 neo4j]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/01/23/chu-shi-tu-xing-shu-ju-ku-neo4j/"/>
    <updated>2013-01-23T11:25:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/01/23/chu-shi-tu-xing-shu-ju-ku-neo4j</id>
    <content type="html"><![CDATA[<h2>安装</h2>

<p>作为一个java软件，就得充分发挥它<code>Write Once, Run Anywhere</code>的精神。直接下载tarball，解压后运行即可。官方还很贴心的提供了一个init脚本(./bin/neo4j)，链接到init.d下就可以开搞啦。</p>

<p>默认的服务实例在localhost:7474，其余配置还是值得好好研究一番的。</p>

<h2>neo4j shell</h2>

<p>neo4j提供了一种叫做<code>Cypher Query Language</code>的查询方言，可以看做是图形数据库的sql，neo4j还提供了一个<code>neo4j-shell</code>用于做查询交互，在命令行下可以使用<code>./bin/neo4j-shell</code>来开启，web中也有一个tab叫做<code>power-tool console</code>可以使用neo4j-shell。</p>

<h3>增删改节点</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 创建节点</span>
</span><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>CREATE <span class="nv">n</span> <span class="o">=</span> <span class="o">{</span> name : <span class="s1">&#39;Andres&#39;</span>, title : <span class="s1">&#39;Developer&#39;</span> <span class="o">}</span> RETURN n;
</span><span class='line'>+-------------------------------------------+
</span><span class='line'>| n                                         |
</span><span class='line'>+-------------------------------------------+
</span><span class='line'>| Node<span class="o">[</span>37<span class="o">]{</span>name:<span class="s2">&quot;Andres&quot;</span>,title:<span class="s2">&quot;Developer&quot;</span><span class="o">}</span> |
</span><span class='line'>+-------------------------------------------+
</span><span class='line'>1 row
</span><span class='line'>Nodes created: 1
</span><span class='line'>Properties <span class="nb">set</span>: 2
</span><span class='line'>8 ms
</span><span class='line'><span class="c"># 修改节点</span>
</span><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>START <span class="nv">n</span> <span class="o">=</span> node<span class="o">(</span>37<span class="o">)</span> SET n.surname <span class="o">=</span> <span class="s1">&#39;Taylor&#39;</span> RETURN n;
</span><span class='line'>+------------------------------------------------------------+
</span><span class='line'>| n                                                          |
</span><span class='line'>+------------------------------------------------------------+
</span><span class='line'>| Node<span class="o">[</span>37<span class="o">]{</span>name:<span class="s2">&quot;Andres&quot;</span>,title:<span class="s2">&quot;Developer&quot;</span>,surname:<span class="s2">&quot;Taylor&quot;</span><span class="o">}</span> |
</span><span class='line'>+------------------------------------------------------------+
</span><span class='line'>1 row
</span><span class='line'>Properties <span class="nb">set</span>: 1
</span><span class='line'>15 ms
</span><span class='line'><span class="c"># 删除节点</span>
</span><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>START <span class="nv">n</span> <span class="o">=</span> node<span class="o">(</span>37<span class="o">)</span> DELETE n;
</span><span class='line'>+-------------------+
</span><span class='line'>| No data returned. |
</span><span class='line'>+-------------------+
</span><span class='line'>Nodes deleted: 1
</span><span class='line'>4 ms
</span></code></pre></td></tr></table></div></figure>


<h3>创建关系</h3>

<p>图形数据库最重要的一个概念就是关系(relationship)，各个节点直接通过双向或单向的关系连接在一起，这样才能从一个节点查找到其他的节点，这种设计在某些场景下会让查询变得更加高效而灵活，例如社交网络中的好友关系，人立方中查找任意两人之间的亲友，假如使用传统的关系数据库，查找朋友的朋友就会变得非常的困难，其耗时也是指数型的增长，而使用图形数据库，则可以保持线性的效率。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 创建两个节点的关系</span>
</span><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>START <span class="nv">a</span> <span class="o">=</span> node<span class="o">(</span>34<span class="o">)</span>, <span class="nv">b</span> <span class="o">=</span> node<span class="o">(</span>36<span class="o">)</span> CREATE a-<span class="o">[</span>r:knowns<span class="o">]</span>-&gt;b RETURN r;
</span><span class='line'>+---------------+
</span><span class='line'>| r             |
</span><span class='line'>+---------------+
</span><span class='line'>| :knowns<span class="o">[</span>0<span class="o">]</span> <span class="o">{}</span> |
</span><span class='line'>+---------------+
</span><span class='line'>1 row
</span><span class='line'>Relationships created: 1
</span><span class='line'>20 ms
</span><span class='line'><span class="c"># 查找关系</span>
</span><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>start <span class="nv">r</span> <span class="o">=</span> rel<span class="o">(</span>0<span class="o">)</span> <span class="k">return </span>r;
</span><span class='line'>+-----------------------------------+
</span><span class='line'>| r                                 |
</span><span class='line'>+-----------------------------------+
</span><span class='line'>| :isdogof<span class="o">[</span>0<span class="o">]</span> <span class="o">{</span>ctime:1359365331933<span class="o">}</span> |
</span><span class='line'>+-----------------------------------+
</span><span class='line'>1 row
</span><span class='line'>1 ms
</span><span class='line'><span class="c"># 删除某节点和它的所有关系</span>
</span><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>START <span class="nv">n</span> <span class="o">=</span> node<span class="o">(</span>34<span class="o">)</span> MATCH n-<span class="o">[</span>r<span class="o">]</span>-<span class="o">()</span> DELETE n, r;
</span><span class='line'>+-------------------+
</span><span class='line'>| No data returned. |
</span><span class='line'>+-------------------+
</span><span class='line'>Nodes deleted: 1
</span><span class='line'>Relationships deleted: 3
</span><span class='line'>3 ms
</span><span class='line'><span class="c"># 查找节点的关系</span>
</span><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>start <span class="nv">a</span> <span class="o">=</span> node<span class="o">(</span>2<span class="o">)</span> match a&lt;-<span class="o">[</span>r:isfamilyof<span class="o">]</span>-&gt;b RETURN a,r,b;
</span><span class='line'>+----------------------------------------------------------------------------------------+
</span><span class='line'>| a                           | r                          | b                           |
</span><span class='line'>+----------------------------------------------------------------------------------------+
</span><span class='line'>| Node<span class="o">[</span>2<span class="o">]{</span>name:<span class="s2">&quot;bran&quot;</span>,age:10<span class="o">}</span> | :isfamilyof<span class="o">[</span>2<span class="o">]</span> <span class="o">{</span>ctime:200<span class="o">}</span> | Node<span class="o">[</span>1<span class="o">]{</span>name:<span class="s2">&quot;snow&quot;</span>,age:17<span class="o">}</span> |
</span><span class='line'>+----------------------------------------------------------------------------------------+
</span></code></pre></td></tr></table></div></figure>


<p>有意思的是注意其中<code>CREATE a-[r:knowns]-&gt;b</code>中的箭头走向表示这种关系的指向，我们可以通过<code>CREATE a&lt;-[r:knowns]-b</code>来创建一个b到a的关系，但是当我想用<code>CREATE a&lt;-[r:knowns]-&gt;b</code>来创建一个双向关系时却没有成功，仍然只创建了从a到b的关系。而在查找某个节点的关系时，双向箭头确是起作用的，应该算做一个bug。</p>

<h3>删除所有节点和关系</h3>

<p><code>Cypher</code>中可以使用通配符<code>*</code>来找出所有的节点或者关系，那么假如我们需要删除所有节点，语句如下</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 如果节点上还有对应的关系，该节点是无法删除的，所以需要先删除所有关系</span>
</span><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>start <span class="nv">r</span> <span class="o">=</span> rel<span class="o">(</span>*<span class="o">)</span> delete r;
</span><span class='line'>+--------------------------------------------+
</span><span class='line'>| No data returned, and nothing was changed. |
</span><span class='line'>+--------------------------------------------+
</span><span class='line'>0 ms
</span><span class='line'><span class="c"># 删除节点</span>
</span><span class='line'>neo4j-sh <span class="o">(</span>?<span class="o">)</span><span class="nv">$ </span>start <span class="nv">n</span> <span class="o">=</span> node<span class="o">(</span>*<span class="o">)</span> delete n;
</span><span class='line'>+-------------------+
</span><span class='line'>| No data returned. |
</span><span class='line'>+-------------------+
</span><span class='line'>Nodes deleted: 2
</span><span class='line'>4 ms
</span></code></pre></td></tr></table></div></figure>


<p>删除所有节点后，在web端显示的节点数和关系数可能会对不上真实的数据，这些数量官方叫做&#8221;Primitive count&#8221;，其实在<code>neo4j-shell</code>下可以用下面的命令得到，按字面意思应该表示一个估算值，并不准确。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>neo4j-sh <span class="o">(</span>0<span class="o">)</span><span class="nv">$ </span>dbinfo -g <span class="s2">&quot;Primitive count&quot;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;NumberOfNodeIdsInUse&quot;</span>: 1,
</span><span class='line'>  <span class="s2">&quot;NumberOfPropertyIdsInUse&quot;</span>: 0,
</span><span class='line'>  <span class="s2">&quot;NumberOfRelationshipIdsInUse&quot;</span>: 0,
</span><span class='line'>  <span class="s2">&quot;NumberOfRelationshipTypeIdsInUse&quot;</span>: 0
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在自己看来，<code>Cypher Query Language</code>的增删改语句还是比较直观的，但是一旦牵涉到关系就有点没节操了，一句查询中一半的操作符，真是让人看花眼，相较之下还是sql发展的比较成熟，也更易为人所接受了。<a href="http://docs.neo4j.org/chunked/milestone/cypher-query-lang.html">更多的操作符和更多的语法</a></p>

<p>不过，各种neo4j的客户端都将晦涩的<code>Cypher</code>语言封装起来，提供了可读性更高的接口方法，下面就找个客户端来试用一下。</p>

<h2>nodejs bundle</h2>

<p>官网上给出了java和python版本的实例，我等屌丝玩点轻量级的，这里找了一个<a href="https://github.com/thingdom/node-neo4j">nodejs的客户端</a>，初窥图形数据库的魅力。</p>

<h3>创建及修改节点</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">neo4j = </span><span class="nx">require</span> <span class="s">&#39;neo4j&#39;</span>     <span class="c1">#使用coffee-script，那就尽量写的更coffee一点儿吧</span>
</span><span class='line'><span class="nv">db = </span><span class="k">new</span> <span class="nx">neo4j</span><span class="p">.</span><span class="nx">GraphDatabase</span><span class="p">(</span><span class="s">&#39;http://localhost:7474&#39;</span><span class="p">)</span> <span class="c1">#连接默认的REST端口</span>
</span><span class='line'><span class="nx">node</span><span class="p">.</span><span class="nx">createNode</span> <span class="p">{</span>             <span class="c1">#初始化一个节点</span>
</span><span class='line'>    <span class="nv">username: </span><span class="s">&#39;bran&#39;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">node</span><span class="p">.</span><span class="nx">save</span> <span class="nf">(err, node)-&gt;</span>       <span class="c1">#需要save才能真正的保存这个节点到数据库</span>
</span><span class='line'>    <span class="nv">node.data = </span><span class="p">{</span>           <span class="c1">#可以通过直接修改node的data属性来修改node值</span>
</span><span class='line'>        <span class="nv">username: </span><span class="s">&#39;bran&#39;</span>
</span><span class='line'>        <span class="nv">nickname: </span><span class="s">&#39;bird man&#39;</span>
</span><span class='line'>        <span class="nv">email: </span><span class="s">&#39;bran@gmail.com&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">node</span><span class="p">.</span><span class="nx">save</span><span class="p">()</span>             <span class="c1">#不要忘了再次保存</span>
</span></code></pre></td></tr></table></div></figure>


<h2>备份数据库</h2>

<p>之前造出了那么多的脏数据，有点洁癖的人都想要把数据清理一下吧。网上找了找，发现只有&#8217;enterprise&#8217;版才有export的功能，这不是明摆着鄙视我等屌丝么。在<a href="http://www.mail-archive.com/user@lists.neo4j.org/msg08932.html">这里</a>(翻墙可入)有兄台说了一个很暴力的办法，直接删除<code>data/graph.db</code>文件夹，我试了一下，确实可行，重启后世界干干净净，只剩下了0号node，果断再用<code>start n = node(0) delete n;</code>删除之。这大概也是nosql的好处，数据就是文件，取消了维护索引，关系等等的麻烦，随去随用，冷备份和迁移的时候也简单，直接copy文件夹即可。</p>

<h2>参考文档</h2>

<ul>
<li><a href="http://docs.neo4j.org/chunked/milestone/">v1.9手册</a></li>
<li><a href="http://docs.neo4j.org.cn/">v1.8中文开发文档</a></li>
<li><a href="http://coffeedoc.info/github/thingdom/node-neo4j/master/">node-neo4j文档</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[awk 学习笔记(2)]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/01/21/awk-xue-xi-bi-ji-2/"/>
    <updated>2013-01-21T17:42:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/01/21/awk-xue-xi-bi-ji-2</id>
    <content type="html"><![CDATA[<h2>常用的选项</h2>

<ul>
<li>-F 指定分隔符</li>
<li>-f 指定调用脚本，可以多次引用，不同文件会被合并成一个awk脚本</li>
<li>-d 输出所有变量到文件，默认输出到awkvars.out，也可以通过在-d后加文件路径来指定文件，但是注意-d与文件名之间不能有空格。调试的时候这个选项会非常有用。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>awk -d./awk.dump <span class="s1">&#39;BEGIN { foo = &quot;test&quot; } /^foo/ { print $0 }&#39;</span> BBS-list
</span><span class='line'><span class="nv">$ </span>cat ./awk.dump
</span><span class='line'>ARGC: 2
</span><span class='line'>ARGIND: 1
</span><span class='line'>ARGV: array, 2 elements
</span><span class='line'>foo: <span class="s2">&quot;test&quot;</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>-p 将命令行下的awk脚本格式化输出到awkprof.out文件，可以在-p后加文件路径来指定文件，注意也不能有空格</li>
<li>-v 预设置awk程序变量，可以设置多次</li>
</ul>


<h2>分隔符的四种形式</h2>

<ul>
<li><code>-F " "</code>      默认，以空格或tab分隔，首尾的空格会被排除掉</li>
<li><code>-F "a"</code>      以普通字符串分隔，用户指定</li>
<li><code>-F "[: ]"</code>   以正则表达式分隔，一般在设定多个分隔符时比较有用（如右边就是按<code>:</code>或空格分隔）</li>
<li><code>-F ""</code>       每个字符都是单独的一列，只在gawk中支持</li>
</ul>


<h2>@include</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='awk'><span class='line'><span class="err">@</span><span class="o">in</span><span class="nx">clude</span> <span class="s1">&#39;./libfoo.awk&#39;</span>
</span><span class='line'><span class="nx">END</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">print</span> <span class="s2">&quot;end of file&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>多行记录</h2>

<p>有些文件中相关联的数据可能会分为多行显示，<a href="http://www.gnu.org/software/gawk/manual/gawk.html#Multiple-Line">看手册中的例子</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Jane Doe
</span><span class='line'>123 Main Street
</span><span class='line'>Anywhere, SE 12345-6789
</span><span class='line'>
</span><span class='line'>John Smith
</span><span class='line'>456 Tree-lined Avenue
</span><span class='line'>Smallville, MW 98765-4321</span></code></pre></td></tr></table></div></figure>


<p>很明显每个块中的数据是有联系的，然后每个块都以一行空字符分割，那么分析的awk脚本可以写成这样。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='awk'><span class='line'><span class="nx">BEGIN</span> <span class="p">{</span> <span class="nb">RS</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="p">;</span> <span class="nb">FS</span> <span class="o">=</span> <span class="s2">&quot;\n&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kr">print</span> <span class="s2">&quot;Name is:&quot;</span><span class="p">,</span> <span class="o">$</span><span class="mi">1</span>
</span><span class='line'>    <span class="kr">print</span> <span class="s2">&quot;Address is:&quot;</span><span class="p">,</span> <span class="o">$</span><span class="mi">2</span>
</span><span class='line'>    <span class="kr">print</span> <span class="s2">&quot;City and State are:&quot;</span><span class="p">,</span> <span class="o">$</span><span class="mi">3</span>
</span><span class='line'>    <span class="kr">print</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的RS也是支持正则表达式的</p>

<h2>格式化控制符</h2>

<p>OFMT与printf中用到的格式化控制符可以参考c中的printf，具体可以<a href="http://www.gnu.org/software/gawk/manual/gawk.html#Control-Letters">参考手册</a></p>

<h2>I/O</h2>

<p>awk可以用<code>&gt;</code>,<code>&gt;&gt;</code>,<code>|</code>将输出定向到文件或管道，但需要注意的是后面的文件名或命令都需要用双引号包起来。</p>

<h2>switch</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>top -bn1|grep java|grep -v grep|awk <span class="s1">&#39;{ switch ($6) { case /m$/: print $6*1024;break; default: print $6; } }&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>switch语句与C中相同，注意break的使用。此外，在兼容模式下不可用。</p>

<h2>man tag</h2>

<p><a href="http://www.gnu.org/software/gawk/manual/gawk.html#Special-Files">Special-Files</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[awk 学习笔记(1)]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/01/16/awk-xue-xi-bi-ji-1/"/>
    <updated>2013-01-16T21:46:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/01/16/awk-xue-xi-bi-ji-1</id>
    <content type="html"><![CDATA[<h2>第一个awk程序</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='awk'><span class='line'><span class="c1">#!/bin/awk -f</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kr">print</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个程序会将所有的输入原封不动的输出，直到EOF(ctrl+d)</p>

<h2>在shell中使用awk</h2>

<h3>命令行</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>awk <span class="s1">&#39;BEGIN { print &quot;Here is a single quote &lt;&#39;</span><span class="se">\&#39;</span><span class="s1">&#39;&gt;&quot; }&#39;</span>
</span><span class='line'>Here is a single quote &lt;<span class="err">&#39;</span>&gt;
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，在命令行下引号的嵌套可能会造成一些难以预料的错误，假如在awk脚本内需要用到单引号，那就在它之前使用转义符<code>\</code>，并且不要忘了用另一个单引号结束它前面的字符，就上上面做的那样，实际分成了三段awk脚本，shell将他们链接起来之后实际就成了<code>BEGIN { print "Here is a single quote &lt;'&gt;" }</code>。</p>

<h3>在shell文件中</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">FIND_DATA</span><span class="o">=</span><span class="k">$(</span>awk <span class="s1">&#39;</span>
</span><span class='line'><span class="s1">BEGIN {</span>
</span><span class='line'><span class="s1">    print &quot;here is a single quote &lt;&#39;</span><span class="se">\&#39;</span><span class="s1">&#39;&gt;&quot;</span>
</span><span class='line'><span class="s1">}</span>
</span><span class='line'><span class="s1">&#39;</span><span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>有的时候awk会写的很长，这个时候需要换行，直接用单引号两边包住即可，注意脚本中的单引号还是需要转义的。</p>

<h2>使用正则表达式</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>awk <span class="s1">&#39;/^foo/ { print $0 }&#39;</span> BBS-list
</span><span class='line'><span class="nv">$ </span>awk <span class="s1">&#39;/^foo/ { print $0 }</span>
</span><span class='line'><span class="s1">&gt; /foo/ { print $0 }&#39;</span> BBS-list
</span></code></pre></td></tr></table></div></figure>


<p>上面的命令在BBS-list中匹配出所有以<code>foo</code>开头的行，多个表达式可以用在同一行上，会将匹配结果打印在不同行上。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>awk <span class="s1">&#39;{ if($1 ~ /foo$/) print $0 }&#39;</span> BBS-list
</span><span class='line'>macfoo       555-6480     1200/300          A
</span><span class='line'>sabafoo      555-2127     1200/300          C
</span></code></pre></td></tr></table></div></figure>


<p>在变量上使用正则表达式，使用<code>~</code>或<code>!~</code>符号，能满足多数的应用。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>awk <span class="s1">&#39;{ REGEXP = &quot;^foo&quot;; if($1 ~ REGEXP) print $0 }&#39;</span> BBS-list
</span></code></pre></td></tr></table></div></figure>


<p>动态的设置正则表达式，变量中需要省去两边的<code>/</code>。</p>

<h2>BEGIN/END</h2>

<p>开头和结尾的两块表达式，可以用来做一些全局参数设定和数据统计。</p>

<h2>有用的内置参数</h2>

<ul>
<li>FS            定义分隔符</li>
<li>OFS           定义输出分隔符</li>
<li>NF            列数</li>
<li>NR            行号</li>
<li>RS            输入条目分隔符，awk按这个字符来将整个文本分成不同条记录(默认为&#8221;\n&#8221;)</li>
<li>ORS           输出条目分隔符</li>
<li>IGNORECASE=1  忽略大小写(只支持gawk)</li>
<li>FIELDWIDTHS   指定每列的宽度(只支持gawk)，实际场景中貌似用处不大，除非原文本的格式本身就非常工整(每个field的字符数相等)，下面是<code>FS</code>变量可能会影响<code>FIELDWIDTHS</code>的地方</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>awk <span class="s1">&#39;BEGIN{FS = &quot;a&quot;;FIELDWIDTHS= &quot;4 4&quot;}{print $1, FS}&#39;</span> BBS-list <span class="c"># FS不生效</span>
</span><span class='line'><span class="nv">$ </span>awk <span class="s1">&#39;BEGIN{FIELDWIDTHS= &quot;4 4&quot;;FS = &quot;a&quot;}{print $1, FS}&#39;</span> BBS-list <span class="c"># FIELDWIDTHS不生效</span>
</span><span class='line'><span class="nv">$ </span>awk -Fa <span class="s1">&#39;BEGIN{FIELDWIDTHS= &quot;4 4&quot;}{print $1, FS}&#39;</span> BBS-list <span class="c"># FS不生效</span>
</span><span class='line'><span class="c"># 总而言之，就是哪个在后，哪个就优先。</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>PROCINFO      内置数组，用于记录一些程序信息，包括分隔符类型，进程号，用户组等等</li>
<li>FPAT          gawk特有的一个变量，不能与FS，FIELDWIDTHS共存，利用正则匹配出对应的field，手册中给出了一个常用的例子，匹配csv文件，<code>awk -vFPAT="([^,]+)|(\"[^\"]+\")" '{print "NF=",NF; for(i =1 ;i&lt;NF;i++){print $i}}' str.csv</code>，不过这种写法不够直观，也容易出错，用来应急可以，真刀真枪的干，还是求助其他语言吧</li>
<li>OFMT          输出格式，默认为<code>%.6g</code>，这在格式化数字时比较有效，例如用<code>%.1f</code>就是输出四舍五入后的一位小数，而用<code>%i</code>就是输出整数了。</li>
</ul>


<h2>有用的方法</h2>

<ul>
<li>length($1)    计算字符串或数组长度</li>
<li>srand()       生成随机数种子</li>
<li>rand()        生成一个浮点随机数，需要跟srand配合</li>
<li>tolower()     转小写</li>
<li>toupper()     转大写</li>
<li>sub()         <code>$ awk '{ sub(/foo/, "FOO"); print }' BBS-list</code>将foo字符串替换成FOO。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP 验证码]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2013/01/13/php-yan-zheng-ma/"/>
    <updated>2013-01-13T14:20:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2013/01/13/php-yan-zheng-ma</id>
    <content type="html"><![CDATA[<p>gd是一个强大的php图像处理库，最近在做验证码加强的策略，才发现用php作图也能玩出很多花样来。</p>

<h2>几个重要函数</h2>

<ul>
<li><a href="http://php.net/manual/en/function.imagecreatetruecolor.php">imagecreatetruecolor</a> 创建一张空的画布</li>
<li><a href="http://cn2.php.net/manual/zh/function.imagecreatefrompng.php">imagecreatefrompng</a> 从文件创建一个图片句柄</li>
<li><a href="http://cn2.php.net/manual/zh/function.imagecolorallocate.php">imagecolorallocate</a> 拾取一种颜色(rgb)</li>
<li><a href="http://cn2.php.net/manual/zh/function.imagettftext.php">imagettftext</a> 向画布写入文字</li>
<li><a href="http://cn2.php.net/manual/zh/function.imagecopy.php">imagecopy</a> 合并两张图片，可指定拷贝区域及大小</li>
<li><a href="http://cn2.php.net/manual/zh/function.imagecolorat.php">imagecolorat</a> 从图片指定像素点拾取一种颜色</li>
<li><a href="http://cn2.php.net/manual/zh/function.imagesetpixel.php">imagesetpixel</a> 画一个像素点</li>
<li><a href="http://cn2.php.net/manual/zh/function.imagearc.php">imagearc</a> 画一个椭圆，截取部分可用来绘制曲线</li>
</ul>


<p>php绘图用的最频繁的地方大概就是生成验证码了，我们最常见的验证码数字加英文的组合，生成这种验证码很简单，下面几行代码就可以搞定</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">genCode</span><span class="p">(</span><span class="nv">$n</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$dict</span> <span class="o">=</span> <span class="s1">&#39;ABCDEFGHIJKLNMPQRSTUVWXYZ123456789&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$dictlen</span> <span class="o">=</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$dict</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$image</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">image</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$verify</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$fontfile</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">sourcedir</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fonts</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="nv">$colors</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">imagecolorallocate</span><span class="p">(</span><span class="nv">$image</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="p">,</span> <span class="c1">//红</span>
</span><span class='line'>        <span class="nx">imagecolorallocate</span><span class="p">(</span><span class="nv">$image</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span> <span class="p">,</span> <span class="c1">//蓝</span>
</span><span class='line'>        <span class="nx">imagecolorallocate</span><span class="p">(</span><span class="nv">$image</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="p">,</span> <span class="c1">//黑</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$n</span><span class="p">;</span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$verify</span><span class="o">.=</span> <span class="nv">$code</span> <span class="o">=</span> <span class="nx">substr</span><span class="p">(</span><span class="nv">$dict</span><span class="p">,</span> <span class="nx">mt_rand</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$dictlen</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">imagettftext</span><span class="p">(</span><span class="nv">$image</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="nx">mt_rand</span><span class="p">(</span><span class="o">-</span><span class="mi">15</span><span class="p">,</span> <span class="mi">15</span><span class="p">)</span> <span class="p">,</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">*</span> <span class="mi">15</span><span class="p">)</span> <span class="o">+</span> <span class="mi">3</span><span class="p">,</span> <span class="nx">mt_rand</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">25</span><span class="p">)</span> <span class="p">,</span> <span class="nv">$colors</span><span class="p">[</span><span class="nb">array_rand</span><span class="p">(</span><span class="nv">$colors</span><span class="p">)</span> <span class="p">],</span> <span class="nv">$fontfile</span><span class="p">,</span> <span class="nv">$code</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>效果图：</p>

<blockquote><p><img src="http://sailxjx.github.com/blog/images/u/verify-code-simple.png" title="&#34;verify-code-simple&#34;" alt="&#34;verify-code-simple&#34;"></p></blockquote>

<p>其中合并了一张纹理背景并随机绘制出文字的颜色。下面我们再加点料，</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">addNoise</span><span class="p">(</span><span class="nv">$n</span> <span class="o">=</span> <span class="mi">50</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$image</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">image</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$color</span> <span class="o">=</span> <span class="nx">imagecolorallocate</span><span class="p">(</span><span class="nv">$image</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$n</span><span class="p">;</span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//噪声点</span>
</span><span class='line'>        <span class="nx">imagesetpixel</span><span class="p">(</span><span class="nv">$image</span><span class="p">,</span> <span class="nx">mt_rand</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">width</span><span class="p">)</span> <span class="p">,</span> <span class="nx">mt_rand</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">height</span><span class="p">)</span> <span class="p">,</span> <span class="nv">$color</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">addLine</span><span class="p">(</span><span class="nv">$n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$image</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">image</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$color</span> <span class="o">=</span> <span class="nx">imagecolorallocate</span><span class="p">(</span><span class="nv">$image</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$n</span><span class="p">;</span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">imagearc</span><span class="p">(</span><span class="nv">$image</span><span class="p">,</span> <span class="nx">rand</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">width</span> <span class="o">+</span> <span class="mi">10</span><span class="p">)</span> <span class="p">,</span> <span class="nx">rand</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="p">,</span> <span class="nx">rand</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">width</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">10</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">width</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">40</span><span class="p">)</span> <span class="p">,</span> <span class="nx">rand</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">height</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">height</span> <span class="o">+</span> <span class="mi">20</span><span class="p">)</span> <span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">360</span><span class="p">,</span> <span class="nv">$color</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的方法往图像中加入了50个噪点和一条干扰曲线，于是验证码变成了这样：</p>

<blockquote><p><img src="http://sailxjx.github.com/blog/images/u/verify-code-noise.png" title="&#34;verify-code-noise&#34;" alt="&#34;verify-code-noise&#34;"></p></blockquote>

<p>下面来实现汉字和带公式的验证码</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">genHanzi</span><span class="p">(</span><span class="nv">$n</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$dict</span> <span class="o">=</span> <span class="s2">&quot;的一是在了不和有大这主中人上为们地个用工时要&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$dictlen</span> <span class="o">=</span> <span class="nb">mb_strlen</span><span class="p">(</span><span class="nv">$dict</span><span class="p">,</span> <span class="s1">&#39;UTF-8&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$image</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">image</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$fontfile</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">sourcedir</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fonts</span><span class="p">[</span><span class="nb">array_rand</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fonts</span><span class="p">)</span> <span class="p">];</span>
</span><span class='line'>    <span class="nv">$color</span> <span class="o">=</span> <span class="nx">imagecolorallocate</span><span class="p">(</span><span class="nv">$image</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$verify</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$n</span><span class="p">;</span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$verify</span><span class="o">.=</span> <span class="nv">$word</span> <span class="o">=</span> <span class="nb">mb_substr</span><span class="p">(</span><span class="nv">$dict</span><span class="p">,</span> <span class="nx">mt_rand</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$dictlen</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;UTF-8&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">imagettftext</span><span class="p">(</span><span class="nv">$image</span><span class="p">,</span> <span class="nx">rand</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="mi">22</span><span class="p">)</span> <span class="p">,</span> <span class="nx">rand</span><span class="p">(</span><span class="o">-</span><span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span> <span class="p">,</span> <span class="mi">5</span> <span class="o">+</span> <span class="nv">$i</span> <span class="o">*</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="nv">$color</span><span class="p">,</span> <span class="nv">$fontfile</span><span class="p">,</span> <span class="nv">$word</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">verify</span> <span class="o">=</span> <span class="nv">$verify</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">genFomula</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$symbols</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;＋&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;+&#39;</span><span class="p">,</span><span class="s1">&#39;－&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span><span class="s1">&#39;×&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span><span class="s1">&#39;加&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;+&#39;</span><span class="p">,</span><span class="s1">&#39;减&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span><span class="s1">&#39;乘&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;*&#39;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>    <span class="nv">$numbers</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;0&#39;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span><span class="s1">&#39;1&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span><span class="s1">&#39;2&#39;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span><span class="s1">&#39;3&#39;</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span><span class="s1">&#39;4&#39;</span> <span class="o">=&gt;</span> <span class="mi">4</span><span class="p">,</span><span class="s1">&#39;5&#39;</span> <span class="o">=&gt;</span> <span class="mi">5</span><span class="err">，</span><span class="s1">&#39;叁&#39;</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span><span class="s1">&#39;肆&#39;</span> <span class="o">=&gt;</span> <span class="mi">4</span><span class="p">,</span><span class="s1">&#39;伍&#39;</span> <span class="o">=&gt;</span> <span class="mi">5</span><span class="p">,</span><span class="s1">&#39;陆&#39;</span> <span class="o">=&gt;</span> <span class="mi">6</span><span class="p">,</span><span class="s1">&#39;柒&#39;</span> <span class="o">=&gt;</span> <span class="mi">7</span><span class="p">,</span><span class="s1">&#39;捌&#39;</span> <span class="o">=&gt;</span> <span class="mi">8</span><span class="p">,</span><span class="s1">&#39;玖&#39;</span> <span class="o">=&gt;</span> <span class="mi">9</span><span class="p">,</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>    <span class="nv">$image</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">image</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$fontfile</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">sourcedir</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fonts</span><span class="p">[</span><span class="nb">array_rand</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fonts</span><span class="p">)</span> <span class="p">];</span>
</span><span class='line'>    <span class="nv">$numidx1</span> <span class="o">=</span> <span class="nb">array_rand</span><span class="p">(</span><span class="nv">$numbers</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$num1</span> <span class="o">=</span> <span class="nv">$numbers</span><span class="p">[</span><span class="nv">$numidx1</span><span class="p">];</span>
</span><span class='line'>    <span class="nv">$symbol</span> <span class="o">=</span> <span class="nb">array_rand</span><span class="p">(</span><span class="nv">$symbols</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$color</span> <span class="o">=</span> <span class="nx">imagecolorallocate</span><span class="p">(</span><span class="nv">$image</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$numidx2</span> <span class="o">=</span> <span class="nb">array_rand</span><span class="p">(</span><span class="nv">$numbers</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$num2</span> <span class="o">=</span> <span class="nv">$numbers</span><span class="p">[</span><span class="nv">$numidx2</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$symbols</span><span class="p">[</span><span class="nv">$symbol</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39;-&#39;</span> <span class="o">||</span> <span class="nv">$num2</span> <span class="o">&lt;=</span> <span class="nv">$num1</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//减法结果不为负数</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">eval</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\$</span><span class="s2">verify = &quot;</span> <span class="o">.</span> <span class="s2">&quot;</span><span class="si">$num1</span><span class="s2">&quot;</span> <span class="o">.</span> <span class="nv">$symbols</span><span class="p">[</span><span class="nv">$symbol</span><span class="p">]</span> <span class="o">.</span> <span class="s2">&quot;</span><span class="si">$num2</span><span class="s2">;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$verify</span> <span class="o">=</span> <span class="nb">intval</span><span class="p">(</span><span class="nv">$verify</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$codelist</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="nv">$numidx1</span><span class="p">,</span>
</span><span class='line'>        <span class="nv">$symbol</span><span class="p">,</span>
</span><span class='line'>        <span class="nv">$numidx2</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;=&#39;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$codelist</span> <span class="k">as</span> <span class="nv">$i</span> <span class="o">=&gt;</span> <span class="nv">$code</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">imagettftext</span><span class="p">(</span><span class="nv">$image</span><span class="p">,</span> <span class="nx">mt_rand</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span> <span class="p">,</span> <span class="nx">mt_rand</span><span class="p">(</span><span class="o">-</span><span class="mi">15</span><span class="p">,</span> <span class="mi">15</span><span class="p">)</span> <span class="p">,</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">*</span> <span class="mi">18</span><span class="p">)</span> <span class="o">+</span> <span class="mi">3</span><span class="p">,</span> <span class="nx">mt_rand</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">25</span><span class="p">)</span> <span class="p">,</span> <span class="nv">$color</span><span class="p">,</span> <span class="nv">$fontfile</span><span class="p">,</span> <span class="nv">$code</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成汉字和上面的英文组合差不多，加个字典就可以，然后可以加入一下随机的字体变换，生成公式呢，其实也是预先定义好数字和符号的字典，靠随机组合来生成图片，然后吧计算结果记录下来就行了。</p>

<blockquote><p><img src="http://sailxjx.github.com/blog/images/u/verify-hanzi.png" title="&#34;verify-hanzi&#34;" alt="&#34;verify-hanzi&#34;">
<img src="http://sailxjx.github.com/blog/images/u/verify-fomula.png" title="&#34;verify-fomula&#34;" alt="&#34;verify-fomula&#34;"></p></blockquote>

<p>很多验证码中还会对字体进行扭曲，这会让做的人和看的人都比较纠结。目前的方法大致是先生成一张正常的图，然后拾取图中每个像素点进行正弦变换位置后填入另一张相同大小的图，注意两张图的背景需要一致，否则边缘的图片就很不和谐咯。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">public function twist() {</span>
</span><span class='line'><span class="x">    $distImage = imagecreatetruecolor($this-&gt;width, $this-&gt;height);</span>
</span><span class='line'><span class="x">    imagecopy($distImage, $this-&gt;backimg, 0, 0, 0, 0, $this-&gt;width, $this-&gt;height);</span>
</span><span class='line'><span class="x">    for ($x = 0;$x &lt; $this-&gt;width;$x++) {</span>
</span><span class='line'><span class="x">        for ($y = 0;$y &lt; $this-&gt;height;$y++) {</span>
</span><span class='line'><span class="x">            $rgb = imagecolorat($this-&gt;image, $x, $y);</span>
</span><span class='line'><span class="x">            imagesetpixel($distImage, (int)($x + sin($y / $this-&gt;height * 2 * M_PI - M_PI * 0.1) * 4) , $y, $rgb);</span>
</span><span class='line'><span class="x">        }</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">    $this-&gt;image = $distImage;</span>
</span><span class='line'><span class="x">    return $this;</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>效果图：</p>

<blockquote><p><img src="http://sailxjx.github.com/blog/images/u/verify-code-twist.png" title="&#34;verify-code-twist&#34;" alt="&#34;verify-code-twist&#34;"></p></blockquote>

<p>最后再加入一个gif动态图的例子，主要原理是预先生成每一帧的gif图像，然后合并为一张图片，对gif进行编码的类库使用的是网上下载的GIFEncoder，代码不多，但是够用。<code>less is more</code>嘛。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">public function genCodeAnimate($n = 4, $flags = 40) {</span>
</span><span class='line'><span class="x">    $dict = &#39;ABCDEFGHIJKLNMPQRSTUVWXYZ123456789&#39;;</span>
</span><span class='line'><span class="x">    $dictlen = strlen($dict);</span>
</span><span class='line'><span class="x">    $verify = &#39;&#39;;</span>
</span><span class='line'><span class="x">    $fontfile = $this-&gt;sourcedir . $this-&gt;fonts[0];</span>
</span><span class='line'><span class="x">    $colors = array(</span>
</span><span class='line'><span class="x">        imagecolorallocate($this-&gt;image, 255, 0, 0) , //红</span>
</span><span class='line'><span class="x">        imagecolorallocate($this-&gt;image, 0, 0, 255) , //蓝</span>
</span><span class='line'><span class="x">        imagecolorallocate($this-&gt;image, 0, 0, 0) , //黑</span>
</span><span class='line'><span class="x">    );</span>
</span><span class='line'><span class="x">    $fontColors = array();</span>
</span><span class='line'><span class="x">    $fontSizes = array();</span>
</span><span class='line'><span class="x">    $gifs = array();</span>
</span><span class='line'><span class="x">    for ($i = 0;$i &lt; $n;$i++) {</span>
</span><span class='line'><span class="x">        $verify.= substr($dict, mt_rand(0, $dictlen - 1) , 1);</span>
</span><span class='line'><span class="x">        $fontColors[$i] = $colors[array_rand($colors) ];</span>
</span><span class='line'><span class="x">        $fontSizes[$i] = rand(18, 22);</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">    for ($f = 0;$f &lt; $flags;$f++) {</span>
</span><span class='line'><span class="x">        $image = $this-&gt;imgClone($this-&gt;image);</span>
</span><span class='line'><span class="x">        $angle = - 15 + abs($f - $flags / 2) * 2; //角度</span>
</span><span class='line'><span class="x">        $y = 20 + abs($f - $flags / 2) * 0.5;</span>
</span><span class='line'><span class="x">        for ($i = 0;$i &lt; $n;$i++) {</span>
</span><span class='line'><span class="x">            $code = substr($verify, $i, 1);</span>
</span><span class='line'><span class="x">            imagettftext($image, $fontSizes[$i], $angle, ($i * 15) - 20 + abs($f - $flags / 2) * 5, $y, $fontColors[$i], $fontfile, $code);</span>
</span><span class='line'><span class="x">        }</span>
</span><span class='line'><span class="x">        header(&quot;Content-type: image/gif&quot;);</span>
</span><span class='line'><span class="x">        imagegif($image);</span>
</span><span class='line'><span class="x">        imagedestroy($image);</span>
</span><span class='line'><span class="x">        $gifs[] = ob_get_contents();</span>
</span><span class='line'><span class="x">        ob_clean();</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">    ob_start();</span>
</span><span class='line'><span class="x">    $gifEncoder = new GIFEncoder($gifs, 100, 0, 1, 0, 0, 1, &#39;bin&#39;);</span>
</span><span class='line'><span class="x">    header(&#39;Content-type: image/gif&#39;);</span>
</span><span class='line'><span class="x">    echo $gifEncoder-&gt;GetAnimation();</span>
</span><span class='line'><span class="x">    return $verify;</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>效果图：</p>

<blockquote><p><img src="http://sailxjx.github.com/blog/images/u/verify-code-animate.gif" title="&#34;verify-code-animate&#34;" alt="&#34;verify-code-animate&#34;"></p></blockquote>

<h2>备忘</h2>

<ul>
<li><code>imagecreate</code>也是一个创建图像的方法，不过相对于<code>imagecreatetruecolor</code>，它会使用第一次由<code>imagecolorallocate</code>生成的颜色作为背景色，比较坑爹，不推荐。</li>
</ul>


<h2>下载</h2>

<ul>
<li><a href="http://sailxjx.github.com/blog/patches/verify.zip">源码</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx+php-fpm 配置记录]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2012/12/24/nginx-plus-php-fpm-pei-zhi-ji-lu/"/>
    <updated>2012-12-24T22:03:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2012/12/24/nginx-plus-php-fpm-pei-zhi-ji-lu</id>
    <content type="html"><![CDATA[<h3>安装nginx</h3>

<p>安装过程没什么好说的，不过tarball中没有包含init脚本，官网wiki中提供了<a href="http://wiki.nginx.org/Nginx-init-ubuntu">一个ubuntu的版本</a>，其实在所有linux发行版中都可用，下载下来放到/etc/init.d/nginx，大功告成。</p>

<p>假如在启动过程中遇到<code>undefined function: log_daemon_msg</code>等等报错，那是缺少一些公用方法，下载或安装init-functions然后在头部引入即可，google到一个可用的<a href="http://www.linuxfromscratch.org/lfs/view/7.0/scripts/apds02.html">地址</a>，此外，假如使用的是ubuntu，在/lib/lsb/中有个文件。</p>

<h3>安装php-fpm</h3>

<p>fpm已经包含在php的远吗中，编译php的时候加上<code>--enable-fpm</code>即可，fpm的init脚本包含在<code>sapi/fpm/init.d.php-fpm</code>，稍加修改即可使用，非常贴心滴。默认配置文件<code>sapi/fpm/php-fm.conf</code>，我把它复制在/etc目录中以供调用。</p>

<h3>配置php-fpm</h3>

<p>fpm的配置文件已很多个pool块分割，global是全局配置，www是默认的pool，这里不做修改。</p>

<figure class='code'><figcaption><span>php-fpm.conf  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[global]</span>
</span><span class='line'><span class="na">user</span> <span class="o">=</span> <span class="s">tristan</span>
</span><span class='line'><span class="na">group</span> <span class="o">=</span> <span class="s">tristan</span>
</span><span class='line'><span class="na">pid</span> <span class="o">=</span> <span class="s">/var/run/php-fpm.pid</span>
</span><span class='line'><span class="na">error_log</span> <span class="o">=</span> <span class="s">/var/log/php/fpm.err.log</span>
</span><span class='line'><span class="c">; 下面三个值表示当一分钟内假如有10个子进程收到SIGSEGV或SIGBUS信号而退出的话，php-fpm会自动重启，应该是一种自我保护的机制</span>
</span><span class='line'><span class="err">emergency_restart_threshold</span> <span class="err">10</span>
</span><span class='line'><span class="err">emergency_restart_interval</span> <span class="err">1m</span>
</span><span class='line'><span class="err">process_control_timeout</span> <span class="err">10s</span>
</span><span class='line'><span class="c">; 超过十秒的慢请求会被记录到fpm.slow.$pool.log中并在errlog中产生一条notice记录</span>
</span><span class='line'><span class="na">request_slowlog_timeout</span> <span class="o">=</span> <span class="s">10s</span>
</span><span class='line'><span class="na">slowlog</span> <span class="o">=</span> <span class="s">/var/log/php/fpm.slow.$pool.log</span>
</span><span class='line'><span class="c">; 允许任意客户端链接</span>
</span><span class='line'><span class="na">listen.allowed_clients</span> <span class="o">=</span> <span class="s">any</span>
</span><span class='line'><span class="c">; 可以包含一些分散的config文件</span>
</span><span class='line'><span class="na">include</span><span class="o">=</span><span class="s">/etc/php-fpm.d/*.conf</span>
</span><span class='line'><span class="c">; 下面是www pool的配置</span>
</span><span class='line'><span class="k">[www]</span>
</span><span class='line'><span class="c">; 设置子进程相关</span>
</span><span class='line'><span class="na">pm</span> <span class="o">=</span> <span class="s">dynamic</span>
</span><span class='line'><span class="na">pm.max_children</span> <span class="o">=</span> <span class="s">5</span>
</span><span class='line'><span class="na">pm.start_servers</span> <span class="o">=</span> <span class="s">3</span>
</span><span class='line'><span class="na">pm.min_spare_servers</span> <span class="o">=</span> <span class="s">2</span>
</span><span class='line'><span class="na">pm.max_spare_servers</span> <span class="o">=</span> <span class="s">4</span>
</span><span class='line'><span class="na">pm.max_requests</span> <span class="o">=</span> <span class="s">200</span>
</span><span class='line'><span class="c">; 下面还可以用env设置一些环境变量</span>
</span><span class='line'><span class="na">env[PATH]</span> <span class="o">=</span> <span class="s">/usr/local/bin:/usr/bin:/bin</span>
</span><span class='line'><span class="na">env[TMP]</span> <span class="o">=</span> <span class="s">/tmp</span>
</span></code></pre></td></tr></table></div></figure>


<p>配置完成后，<code>/etc/init.d/php-fpm start</code>即可启动php-fpm，通过<code>netstat -anp</code>可以看到9000端口被php-fpm占用了。</p>

<h3>配置nginx</h3>

<p>下面到了最艰苦卓绝的工作了，配置nginx。</p>

<figure class='code'><figcaption><span>nginx </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user tristan;
</span><span class='line'>worker_processes 2;
</span><span class='line'>error_log  /var/log/nginx/error.log;
</span><span class='line'>pid        /var/run/nginx.pid;
</span><span class='line'>events {
</span><span class='line'>    worker_connections  1024;
</span><span class='line'>}
</span><span class='line'>http {
</span><span class='line'>    include       mime.types;
</span><span class='line'>    default_type  application/octet-stream;
</span><span class='line'>    sendfile        on; 
</span><span class='line'>    keepalive_timeout  65; 
</span><span class='line'>    gzip on; 
</span><span class='line'>    include /usr/local/nginx/conf/sites-enabled/*;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>主配置文件中基本没什么可写的，重点在对每个站点的配置上。</p>

<p>对静态站点的配置是最简单的，比如下面的配置就部署了一个bootstrap的demo站点</p>

<figure class='code'><figcaption><span>boot </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>    listen *:80;
</span><span class='line'>    server_name boot.local.com;
</span><span class='line'>    access_log  /var/log/nginx/boot.log;
</span><span class='line'>    location / {
</span><span class='line'>        root /home/tristan/coding/github/bootstrap/docs; #根目录
</span><span class='line'>        index index.html; #添加默认索引文件
</span><span class='line'>    }   
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>动态站点稍微麻烦一点，通过fastcgi模式，使用php-fpm配置一个动态站点。</p>

<figure class='code'><figcaption><span>fun </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>    listen *:80;
</span><span class='line'>    server_name fun.local.com;
</span><span class='line'>    access_log /var/log/nginx/fun.log;
</span><span class='line'>    location / { 
</span><span class='line'>        index index.php;
</span><span class='line'>        rewrite ^(.*)$ /index.php$1 last; #大部分站点都做成了单入口，将所有url rewrite到index文件
</span><span class='line'>    }   
</span><span class='line'>    location ~ ^/index.php {
</span><span class='line'>        root /home/tristan/coding/webdata/fun;
</span><span class='line'>        fastcgi_pass 127.0.0.1:9000;
</span><span class='line'>        include fastcgi_params;
</span><span class='line'>        if ($fastcgi_script_name ~ "^(.+?\.php)(/.+)$") {
</span><span class='line'>            set $real_script_name $1; 
</span><span class='line'>            set $path_info $2; 
</span><span class='line'>        }   
</span><span class='line'>        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
</span><span class='line'>        fastcgi_param PATH_INFO $path_info; 
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>值得注意的是，有些框架使用pathinfo作为路由依据，默认情况下nginx并不会将pathinfo传递给php-fpm，所以上面需要通过正则匹配出准确的pathinfo，通过fastcgi_param传给fpm</p>

<p>下面是一个使用minify的静态资源站点，其中既包含纯静态文件(css|js)，也包含由php压缩成的伪静态文件</p>

<figure class='code'><figcaption><span>static </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>    listen *:80;
</span><span class='line'>    server_name static.local.com;
</span><span class='line'>    access_log /var/log/nginx/static.log;
</span><span class='line'>    root /home/tristan/coding/webdata/static;
</span><span class='line'>    location / { 
</span><span class='line'>        autoindex on; 
</span><span class='line'>        index index.php;
</span><span class='line'>        rewrite ^/static/(.*)\.(js|css)$ /static/index.php?g=$1 last;
</span><span class='line'>    }   
</span><span class='line'>    location ~ index.php {
</span><span class='line'>        fastcgi_pass 127.0.0.1:9000;
</span><span class='line'>        include fastcgi_params;
</span><span class='line'>        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
</span><span class='line'>    }   
</span><span class='line'>    location ~ ^(?!\/static)(.*)\.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
</span><span class='line'>        access_log off; #关闭log
</span><span class='line'>        log_not_found off;
</span><span class='line'>        expires 30d; #纯静态文件设置缓存时间
</span><span class='line'>    }   
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>参考资料</h2>

<ul>
<li><a href="http://www.if-not-true-then-false.com/2011/nginx-and-php-fpm-configuration-and-optimizing-tips-and-tricks/">Nginx and PHP-FPM Configuration and Optimizing Tips and Tricks</a></li>
<li><a href="http://stackoverflow.com/questions/8265941/empty-value-to-path-info-in-nginx-returns-junk-value">stackoverflow: Empty value to PATH_INFO in nginx returns junk value</a></li>
<li><a href="http://wiki.nginx.org/HttpFastcgiModule">HttpFastcgiModule</a></li>
<li><a href="http://wiki.nginx.org/HttpRewriteModule">HttpRewriteModule</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux 登录用户管理]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2012/12/19/linux-deng-lu-yong-hu-guan-li/"/>
    <updated>2012-12-19T22:35:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2012/12/19/linux-deng-lu-yong-hu-guan-li</id>
    <content type="html"><![CDATA[<p>最近换了mac后，需要在公司和家中多地登录，两地的ip又没有设置成一样的，结果每次切换ip就发现ssh到虚拟机的终端没响应了，再连上之后，之前登录的用户就永远活在虚拟机心中啦~当然这也没什么，但是作为有一点点洁癖的我来说，不清除这几个用户总是一件不太舒服的事情，于是就去网上找找命令，结果发现找到的资料还挺齐全，学到不少，记录下来，以免下次忘了。</p>

<h3>who</h3>

<blockquote><p>root     tty1         2012-12-19 17:51</p>

<p>tristan  pts/0        2012-12-19 17:57 (macshare)</p>

<p>tristan  pts/1        2012-12-19 18:00 (macshare)</p></blockquote>

<p>这个命令不用说，大多数人都知道，查看当前登录用户，登录时间，终端号(tty)和远程登录终端号(pts)</p>

<h3>whoami</h3>

<p>这个命令有点意思，顾名思义，告诉<code>我是谁</code>，曾经有位buddy获得了root权限，但是当使用<code>cd ~</code>的时候仍然回到了先前用户的主目录，这个时候<code>whoami</code>告诉他确实已经是root用户了，仔细想想，原来他是用<code>sudo -s</code>切到了root，所有环境变量沿用了老用户的。说明这个短小的命令还是挺实用啦。</p>

<h3>w [user]</h3>

<blockquote><p>18:43:48 up  9:39,  3 users,  load average: 0.06, 0.06, 0.06</p>

<p>USER     TTY       LOGIN@   IDLE   JCPU   PCPU WHAT</p>

<p>root     tty1      17:51   47:01   0.43s  0.40s -zsh</p>

<p>tristan  pts/0     17:57   30:20   0.44s  0.44s -zsh</p>

<p>tristan  pts/1     18:00    0.00s  0.18s  0.00s w</p></blockquote>

<p>更短的命令，却比who更强大。</p>

<p>第一行数值分别表示当前时间，系统运行时间，登录用户数，(1分钟，5分钟，15分钟)内的系统负载</p>

<p>第二行开始就是一个用户相关的表格了，每列的意思分别为：</p>

<ul>
<li>USER：显示登陆用户帐号名。</li>
<li>TTY：用户登录的终端号。</li>
<li>FROM：显示用户在何处登陆系统。</li>
<li>LOGIN@：是LOGIN AT的意思，表示登陆进入系统的时间。</li>
<li>IDLE：用户空闲时间，从用户上一次任务结束后，开始记时。</li>
<li>JCPU：一终端代号来区分，表示在某段时间内，所有与该终端相关的进程任务所耗费的CPU时间。</li>
<li>PCPU：指WHAT域的任务执行后耗费的CPU时间。</li>
<li>WHAT：表示当前执行的任务。</li>
</ul>


<h3>last [user]</h3>

<blockquote><p>tristan   ttys003                   Wed Dec 19 22:57   still logged in</p>

<p>tristan   ttys001                   Wed Dec 19 22:47   still logged in</p>

<p>tristan   ttys003                   Wed Dec 19 22:38 - 22:39  (00:01)</p></blockquote>

<p>这个命令显示用户的登录记录，后面可以跟用户名来只显示该用户的登录历史。一般还会搭配管道用<code>last | head</code>来显示最后登录历史或<code>last | grep still</code>来获取仍然登录中的用户</p>

<h3>ps -ef | grep [pts/0]</h3>

<blockquote><p>tristan   1042  1041  0 19:01 pts/0    00:00:00 -zsh</p>

<p>tristan   1916  1042  0 19:03 pts/0    00:00:00 ps -ef</p></blockquote>

<p>这个命令就是起初写这篇文章的用意啦，根据终端号(可以通过who命令查到)获取目标用户登录相关的pid，比如上面这个1042，然后使用<code>kill -9 1042</code>剔除这个用户，注意<code>kill</code>需要加上<code>-9</code>，默认的TERM信号是杀不了这个进程的。</p>

<h3>pkill -u [user]</h3>

<p>网上还有一种更简便的方法，根据用户名kill掉这个用户相关的所有进程，包括已这个用户身份运行的所有daemon进程，很黄很暴力，伤敌一千自损八百，不推荐。</p>

<h2>参考资料</h2>

<ul>
<li><p><a href="http://blog.csdn.net/linfengfeiye/article/details/4781507">Linux查看和剔除当前登录用户</a></p></li>
<li><p><a href="http://linux.about.com/library/cmd/blcmdl1_w.htm">Linux / Unix Command: w</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vagrant 笔记]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2012/12/11/vagrant-bi-ji/"/>
    <updated>2012-12-11T23:16:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2012/12/11/vagrant-bi-ji</id>
    <content type="html"><![CDATA[<h2><del>从virtualbox开始</del></h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitlabhq 部署小记]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2012/11/14/gitlabhq-bu-shu-xiao-ji/"/>
    <updated>2012-11-14T20:12:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2012/11/14/gitlabhq-bu-shu-xiao-ji</id>
    <content type="html"><![CDATA[<p>冬天来了，不知github是不是也去冬眠了，速度慢的像在爬，没办法，屌丝买不起vps，只能自己内网部一套开源的。</p>

<p>gitlabhq是github的一个开源版本，虽然不是官方的，但是已经做的有模有样，总之能想到的功能都已具备，放在国内随便改改UI就能上线建站的那种。安装文档那是写的相当滴详细，体现了码农罕有的耐性，查看文档请移步<a href="https://github.com/gitlabhq/gitlabhq/blob/master/doc/install/installation.md">gitlab文档</a></p>

<p>以前部署中在ssh上碰到一些问题，这次在<a href="https://github.com/mk-qi">@mk-qi</a>童鞋的点拨下，进展是相当滴顺利，下面记录一些部署过程中的问题和解决方法。</p>

<p>自动部署脚本如下，基本由文档转成，可以省掉很多事情(但是遇到问题要学会google哦)，假如使用的是ubuntu，官方以前也提供了一个一键安装脚本，后来不知怎么又去掉了，估计是计划赶不上变化吧</p>

<figure class='code'><figcaption><span>gitlabhq自动化部署脚本  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># add user git</span>
</span><span class='line'>sudo adduser --system --shell /bin/bash --gecos <span class="s1">&#39;git version control&#39;</span> --group --disabled-password --home /home/git git
</span><span class='line'><span class="c"># add user gitlab</span>
</span><span class='line'>sudo adduser --disabled-login --gecos <span class="s1">&#39;gitlab system&#39;</span> gitlab
</span><span class='line'><span class="c"># move user gitlab to group git</span>
</span><span class='line'>sudo usermod -a -G git gitlab
</span><span class='line'>sudo usermod -a -G gitlab git
</span><span class='line'><span class="c"># generate key</span>
</span><span class='line'>sudo -H -u gitlab ssh-keygen -q -N <span class="s1">&#39;&#39;</span> -t rsa -f /home/gitlab/.ssh/id_rsa
</span><span class='line'><span class="c"># clone gitlab&#39;s fork to the gitolite source code</span>
</span><span class='line'><span class="nb">cd</span> /home/git
</span><span class='line'>sudo -H -u git git clone -b gl-v304 https://github.com/gitlabhq/gitolite.git /home/git/gitolite
</span><span class='line'><span class="c"># setup</span>
</span><span class='line'><span class="nb">cd</span> /home/git
</span><span class='line'>sudo -u git -H mkdir bin
</span><span class='line'>sudo -u git sh -c <span class="s1">&#39;echo -e &quot;PATH=\$PATH:/home/git/bin\nexport PATH&quot; &gt;&gt; /home/git/.profile&#39;</span>
</span><span class='line'>sudo -u git sh -c <span class="s1">&#39;gitolite/install -ln /home/git/bin&#39;</span>
</span><span class='line'>sudo cp /home/gitlab/.ssh/id_rsa.pub /home/git/gitlab.pub
</span><span class='line'>sudo chmod 0444 /home/git/gitlab.pub
</span><span class='line'>sudo -u git -H sh -c <span class="s2">&quot;PATH=/home/git/bin:$PATH; gitolite setup -pk /home/git/gitlab.pub&quot;</span>
</span><span class='line'><span class="c"># permissions</span>
</span><span class='line'>sudo chmod -R g+rwX /home/git/repositories/
</span><span class='line'>sudo chown -R git:git /home/git/repositories/
</span><span class='line'>sudo -u gitlab -H git clone git@localhost:gitolite-admin.git /tmp/gitolite-admin
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$?</span> !<span class="o">=</span> 0 <span class="o">]]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;error: gitolite is not installed correct, or the ssh key is not right&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>sudo rm -rf /tmp/gitolite-admin
</span><span class='line'><span class="c"># clone gitlab source and install prerequisites</span>
</span><span class='line'>sudo gem install charlock_holmes
</span><span class='line'>sudo pip install pygments
</span><span class='line'><span class="nb">cd</span> /home/gitlab
</span><span class='line'>sudo -H -u gitlab git clone git://github.com/51fanli/gitlabhq.git gitlab
</span><span class='line'><span class="nb">cd </span>gitlab
</span><span class='line'>sudo -u gitlab cp config/gitlab.yml.example config/gitlab.yml
</span><span class='line'><span class="c"># mysql databases init</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;connect to mysql&quot;</span>
</span><span class='line'>mysql -h127.0.0.1 -uroot -p
</span><span class='line'><span class="c"># CREATE DATABASE IF NOT EXISTS `gitlabhq_production` DEFAULT CHARACTER SET `utf8` COLLATE `utf8_unicode_ci`;</span>
</span><span class='line'><span class="c"># CREATE USER &#39;gitlab&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;</span>
</span><span class='line'><span class="c"># GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON `gitlabhq_production`.* TO &#39;gitlab&#39;@&#39;localhost&#39;;</span>
</span><span class='line'>sudo -u gitlab cp config/database.yml.example config/database.yml
</span><span class='line'>sudo -u gitlab -H bundle install --without development <span class="nb">test </span>sqlite postgres --deployment
</span><span class='line'>sudo -u gitlab -H git config --global user.email <span class="s2">&quot;gitlab@localhost&quot;</span>
</span><span class='line'>sudo -u gitlab -H git config --global user.name <span class="s2">&quot;Gitlab&quot;</span>
</span><span class='line'>sudo -u gitlab cp config/resque.yml.example config/resque.yml
</span><span class='line'>sudo -u gitlab cp config/unicorn.rb.example config/unicorn.rb
</span><span class='line'><span class="c"># init tables</span>
</span><span class='line'>sudo -u gitlab bundle <span class="nb">exec </span>rake gitlab:app:setup <span class="nv">RAILS_ENV</span><span class="o">=</span>production
</span><span class='line'>sudo cp ./lib/hooks/post-receive /home/git/.gitolite/hooks/common/post-receive
</span><span class='line'>sudo chown git:git /home/git/.gitolite/hooks/common/post-receive
</span><span class='line'><span class="c"># check status</span>
</span><span class='line'>sudo -u gitlab bundle <span class="nb">exec </span>rake gitlab:app:status <span class="nv">RAILS_ENV</span><span class="o">=</span>production
</span><span class='line'>sudo wget https://raw.github.com/gitlabhq/gitlab-recipes/master/init.d/gitlab -P /etc/init.d/
</span><span class='line'>sudo chmod +x /etc/init.d/gitlab
</span><span class='line'>sudo update-rc.d gitlab defaults 21
</span></code></pre></td></tr></table></div></figure>


<p>gitlabhq3.0后改用unicorn(紧跟github步伐)作为默认的启动server,要将它与nginx或apache一起使用请参考<a href="https://wiki.archlinux.org/index.php/Gitlab#Web_server_configuration">archwiki的gitlab手册</a>,下面是apache中的vhost配置(需要预先编译proxy模块)</p>

<figure class='code'><figcaption><span>apache vhost配置  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;VirtualHost *:80&gt;
</span><span class='line'>  ServerName gitlab.myserver.com
</span><span class='line'>  ServerAlias www.gitlab.myserver.com
</span><span class='line'>  DocumentRoot /home/gitlab/gitlab/public
</span><span class='line'>  ErrorLog /var/log/httpd/gitlab_error_log
</span><span class='line'>  CustomLog /var/log/httpd/gitlab_access_log combined
</span><span class='line'>
</span><span class='line'>  &lt;Proxy balancer://unicornservers&gt;
</span><span class='line'>      BalancerMember http://127.0.0.1:8080
</span><span class='line'>  &lt;/Proxy&gt;
</span><span class='line'>
</span><span class='line'>  &lt;Directory /home/gitlab/gitlab/public&gt;
</span><span class='line'>    AllowOverride All
</span><span class='line'>    Options -MultiViews
</span><span class='line'>  &lt;/Directory&gt;
</span><span class='line'>
</span><span class='line'>  RewriteEngine on
</span><span class='line'>  RewriteCond %<span class="o">{</span>DOCUMENT_ROOT<span class="o">}</span>/%<span class="o">{</span>REQUEST_FILENAME<span class="o">}</span> !-f
</span><span class='line'>  RewriteRule ^/<span class="o">(</span>.*<span class="o">)</span><span class="nv">$ </span>balancer://unicornservers%<span class="o">{</span>REQUEST_URI<span class="o">}</span> <span class="o">[</span>P,QSA,L<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  ProxyPass /uploads !
</span><span class='line'>  ProxyPass / balancer://unicornservers/
</span><span class='line'>  ProxyPassReverse / balancer://unicornservers/
</span><span class='line'>  ProxyPreserveHost on
</span><span class='line'>
</span><span class='line'>   &lt;Proxy *&gt;
</span><span class='line'>      Order deny,allow
</span><span class='line'>      Allow from all
</span><span class='line'>   &lt;/Proxy&gt;
</span><span class='line'>&lt;/VirtualHost&gt;
</span></code></pre></td></tr></table></div></figure>


<p>unicorn的配置文件在config/unicorn.rb，修改其中的 <code>listen="127.0.0.1:8080"</code>，然后重启apache，通过 <code>service gitlab start</code> 重启unicorn，访问一下gitlab.myserver.com吧，看到登录页面就说明大功告成啦。</p>

<h2>Q&amp;A</h2>

<h3>Q: 在装完gitolite后尝试<code>git clone git@localhost:gitolite-admin.git /tmp/gitolite-admin</code>遇到&#8217;remote hang-up unexpected&#8217;(貌似是这么写，意会。。。)</h3>

<p>A: 我在centos6.2上遇到过这个问题，其他发行版上不知道有没有这个问题，修改</p>

<p><code>sudo chmod 400 /home/git/.ssh/authorized_keys</code></p>

<p>可以修复这个问题。貌似是centos的安全策略造成ssh私钥不生效</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://github.com/gitlabhq/gitlabhq/blob/master/doc/install/installation.md">gitlab安装手册官方版</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Gitlab">gitlab手册archwiki版</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zsh自动补全]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2012/08/30/zshzi-dong-bu-quan/"/>
    <updated>2012-08-30T18:15:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2012/08/30/zshzi-dong-bu-quan</id>
    <content type="html"><![CDATA[<p>最近被zsh搞的够郁闷，Mark一下，好好翻翻文档，下周写出自己的自动补全脚本</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql 多实例启动]]></title>
    <link href="http://sailxjx.github.com/blog/blog/2012/08/13/mysql-duo-shi-li-qi-dong/"/>
    <updated>2012-08-13T17:03:00+08:00</updated>
    <id>http://sailxjx.github.com/blog/blog/2012/08/13/mysql-duo-shi-li-qi-dong</id>
    <content type="html"><![CDATA[<p>当开发与生产环境在同一台机器上，或需要在一台机器上部署多套测试环境时，往往需要同时起多个mysqld进程，最近帮测试搭环境的时候就碰到了这样的问题。</p>

<p>还是从安装mysql开始，下载tarball安装，</p>

<figure class='code'><figcaption><span>安装mysql  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>groupadd mysql
</span><span class='line'>useradd -g mysql mysql
</span><span class='line'>cmake . -DCMAKE_INSTALL_PREFIX<span class="o">=</span>/usr/local/mysql5.5.27/  -DMYSQL_DATADIR<span class="o">=</span>/data/mysql  -DWITH_INNOBASE_STORAGE_ENGINE<span class="o">=</span>1  -DMYSQL_TCP_PORT<span class="o">=</span>3306  -DMYSQL_UNIX_ADDR<span class="o">=</span>/var/run/mysql/mysql.sock -DWITH_DEBUG<span class="o">=</span>0
</span><span class='line'>make <span class="o">&amp;&amp;</span> make install
</span></code></pre></td></tr></table></div></figure>


<p>然后配置my.cnf，从support-files里面拷贝一个my-medium.cnf到/etc/my.cnf，里面mysqld配置段的内容基本是这个样子</p>

<figure class='code'><figcaption><span>my&#46;cnf配置 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[mysqld]
</span><span class='line'>port            = 3306
</span><span class='line'>socket          = /var/run/mysql/mysql.sock
</span><span class='line'>skip-external-locking
</span><span class='line'>key_buffer_size = 16M 
</span><span class='line'>max_allowed_packet = 1M
</span><span class='line'>table_open_cache = 64
</span><span class='line'>sort_buffer_size = 512K
</span><span class='line'>net_buffer_length = 8K
</span><span class='line'>read_buffer_size = 256K
</span><span class='line'>read_rnd_buffer_size = 512K
</span><span class='line'>myisam_sort_buffer_size = 8M</span></code></pre></td></tr></table></div></figure>


<p>默认mysqld只启动一个实例，既然我们的目的是启动多个mysqld实例，需要使用mysqld_multi。它是一个perl脚本，在使用之前，需要给my.cnf加一些料。</p>

<figure class='code'><figcaption><span>my&#46;cnf配置[增加mysqld_mutli] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># mysqld_multi会读取这个配置短的内容
</span><span class='line'>[mysqld_multi] 
</span><span class='line'>mysqld = /usr/local/mysql/bin/mysqld
</span><span class='line'>mysqladmin = /usr/local/mysql/bin/mysqladmin
</span><span class='line'>
</span><span class='line'># 第一个mysqld实例
</span><span class='line'>[mysqld1]
</span><span class='line'>port = 3306
</span><span class='line'>socket = /var/run/mysql/mysql1.sock
</span><span class='line'>datadir = /data/mysql1
</span><span class='line'>general-log-file = /var/log/mysql/error.log
</span><span class='line'>skip-external-locking
</span><span class='line'>key_buffer_size = 16M 
</span><span class='line'>max_allowed_packet = 1M
</span><span class='line'>table_open_cache = 64
</span><span class='line'>sort_buffer_size = 512K
</span><span class='line'>net_buffer_length = 8K
</span><span class='line'>read_buffer_size = 256K
</span><span class='line'>read_rnd_buffer_size = 512K
</span><span class='line'>myisam_sort_buffer_size = 8M
</span><span class='line'>log-bin=mysql-bin
</span><span class='line'>binlog_format=mixed
</span><span class='line'>server-id       = 1 
</span><span class='line'>user = mysql
</span><span class='line'>
</span><span class='line'># 第二个mysqld实例
</span><span class='line'>[mysqld2]
</span><span class='line'>port = 3307
</span><span class='line'>socket = /var/run/mysql/mysql2.sock
</span><span class='line'>datadir = /data/mysql2
</span><span class='line'>general-log-file = /var/log/mysql/error.log
</span><span class='line'>skip-external-locking
</span><span class='line'>key_buffer_size = 16M 
</span><span class='line'>max_allowed_packet = 1M
</span><span class='line'>table_open_cache = 64
</span><span class='line'>sort_buffer_size = 512K
</span><span class='line'>net_buffer_length = 8K
</span><span class='line'>read_buffer_size = 256K
</span><span class='line'>read_rnd_buffer_size = 512K
</span><span class='line'>myisam_sort_buffer_size = 8M
</span><span class='line'>log-bin=mysql-bin
</span><span class='line'>binlog_format=mixed
</span><span class='line'>server-id       = 1 
</span><span class='line'>user = mysql</span></code></pre></td></tr></table></div></figure>


<p>然后依配置创建mysql运行时文件夹并用mysql_install_db脚本初始化系统库</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p /data/mysql1 /data/mysql2 /var/log/mysql /var/run/mysql
</span><span class='line'>chgrp mysql /data/mysql* /var/log/mysql /var/run/mysql
</span><span class='line'>chown mysql /data/mysql* /var/log/mysql /var/run/mysql
</span><span class='line'>mysql_install_db --datadir<span class="o">=</span>/data/mysql1 --user<span class="o">=</span>mysql
</span><span class='line'>mysql_install_db --datadir<span class="o">=</span>/data/mysql2 --user<span class="o">=</span>mysql
</span><span class='line'>mysqld_multi start 1-2
</span></code></pre></td></tr></table></div></figure>


<p>最后一条命令其实已经将我们配置好的mysqld1和mysqld2启动了，这时候在进程表中应该能看到两个mysqld进程，试着用-P参数指定端口能分别访问在/data/mysql1和/data/mysql2下面的两个库，两者互不影响，正好能满足测试的要求。当然需要配置更多的实例也是可以的。</p>

<h2 id="mysql_extra">额外收获</h2>


<p>这次配置过程中还遇到一些额外的问题，记下来备忘。</p>

<ul>
<li>假如使用的是ubuntu(我目前的版本还是11.10)，默认会安装apparmor，这个软件是一个诡异的存在，它就像一个暗恋者，一直默默限制软件的访问权限，然后又不被系统待见，以至于我根本不知道它的存在。其实它是一个白名单，在/etc/apparmor.d/中指定了/usr/sbin/mysqld对各文件的访问权限，当我想将mysql的数据文件夹迁移到别的位置时，一直报这个错误</li>
</ul>


<p><code>Can't create test file /data/mysql1/littleboy.lower-test</code></p>

<p>而令人费解的就是mysql对这些文件夹是有读写权限的，其实只需要编辑/etc/apparmor.d/usr.sbin.mysqld文件，依样画葫芦地为文件夹加上rw权限就可以了</p>

<ul>
<li>给mysql设置远程访问权限，只需要下面这条sql</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="n">mysql</span><span class="p">.</span><span class="k">user</span> <span class="p">(</span> <span class="o">`</span><span class="k">Host</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="k">User</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">Password</span><span class="o">`</span> <span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span> <span class="s1">&#39;%&#39;</span><span class="p">,</span> <span class="s1">&#39;root&#39;</span><span class="p">,</span> <span class="n">PASSWORD</span><span class="p">(</span><span class="s1">&#39;123456&#39;</span><span class="p">)</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中最关键的就是那个&#8217;%&#8217;，表示通过任意host均可以访问到本机的mysql</p>

<ul>
<li>给mysql设置密码。</li>
</ul>


<p><code>mysqladmin -u root -h 127.0.0.1 password 123456</code></p>

<p>上面那种是在不登录mysql的情况下修改密码，还有两种可以通过改表的方式。见<a href="#mysql_refer">MySQL设置密码的三种方法</a></p>

<p>修改过密码以后，mysqld_multi可能就不能通过默认配置来结束mysqld进程了，这时候需要在配置里加上用户名和密码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[mysqld_multi]
</span><span class='line'>mysqld = /usr/local/mysql/bin/mysqld
</span><span class='line'>mysqladmin = /usr/local/mysql/bin/mysqladmin
</span><span class='line'>user = root
</span><span class='line'>password = 123456</span></code></pre></td></tr></table></div></figure>


<p>当然这样可能会有一些安全隐患，因为my.cnf是可见的。假如是多人使用，可以将password这行去掉，每次操作mysqld_multi的时候，在后面加上<code>--password=123456</code>参数就行了</p>

<h2 id="mysql_refer">参考资料</h2>


<ul>
<li><a href="http://www.neocanable.com/error-for-mysql-multi-and-mysql-install-db/">解决apparmor引起的报错1</a></li>
<li><a href="http://ubuntuforums.org/showthread.php?t=1861136">解决apparmor引起的报错2</a></li>
<li><a href="http://blog.csdn.net/magicbreaker/article/details/2392764">MySQL设置密码的三种方法</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
