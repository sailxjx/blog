<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[CodeBean]]></title>
  <link href="http://jingxin.me/blog/atom.xml" rel="self"/>
  <link href="http://jingxin.me/blog/"/>
  <updated>2014-09-16T22:45:19+08:00</updated>
  <id>http://jingxin.me/blog/</id>
  <author>
    <name><![CDATA[Xu Jingxin]]></name>
    <email><![CDATA[sailxjx@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一次神奇的 nodejs debug 经历]]></title>
    <link href="http://jingxin.me/blog/blog/2014/09/13/yi-ci-shen-qi-de-nodejs-debug-jing-li/"/>
    <updated>2014-09-13T18:09:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2014/09/13/yi-ci-shen-qi-de-nodejs-debug-jing-li</id>
    <content type="html"><![CDATA[<p>中秋之后，服务器上老是出现 cpu 爆满的情况，难道服务器也闹情绪想休假。当然这种情况是很紧急的，所以马上就着手排查。</p>

<p>还没找出问题，又有同学报测试机上也有这种情况，但是应用进程不同。想到有可能这两件事是有关联的，所以先从测试机开始排查。</p>

<h2 id="settimeout--bug">问题一， setTimeout 的 bug</h2>

<p>测试机上的问题很好排查，每次进程重启后立刻飙升到 100%，通过万能的 log 大法，很快就定位到问题。应用中使用了 <a href="https://github.com/visionmedia/axon">axon</a> 模块作为消息中间件，在连接不成功时会用 <code>setTimeout</code> 尝试重连，间隔由最初的 100ms 开始每次乘以 1.5，这样在三次之后间隔就变成了 337.5ms，nodejs 有<a href="https://github.com/joyent/node/issues/5796">一个 bug</a>，Timer 函数中出现小数时会导致死循环，我们用的是 0.10.30 版本，这个 bug 依然可以重现。所以解决办法也很简单了，直接 <a href="https://github.com/visionmedia/axon/commit/68a23cacd5fd94527b52738b0d43876187ee82e9#diff-595746af128d06d3cac45cb001ad2219R280">round 一下</a>就可以了。以后在使用 Timer 类函数时也需要注意不要出现小数哦。</p>

<h2 id="section">问题二，正则表达式的效率问题</h2>

<p>由于 axon 在生产环境中也有使用，我们就将所有的版本都进行了升级，以为万事大吉。结果却不遂人愿，生产环境中的几个进程在启动后，时不时会出现负载 100% 的情况，这种可能性分析起来就很复杂了。我们依次尝试了 node-inspector，node-heapdump 等工具，都没有找到原因（实话说，以前用这些 debug 内存问题时也是一无所获，nodejs 的 debug 工具实在鸡肋）。也没有重现线上的问题。</p>

<p>一个有趣的现象是，我发现每次进程重启之后，飙升到 100% 的时间不定，但是每次都是瞬间从 0 到 100%。这种现象说明导致问题的原因可能不是程序内部产生，而是由外力产生，这个外力是什么呢，其实就是请求。再一次借助万能 log 大法，express 的 log 只能记录有响应的请求，如果一个请求在中途陷入了死循环，那么就得不到 express 的 log，所以我们自己写了一个中间件，在 express 的最前部引入，只打印出请求的链接。</p>

<p>接下来问题就很明显了（其实也破费一番周折），每当出现某一请求时，程序就陷入了死循环，屡试不爽。一步步排查下来，发现问题出现在 <a href="https://github.com/leizongmin/js-xss">xss</a> 模块中，其中的一个正则表达式，在匹配某些字符串时出现了问题：</p>

<ul>
  <li>表达式：<code>/&lt;!--(.|\s)*?--&gt;/gm</code></li>
  <li>测试字符串：<code>&lt;!--                                    </code></li>
</ul>

<p>当表达式未找到匹配内容时，效率指数级的下降，特别是在多个重复空格和子表达式时。这个原因解释起来就比较复杂了。<a href="http://swtch.com/~rsc/regexp/regexp1.html">大神的一篇文章</a>很好的解释了这个问题，有时间我要翻译一下，一定又有很多收获。</p>

<p>解决的方法很简单，在<a href="https://github.com/leizongmin/js-xss/commit/161f9510aab78aba83cf75c54c0dafd3a0436a84#diff-666d669efc2fef279da605aba853e681L354">这个 Pull Request</a>中可以找到。看来以后使用正则表达式的时候得过留个心眼了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[limbo: 简单访问远程数据库]]></title>
    <link href="http://jingxin.me/blog/blog/2014/08/28/limbo-jian-dan-fang-wen-yuan-cheng-shu-ju-ku/"/>
    <updated>2014-08-28T17:41:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2014/08/28/limbo-jian-dan-fang-wen-yuan-cheng-shu-ju-ku</id>
    <content type="html"><![CDATA[<p><img src="https://dn-talk.oss.aliyuncs.com/site/images/workspace-c16d9d49.jpg" alt="简聊一下 轻松协作" /></p>

<p>对于 nodejs 生态来说，使用 mongoose 作为 Model 模块是再好不过的一件事，其一大特点就是简洁优雅的 Schema 定义，提供了每个键值的类型验证，数据验证，索引声明，虚拟键，并自带实例化方法的扩展，大大节省了开发的成本。但是在考虑开放数据的时候，一切就显得不那么美好了。</p>

<p>在打造<a href="https://talk.ai/">简聊</a>这款应用的过程中，我们就实实在在的遇到了这样的问题。由于需要使用 <a href="https://www.teambition.com/">Teambition</a> 的用户和团队数据，并且当<a href="https://talk.ai/">简聊</a>更新了用户数据之后，在 <a href="https://www.teambition.com/">Teambition</a> 中能实时的将这些更新推送到用户那里。按照惯例，我们最初使用的是 restful 接口。</p>

<h2 id="restful-">第一阶段，使用 restful 接口</h2>

<p>restful 接口的应用面最广，但是仍然存在很多不足，比如接口在参数和结构上限制较多，在考虑修改接口 api 的时候，往往会顾虑客户端的兼容性，而一旦客户端程序有新的需求，则需等待接口的更新。另一个麻烦的地方是需要做签名校验，对于内部的应用来说，我们完全可以通过防火墙来控制特定 ip 对端口的访问，签名在此处就显得有点多余。</p>

<h2 id="schema">第二阶段，单独拆封 Schema</h2>

<p>然后我们想到了将 Schema 拆封成一个单独的仓库，nodejs 有良好的模块管理，在不同的应用中，我们只需要将这些模块引入进来，既做到同步更新，又做到 DRY。相对于 restful 接口的缺点就是，对于数据的调用入口过多，而且应用之间互相是不知情的。例如在<a href="https://talk.ai/">简聊</a>中有更新用户数据，在 <a href="https://www.teambition.com">Teambition</a> 中就无法得知，并推送给其他客户端。</p>

<h2 id="rpc">第三阶段，远程过程调用（rpc）</h2>

<p>这个阶段和 restful 接口其实类似，我们在 <a href="https://www.teambition.com">Teambition</a>  的后端进程中将一些接口方法暴露出来，这样我们的客户端程序就能通过简单的 rpc 方式调用这些接口。例如我们导出了 <code>user.update</code> 方法，在客户端代码中使用 <code>rpc.call('user.update', params, callback)</code> 即可调用相应的过程。这样的调用行为与使用本地代码无异，可能是目前能找到的最简单直接的方式了。</p>

<h2 id="rpc--mongoose-">第四阶段，rpc 与 mongoose 的结合</h2>

<p>事情可以变得更简单，由于目的主要是为了操作数据库，所以我们开发了一个模块 <a href="https://github.com/teambition/limbo">limbo</a>，将 mongoose model 中所有方法暴露出来，以命名空间来划分，实现了在客户端与服务端程序一致的使用体验。</p>

<p>例如我们在服务端程序中使用 limbo 连接 mongodb，只需要做如下声明：（以下的代码都以 coffeescript 作为示例）</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="nv">limbo = </span><span class="nx">require</span> <span class="s">&#39;limbo&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 定义 Schema</span>
</span><span class="line"><span class="nv">UserSchame = </span><span class="nf">(Schema) -&gt;</span>
</span><span class="line">  <span class="c1"># 这里的 Schema 即 mongoose.Schema</span>
</span><span class="line">  <span class="k">new</span> <span class="nx">Schema</span>
</span><span class="line">    <span class="nv">name: </span><span class="nb">String</span>
</span><span class="line">    <span class="nv">email: </span><span class="nb">String</span>
</span><span class="line">
</span><span class="line"><span class="c1"># use 方法用作区分不同数据库连接的命名空间，一般参数选择数据库名就行</span>
</span><span class="line"><span class="nv">db = </span><span class="nx">limbo</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s">&#39;test&#39;</span><span class="p">).</span><span class="nx">connect</span><span class="p">(</span><span class="s">&#39;mongodb://localhost:27017/test&#39;</span><span class="p">).</span><span class="nx">load</span> <span class="s">&#39;User&#39;</span><span class="p">,</span> <span class="nx">UserSchema</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>使用方式就与 mongoose 一致了</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="nv">user = </span><span class="nx">db</span><span class="p">.</span><span class="nx">user</span>
</span><span class="line"><span class="c1"># user 是一个 limbo 中用于封装 model 的一个对象，你可以直接使用 user.model 来直接调用 mongoose model</span>
</span><span class="line"><span class="nx">user</span><span class="p">.</span><span class="nx">findOne</span> <span class="nv">_id: </span><span class="s">&#39;xxxx&#39;</span>
</span><span class="line"><span class="nx">user</span><span class="p">.</span><span class="nx">create</span> <span class="nv">name: </span><span class="s">&#39;xxx&#39;</span><span class="p">,</span> <span class="nv">email: </span><span class="s">&#39;yyy&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面是 limbo 中最激动人心的地方，你可以导出一个 collection 中的所有方法到 rpc server 中，只需要通过一个简单的声明</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="nx">limbo</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s">&#39;test&#39;</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="mi">7001</span><span class="p">).</span><span class="nx">enableRpc</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面我们就要提到如何在客户端程序中调用这些方法</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="c1"># 在客户端也需要初始化一个 limbo 命名空间，需要与服务端一致，链接改为服务端的域名和端口号</span>
</span><span class="line"><span class="nv">db = </span><span class="nx">limbo</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s">&#39;test&#39;</span><span class="p">).</span><span class="nx">connect</span><span class="p">(</span><span class="s">&#39;tcp://localhost:7001&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 下面有两种方式来使用 rpc</span>
</span><span class="line"><span class="c1"># 1. 使用 call 方法</span>
</span><span class="line"><span class="nx">db</span><span class="p">.</span><span class="nx">call</span> <span class="s">&#39;user.findOne&#39;</span><span class="p">,</span> <span class="nv">_id: </span><span class="s">&#39;xxxx&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class="line"><span class="c1"># 2. 使用方法链</span>
</span><span class="line"><span class="nx">db</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">findOne</span> <span class="nv">_id: </span><span class="s">&#39;xxxx&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class="line"><span class="c1"># 第二种方式存在一个延迟，必须要在 limbo 与服务端程序握手成功之后才可以使用，</span>
</span><span class="line"><span class="c1"># 否则会抛出一个对象不存在的异常，不过在一般的应用中，</span>
</span><span class="line"><span class="c1"># 初始化所需的时间都会长于这个链接所需时间，所以延迟可以忽略不计了</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以看出，上面的第二种方式与服务端在本地使用 mongoose 的方式一模一样，这种黑魔法式的调用方式应该是广大码农喜闻乐见的。</p>

<p>limbo 另一个值得称道的功能是可以在服务端程序监听这些远程调用的事件，这得益于 nodejs 的 event 对象，limbo 本身就继承于 EventEmitter 对象，所以我们在每次远程调用后会触发一个事件给服务端程序，而在服务端只需要简单的监听这个事件即可</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="nx">limbo</span><span class="p">.</span><span class="kc">on</span> <span class="s">&#39;test.user.findOne&#39;</span><span class="p">,</span> <span class="nf">(user) -&gt;</span> <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>正是这种 rpc 加事件反馈的机制，让<a href="https://talk.ai/">简聊</a>和 <a href="https://www.teambition.com">Teambition</a> 可以实现简单实时的数据交换。我们将 <a href="https://github.com/teambition/limbo">limbo</a> 托管在 github 上开源，是深知它还存在很多可以改进的地方，所以不免庸俗的说一句，欢迎 issue 和 pr~</p>

<p>最后，欢迎访问我们的新产品<a href="https://talk.ai">简聊</a>，一款基于话题的轻量级协作应用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给 github page 设置域名]]></title>
    <link href="http://jingxin.me/blog/blog/2014/08/09/gei-github-page-she-zhi-yu-ming/"/>
    <updated>2014-08-09T18:28:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2014/08/09/gei-github-page-she-zhi-yu-ming</id>
    <content type="html"><![CDATA[<p>Github 免费提供了很棒的静态站托管服务 <a href="https://pages.github.com/">github pages</a>，并且为每人准备了一个二级域名 username.github.io。</p>

<p>但是对于喜欢个性又爱折腾的码农来说，使用别人的域名，是万万不能忍受滴，所以 github 支持了绑定个人域名。</p>

<p>英语不错的可直接传送官方文档 <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages">Tips for configuring a CNAME record with your DNS provider</a>，如我这样记性不好的，就看下面的流程：</p>

<p>首先，你得有个自己的域名，比如这个 jingxin.me，然后我的目标是绑定到 sailxjx.github.io，并支持所有二级域名的跳转，如从 sailxjx.github.io/blog 会自动转到 jingxin.me/blog。</p>

<p>然后，我们要创建 CNAME 记录，这一步要在个人域名托管的 dns 服务上操作，添加一条 CNAME 记录，指向 sailxjx.github.io，这样，就实现了通过 jingxin.me 访问 github page 内容的目的。通过 dig 命令可以查看是否生效，这个时候如果你用 ping 或者 nslookup 会看到两个域名的 ip 是一样的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ dig jingxin.me +nostats +nocomments +nocmd
</span><span class="line">;jingxin.me.                  IN  A
</span><span class="line">jingxin.me.             346   IN  CNAME sailxjx.github.io.
</span><span class="line">sailxjx.github.io.      3346  IN  CNAME github.map.fastly.net.
</span><span class="line">github.map.fastly.net.  46    IN  A 103.245.222.133</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后，当然是告诉 github 需要自动从 sailxjx.github.io 跳转到 jingxin.me，是需要在相关的 repository 中添加一个 CNAME 文件，里面保留一行域名记录（不包含 http 等 schema 部分），比如<a href="https://github.com/sailxjx/sailxjx.github.com/blob/master/CNAME">这里</a>，push 之后就可以在项目的设置中看到这样的提示</p>

<p><img src="https://github-images.s3.amazonaws.com/help/settings/pages-section.png" alt="pages-section.png" /></p>

<p>下面就是短暂的等待了，快的话立即就生效了。</p>

<h2 id="section">多余的话</h2>

<p>除了使用 CNAME，github 还提供了另一种做法 <a href="https://help.github.com/articles/about-custom-domains-for-github-pages-sites#apex-domains">Apex domains</a>，由于官方并不推荐，所以这里也就不介绍了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[回调 vs 协同程序]]></title>
    <link href="http://jingxin.me/blog/blog/2014/04/19/hui-diao-vs-xie-tong-cheng-xu/"/>
    <updated>2014-04-19T15:44:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2014/04/19/hui-diao-vs-xie-tong-cheng-xu</id>
    <content type="html"><![CDATA[<blockquote>
  <p>原文地址：<a href="https://medium.com/code-adventures/174f1fe66127">Callbacks vs Coroutines</a></p>
</blockquote>

<p>最近 Google V8 引擎的一个补丁提供了 <a href="http://wiki.ecmascript.org/doku.php?id=harmony:generators">ES6 生成器</a>，一篇叫做<a href="http://jlongster.com/A-Study-on-Solving-Callbacks-with-JavaScript-Generators">“用 Javascript 生成器来解决回调问题的研究”</a>的文章引发了很大的争议。虽然生成器到目前为止仍然需要 <code>--harmony</code> 或 <code>--harmony-generators</code> 选项才能激活，但是它已经值得你跃跃欲试！在这篇文章中我想要阐述的是自己对于<a href="http://en.wikipedia.org/wiki/Coroutine">协同程序</a>的体验，并且说明为什么我认为它们是一种好方法。</p>

<h2 id="section">回调和生成器</h2>
<p>在认识回调和生成器之间的不同之前，我们先来看看生成器在 Nodejs 或浏览器这种由回调主宰的环境中是怎样发挥作用的。</p>

<p>首先生成器是回调的一种扩展，有些类型的回调就是用来“模拟”生成器的。这些“futures”，“thunks”，或“promises” —— 无论你怎么称呼，都是用来延迟执行一小段逻辑的，就好比你 yield 了一个变量然后由生成器来处理其他的部分。</p>

<p>一旦这些变量 yield 给了调用方，这个调用方等待回调然后重新回到生成器。见仁见智，生成器的原理和回调其实是一样的，然而下面我们会说到使用它的一些好处。</p>

<p>假如你还是不太清楚该怎么使用生成器，这里有一个简单的例子实现了由生成器来控制流程。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">thread</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">gen</span> <span class="o">=</span> <span class="nx">fn</span><span class="p">();</span>
</span><span class="line">  <span class="kd">function</span> <span class="nx">next</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="nx">gen</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nx">ret</span><span class="p">.</span><span class="nx">done</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class="line">    <span class="nx">ret</span><span class="p">.</span><span class="nx">value</span><span class="p">(</span><span class="nx">next</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="nx">next</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">thread</span><span class="p">(</span><span class="kd">function</span> <span class="o">*</span><span class="p">(){</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">yield</span> <span class="nx">read</span><span class="p">(</span><span class="s1">&#39;app.js&#39;</span><span class="p">);</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">yield</span> <span class="nx">read</span><span class="p">(</span><span class="s1">&#39;package.json&#39;</span><span class="p">);</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">read</span><span class="p">(</span><span class="nx">path</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">){</span>
</span><span class="line">    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="s1">&#39;utf8&#39;</span><span class="p">,</span> <span class="nx">done</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-1">为什么协同程序会使代码更健壮</h2>

<p>对于传统的浏览器或 Nodejs 环境，协同程序在自己的堆栈上运行每个“纤程”。这些纤程的实现各不相同，但是它们只需要一个很小的栈空间就能初始化（大约4kb），然后随需求增长。</p>

<p>为什么这样棒极了？错误处理！假如你使用过 Nodejs， 你就会知道错误处理不是那么简单。有些时候你会得到多个包含未知边际效应的回调，或者完全忘了回调这回事并且没有正确的处理和汇报异常。也许你忘了监听一个“error”事件，这样的话它就变成了一个未捕获的异常而让整个进程挂掉。</p>

<p>有些人喜欢使用进程，而且这样也挺好，但是作为一个在早期就使用 Nodejs 的人来说，在我看来这种流程有很多地方值得改进。Nodejs 在很多方面都很出色，但是这个就是它的阿喀琉斯之踵。</p>

<p>我们用一个简单的例子来看看由回调来读写同一个文件：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">read</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="s1">&#39;utf8&#39;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">write</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">str</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">str</span><span class="p">,</span> <span class="nx">fn</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">readAndWrite</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">read</span><span class="p">(</span><span class="s1">&#39;Readme.md&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">str</span><span class="p">){</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">fn</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class="line">    <span class="nx">str</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;Something&#39;</span><span class="p">,</span> <span class="s1">&#39;Else&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="nx">write</span><span class="p">(</span><span class="s1">&#39;Readme.md&#39;</span><span class="p">,</span> <span class="nx">str</span><span class="p">,</span> <span class="nx">fn</span><span class="p">);</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>你可能会想这看起来也没那么糟糕，那是因为你整天看到这样的代码！好吧这是错误的:)为什么？应为大多数 node 核心方法，和多数第三方库都没有 try/catch 他们的回调。</p>

<p>下面的代码会抛出一个未捕获异常而且没有任何方法能捕获它。就算内核检测到这个异常并且告诉调用方这可能是一个错误点，大多数回调都有未知的行为。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">readAndWrite</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">read</span><span class="p">(</span><span class="s1">&#39;Readme.md&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">str</span><span class="p">){</span>
</span><span class="line">    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;oh no, reference error etc&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">fn</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class="line">    <span class="nx">str</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;Something&#39;</span><span class="p">,</span> <span class="s1">&#39;Else&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="nx">write</span><span class="p">(</span><span class="s1">&#39;Readme.md&#39;</span><span class="p">,</span> <span class="nx">str</span><span class="p">,</span> <span class="nx">fn</span><span class="p">);</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>所以生成器是怎么来优化这一点的？下面的代码片段用生成器和 <a href="https://github.com/visionmedia/co">Co</a> 库来实现了相同的逻辑。你可能会想“这只是一些愚蠢的语法糖而已” - 但是你错了。只要我们将生成器传给 <code>Co()</code> 方法，所有委派给调用方的 yields，特别是强健的错误处理都会由 Co 来委派。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">co</span><span class="p">(</span><span class="kd">function</span> <span class="o">*</span><span class="p">(){</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="nx">yield</span> <span class="nx">read</span><span class="p">(</span><span class="s1">&#39;Readme.md&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="nx">str</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;Something&#39;</span><span class="p">,</span> <span class="s1">&#39;Else&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="nx">yield</span> <span class="nx">write</span><span class="p">(</span><span class="s1">&#39;Readme.md&#39;</span><span class="p">,</span> <span class="nx">str</span><span class="p">)</span>
</span><span class="line"><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>就像下面这样，Co 这样的库会将异常“抛”回给他们原本的流程，这意味着你可以用 try/catch 来捕获异常，或者任其自流由最后 Co 的回调来处理这些错误。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">co</span><span class="p">(</span><span class="kd">function</span> <span class="o">*</span><span class="p">(){</span>
</span><span class="line">  <span class="k">try</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="nx">yield</span> <span class="nx">read</span><span class="p">(</span><span class="s1">&#39;Readme.md&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// whatever</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="nx">str</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;Something&#39;</span><span class="p">,</span> <span class="s1">&#39;Else&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="nx">yield</span> <span class="nx">write</span><span class="p">(</span><span class="s1">&#39;Readme.md&#39;</span><span class="p">,</span> <span class="nx">str</span><span class="p">)</span>
</span><span class="line"><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在编写 Co 的时候貌似只有它实现了健壮的错误处理，但是假如你看一下 Co 的<a href="https://github.com/visionmedia/co/blob/master/index.js#L30">源代码</a>你会注意到所有的 try/catch 代码块。假如你用生成器你需要将 try/catch 添加到每个你用过的库中，来保证代码的健壮性。这就是为什么在今天看来，用 Nodejs 编写健壮性代码是一件不可能完成的任务。</p>

<h2 id="section-2">生成器对于协同程序</h2>
<p>生成器有时会被当成“半协同程序”，一个不完善，仅对调用方有效的协同程序。这让使用生成器比协同程序的目的更明确，好比 yield 能被当成“线程”。</p>

<p>协同程序要更加灵活一些，看起来就像是普通代码块，而不需要 yield：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="nx">read</span><span class="p">(</span><span class="s1">&#39;Readme.md&#39;</span><span class="p">)</span>
</span><span class="line"><span class="nx">str</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;Something&#39;</span><span class="p">,</span> <span class="s1">&#39;Else&#39;</span><span class="p">)</span>
</span><span class="line"><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;Readme.md&#39;</span><span class="p">,</span> <span class="nx">str</span><span class="p">)</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;all done!&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>有些人认为完整的协同程序是“危险的”，因为它不清楚哪个方法有没有延迟执行线程。个人来说我认为这种争论很可笑，大部分延迟执行的方法都很明显，比方说从文件或套接字中读写，http 请求，睡眠等等延迟执行不会让任何人感到惊讶。</p>

<p>假如有些不友善的方法，那么你就 “fork” 它们来强迫这些任务变成异步的，就像你在 Go 中做的一样。</p>

<p>在我看来生成器可能比协同程序更危险（当然比回调好得多）——仅仅是忘记一个 yield 表达式就可能让你费解或在它执行下面的代码时导致未知的行为结果。半协同程序和协同程序两者各自有优缺点，但是我很高兴现在至少已经有了其一。</p>

<p>让我们来看看你用生成器可以怎样实现新的构造方法。</p>

<h2 id="section-3">用协同程序实现简单的异步流程</h2>
<p>你已经看到一个简单读/写表达式看起来比回调更优雅，我们来看看更多的内容。</p>

<p>假设所有操作默认按顺序执行简化了模型，有些人声称生成器或协同程序使状态变得复杂化，这事不正确的。用回调处理状态也是一样的。全局变量依然是全局变量，局部变量依然是局部变量，而闭包依然是闭包。</p>

<p>我们用例子来说明这个流程，假设你需要请求一个 web 页面，解析其中的链接，然后同步请求所有的链接并输出他们的 Content-types。</p>

<p>这里是一个使用传统回调的例子，没有使用第三方流程控制库。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">showTypes</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line"> <span class="nx">get</span><span class="p">(</span><span class="s1">&#39;http://cloudup.com&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class="line">   <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">fn</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class="line">   <span class="kd">var</span> <span class="nx">done</span><span class="p">;</span>
</span><span class="line">   <span class="kd">var</span> <span class="nx">urls</span> <span class="o">=</span> <span class="nx">links</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">text</span><span class="p">);</span>
</span><span class="line">   <span class="kd">var</span> <span class="nx">pending</span> <span class="o">=</span> <span class="nx">urls</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class="line">   <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">pending</span><span class="p">);</span>
</span><span class="line">   <span class="nx">urls</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">i</span><span class="p">){</span>
</span><span class="line">     <span class="nx">get</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class="line">       <span class="k">if</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class="line">       <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">done</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">fn</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class="line">       <span class="nx">results</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">header</span><span class="p">[</span><span class="s1">&#39;content-type&#39;</span><span class="p">];</span>
</span><span class="line">       <span class="err">—</span><span class="nx">pending</span> <span class="o">||</span> <span class="nx">fn</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">results</span><span class="p">);</span>
</span><span class="line">     <span class="p">});</span>
</span><span class="line">   <span class="p">});</span>
</span><span class="line"> <span class="p">});</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">showTypes</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">types</span><span class="p">){</span>
</span><span class="line">  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">types</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这么简单的一个任务被回调搞得毫无可读性。再加上错误处理，重复回调的预防，存储结果和他们本身的一些回调，你会完全搞不懂这个方法是用来干嘛的。假如你需要使代码更健壮，还需要在最后的方法处加上 try/catch 代码块。</p>

<p>现在下面有一个由生成器实现的相同的 showTypes() 方法。你会看到结果和用回调实现的方法是一样的，在这里例子中 Co 处理了所有我们在上面需要手工处理的错误和结果集的组装。被 urls.maps(get) 方法 yield 的数组被平行执行，但是结果集然后是保持不变的顺序。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">header</span><span class="p">(</span><span class="nx">field</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">){</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">headers</span><span class="p">[</span><span class="nx">field</span><span class="p">]</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">showTypes</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">co</span><span class="p">(</span><span class="kd">function</span> <span class="o">*</span><span class="p">(){</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="nx">yield</span> <span class="nx">get</span><span class="p">(</span><span class="s1">&#39;http://cloudup.com&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">responses</span> <span class="o">=</span> <span class="nx">yield</span> <span class="nx">links</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">text</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">get</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">responses</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">header</span><span class="p">(</span><span class="s1">&#39;content-type&#39;</span><span class="p">))</span>
</span><span class="line">  <span class="p">})(</span><span class="nx">fn</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我并不是建议所有的 Npm 模块使用生成器并且强制依赖 Co，我仍然建议使用相反的方法 —— 但是在应用层面我强烈推荐它。</p>

<p>我希望这能说明协同程序在编写无阻塞的程序时是一个强有力的工具。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[软件与配置]]></title>
    <link href="http://jingxin.me/blog/blog/2014/02/28/ruan-jian-yu-pei-zhi/"/>
    <updated>2014-02-28T13:07:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2014/02/28/ruan-jian-yu-pei-zhi</id>
    <content type="html"><![CDATA[<p>前段时间不间断的开发新项目，实际是想得多，写得少，最后落实到代码中，大概也就200多k文件。现在回头看一下，觉得还挺满意的，因为每个新项目会找出些不一样的地方，不求做到最好，但求标新立异，否则岂不是失去了开发的意义，也辜负了“程序猿”这个需要些许创造性的工作。</p>

<p>每次新项目达到一个阶段，能回顾一下，总是极好的。这次细想一下，有什么值得总结的地方，就又回到了“软件配置”这个极庸俗的话题上来了。</p>

<p>在我看来，任何软件都少不了配置，但是在之前的文章中我也提到过，<a href="http://jingxin.me/blog/blog/2013/09/17/ruan-jian-ji-jian-zhu-yi/">配置是软件的大敌</a>。任何软件配置越复杂，学习成本也就越高，这是一种反人类的趋势，所以这种软件，要么被更新，更简单的软件取代，要么就根本无人问津，消失在软件的海洋中。</p>

<p>当然，配置也可以被广泛的定义，形式是多种多样的，有些还是群众们喜闻乐见的，不能一棒子打死了。下面谨罗列一下我心目中的配置文件类型，和它们的适用范围。</p>

<h2 id="key-value">第一阶段，单纯的key-value</h2>
<p>这应该是最常见的一种配置，也最接近配置文件的本意。所谓人各有所好，软件在部署的过程中会遭遇不同的平台，也会遇到不同的适用情况和环境，这个时候就需要依靠配置文件来告诉软件应该怎样正确的运行。操作系统中的环境变量就是一种最常见的配置，<code>PATH</code>定义了用户需要的可执行文件的搜索范围，<code>SHELL</code>决定了和人交互的shell版本。在web应用中，数据库连接，域名，api签名秘钥等等都应当以配置的形式出现，否则就是给懒惰的开发者增加麻烦。</p>

<p>为什么说是“懒惰的开发者”，应为这些配置其实都可以通过在源代码中通过<code>if-else</code>条件来解决，要是碰到个勤快的开发（也许也是愚蠢的开发），就会把签名秘钥写在代码中，通过<code>if-else</code>来判断哪种环境应该调用哪种签名生成规则。但是在编程界，“懒惰是一种美德”，前面的做法非但徒增开发的难度，也不够灵活，用逼格更高的话来说，就是“不够优雅”。</p>

<p>所以需要用到<code>key-value</code>类型的配置。通常情况下，这种配置文件的出现形式会是一个json文件或是一个xml文件。假如这种配置文件不需要做到跨语言调用的话，跟进一步的做法是直接使用软件可用的脚本语言，通常会于源代码的语言保持一致。像我们写nodejs应用，使用js文件来做配置，就会比用json来的更加灵活。</p>

<h2 id="section">第二阶段，预定义方法</h2>
<p>下面提到的配置类型都有别于狭义的配置文件。比如说某些预先定义好的方法。我们可以在软件中预先定义好一些方法，这些方法我们不知道会不会用到，也不知道什么时候会用到，唯一明确的一点就是，我们知道这些方法能接受哪些参数，并且会得到哪些输出。我们在定义这些方法时，假如能确保他们的参数形式保持一致，那就更好了。这样对于习惯拿来主义的用户或我们自己，就更加的便利了。</p>

<p>具体的例子，比方说rails中的路由就是个这样的例子（从routes.rb文件的位置也可以看出它就是个配置文件），作者给我们定义好了一系列的方法，<code>get</code>，<code>post</code>，最有意思的就是<code>resource</code>。我们知道这些方法需要什么样的参数，能得到什么样的效果，假如我们不用这些配置，那么写上完整的路由控制代码，也能达到一样的目的。但是不需要，因为我们“很懒惰”。</p>

<h2 id="section-1">第三阶段，钩子</h2>
<p>如果你对于软件的使用者有足够的信心或信任，那么完全可以将一些接口留给用户来实现，软件中的钩子就是一个很好的例子，这在很多full-stack的框架中是很常见的，另一个场景是git的hook，在每个命令的前后，git都预留了钩子由用户来实现，这样它的可玩性就高了很多，到了github上，网站把很多常用的钩子打包成一个个模块，用户只需要给需要的模块打上勾就行了，这也可以称为配置的一种形式。</p>

<h2 id="section-2">第四阶段，可编程性</h2>
<p>这已经脱离了配置的范畴了，一些软件提供强大的api，用户通过这些api来拓展软件，甚至集成到软件本身。比如nginx使用lua来作为对单纯配置的拓展，实现了任何你所需要的功能。而github有一个很有意思的项目，叫做<a href="https://github.com/github/hubot">hubot</a>，是一个智能机器人项目，以消息的输入输出作为基本要素，用户可以加上任意的adapter，为hubot增加应答规则。其核心非常简单，但是众人拾柴火焰高，也许日久天长，这种基于规则库的低级智能，真的能发展成影响到每个人生活方方面面的智能管家。</p>

<h2 id="section-3">第五阶段，无配置文件</h2>
<p>从智能的话题延伸出去，既然软件本身需要具有智慧，那么为什么不能领悟它自己的需求，而要由人来给它写好配置？最起码，软件要能记忆曾经执行的过的操作，记录过的配置。</p>

<p>以两个monitor软件为例，’supervisor’是一款老牌的进程监控软件，由python写成，’pm2’是后起之秀，由nodejs写成，但是他们都不局限于监控python或nodejs进程，而可以做到全平台任意进程的监控。</p>

<p>假如初次使用这两款软件，更多的人会习惯于’supervisor’的操作方式，先写好一个配置文件，也许叫做<code>supervisor.conf</code>，定义好有哪些程序需要运行，执行文件的路径，环境变量，等等。然后我们敲下’supervisord start’来让这些进程运行起来，一切看起都很完美。</p>

<p>然后我们开始使用pm2，一开始会惊奇于它没有要求任何配置文件，你找到需要执行的文件，敲下<code>pm2 start app.js</code>，程序就开始执行，然后我们就可以通过<code>start|restart|reload|kill</code>等一系列命令操作这个进程。这个过程没有任何要求编写配置文件的步骤。</p>

<p>这怎么可能？我一开始的反应是这样，然后开始在各个目录中翻找所谓的’默认配置’，发现一无所获，后来我阅读了pm2的<a href="https://github.com/Unitech/pm2">源代码</a>，发现其实所有的配置，都在第一次启动进程的时候被忠实的记录下来。事情本该如此，既然第一次我已经告诉了软件需要的所有参数和变量，为什么有那么多的软件，还需要进行人为的干预来决定需要的参数，这不是一个优秀软件应该具备的素质。</p>

<p>我最近在修改一个在团队内部用了一段时间的部署工具<a href="https://github.com/sailxjx/sneaky">sneaky</a>。一直以来它都工作的很好，唯一的烦恼是在发布一个新项目前需要编写一段配置文件，填上发布的目标地址，端口，必要的时候再加上一些钩子。近期的一次更新已经将原本需要的5到6个配置项缩减到最少1个。下一步，当然是干掉配置文件。我们告诉它，把软件部署到某某服务器，然后到了下次，我们需要干同样的事时，软件已经比我们先知道它要做的事。这才是软件的未来。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[金钱与开源(part2)]]></title>
    <link href="http://jingxin.me/blog/blog/2013/12/11/jin-qian-yu-kai-yuan-part2/"/>
    <updated>2013-12-11T17:14:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2013/12/11/jin-qian-yu-kai-yuan-part2</id>
    <content type="html"><![CDATA[<blockquote>
  <p>接上篇<a href="http://jingxin.me/blog/blog/2013/12/08/jin-qian-yu-kai-yuan-part1/">金钱与开源(part1)</a></p>
</blockquote>

<h2 id="section">虚拟小费</h2>

<p>有一些项目设立了“小费”机制来展现你（对某人）的赏识。我比较熟悉的两个是<a href="http://tiptheweb.org/">TipTheWeb</a>和<a href="https://www.gittip.com/">GitTip</a>。我不确定TipTheWeb是否还有人维护。GitTip比较新一些，而且现在看起来更流行。</p>

<p>两者都建立在道德的基础上，TipTheWeb的Eric Ferraiuolo是个非常和善和高尚的人，他们的目标就和字面上看起来一样，为了使互联网变得更好。GitTip的Chad Whitacre看起来同样也是为互联网做一些好事。</p>

<p>给某人一些小费看起来就像是行善。这在你不知道什么是合适的礼物情况下，一种展现对某人爱心和赞誉的方式。能让人在精神上和物质上得到满足。</p>

<p>话虽如此，我仍旧怀疑这种方式能提高项目的创建量。难道程序员仅靠这些捐款就能付得起房租？我肯定是不行的。</p>

<p>金钱肯定是有来源的，所以我不认为完全靠这种方式能支持一个开源项目进行下去。某种程度上，GitTip上的一些人有“真实的工作”，并且决定将一部分钱用来做捐助。在GitTip上给小费，然后希望人们对你负责，这看起来有点尴尬。小费是果而非因，也就是说，“我喜欢你所以才给你小费”，而不是，“我希望你为我做点事情，所以才给你小费”。</p>

<p>我不反对捐助。事实上，我觉得它很重要，这是我们这些有经济自由的人的一种道德需要。然而，我做过计算，尝试找出一种能让我的捐助利益最大化的方式，每个月给某个开发者5美元并不能让我伤筋动骨。这看起来更像是一个游戏，对另一个人表示尊敬和赞扬，并附带一点点金钱奖励。</p>

<p>这与花大价钱雇佣开发者来创造软件不一样。但是缺少了一种交易关系，这里能得到的收益是很少的。做营销的方式林林总总，我不觉得这种方式能有很高的商业价值。为什么不去雇佣这些开发者，然后得到更高的回报呢？</p>

<p>给小费的方式既有趣，又让人感觉愉悦。但是我很怀疑它是否真的能改变世界。这并不能保证你过上无忧无虑的生活，而且我感觉假如你真的靠小费来生活，那么它可能会改变你(编写代码)的初衷。</p>

<p>这让我想到了另一种有前途但是同样存在问题的方式。</p>

<h2 id="section-1">奖金</h2>

<p>无论何时我们都得对于钱的问题万分小心。很多研究发现事物的动机有外因和内因之分。假如我为了五美元去做一些事情，我可能享受不到免费做这件事的乐趣。就像Merlin Mann说的：“世界上有两种价值：免费，和成本。”</p>

<p>当然，“我将花X美元来请你帮我写Y功能”在软件界是一种通行的方式。大部分情况下，就我经验而言，它并不能取得很好的效果。任何人都不可能给出一个等价的条件。</p>

<p>一旦延期很久，双方都不会满意。通常这个时候甲方和乙方就开始扯皮，事情就杯具了。</p>

<p><a href="https://www.bountysource.com/">BountySource</a>是这个领域的后起之秀，它有一些有趣的特征。“Backers”既可以是个人也可以是公司。利用融资的形式来支付小费的想法很有吸引力，这样你就不必为某个个体负责了。而且，集成Github Issues的想法也很聪明。</p>

<p>但是我仍然十分怀疑BountySource能改造开源软件现有的生态环境。一个显而易见的缺陷就是奖励实在是微乎其微。而且，现在钱被提到了前面，热情就被商业所取代了。</p>

<p>举个例子，我刚刚获知在这个实现<a href="http://semver.org/">SemVer 2.0规范</a>的<a href="https://github.com/isaacs/node-semver/issues/16">Issue</a>中有一笔87美元的赏金。</p>

<p>事实是，我已经和其他人一起着手写这样一份规范(在当时还很模糊)。一旦完成，我能遵守规范的唯一方式就是重写整个node-semver。这总共需要两周邹游的时间，包括将改动提交到npm上来让它起作用。</p>

<p>所以，虽然87美元看起来很诱人，但是我不能仅凭87美元来过两个礼拜。就算它有870美元，8700美元甚至87000美元，提高奖金也不是最好的办法。它尽最后的努力来使一个社区满足你的需求。假如社区根本不关心这事，那么他们也不会关心你或你的需求。</p>

<p>奖金机制在这里存在的问题就是，软件有时候并不是一个有着明确边界的产品。增加一个功能看上去更像收养一只小猫，而非投递一件包裹。假如你无论如何都想收养这只小猫，但是有些人想要花钱来让你收养另一只，就算能行，最后也会事与愿违。强扭的瓜不甜，最后可能导致的是一个糟糕的软件。</p>

<p>奖金可能在一个项目负责人希望激励成员找出bug或添加功能的时候有用。但是，项目负责人不可能给出组有的钱来请人开发(假如这样的话，还不如直接雇佣他们了)。假如一个项目负责人简单的声明，“我觉得x功能很有用，欢迎大家来实现它。”这已经起到了激励作用，奖金就完全没有必要了。最理想的情况，就像Mikeal Rogers出钱请人来找bug，这只是一种让人写代码的营销手段。</p>

<p>奖金只有在一个有明确目标的项目中才会起作用，就像查找安全漏洞。<a href="http://www.cs.berkeley.edu/~devdatta/papers/vrp-paper.pdf">漏洞奖励计划</a>发现给予奖金会比直接雇佣一个安全专家来的更行之有效。找出一些其他的有明确胜利目标的场景也是很有意思的。</p>

<p>然而，上面的只是一些例外，而不是常态。公司使用开源软件的时候通常并不会急着要某一个功能，或者在早期就发现一堆的bug。他们会与一些程序要保持联络来让他们的需求得以实现。这并不是明确的要求给程序加某个改动，而是在他们需要的时候，可以保证让程序加上这些特征。就像让某些人随时待命一样。</p>

<h2 id="section-2">顾问合同</h2>

<p>另一种给开源软件筹款的方式是签订一份顾问合同，用户可以向专家咨询，而专家则会仔细的对待这些问题。这可能包括登陆到某个系统或者临时帮程序员做debug，或解释一些稀奇古怪的错误消息，或检查代码来找出为什么它跑起来会这么奇怪。</p>

<p>Joyent付给我钱就是应为他们需要我来帮忙调试Node和npm的一些问题。</p>

<p>我想这应该是公司给开源软件开发者付钱的最通行的一种做法，相比于雇佣一个专业领域的开发者，这种做法更经济。</p>

<p>公司经常会使用很多不同的开源软件。假如签订顾问成本的开销比雇佣人来专管所有这些软件的成本要小，那么公司就可以从中获得好处了，他们可以花更少的钱，得到更好的服务。</p>

<p>此外，至少在理想情况下，这种激励并不让人反感。在产品中找问题是不可避免的，虽然这并不是很有趣。假如我知道我涉及其中，那么我会尽量写出强健，简单而容易调试的软件。这对每一个人都有好处，即使对于那些不为我的软件花钱的人。</p>

<p>当然，你任然可以发现有些不尽如人意的地方。但是“假如你给我X美元每个月，那么我会在24小时内回你邮件，并且每个月用N小时来解决你的问题。”要比“假如你现在给我X美元，我会在三个月内拿出你要的Y功能(而且不会有错)。”容易理解的多。在我平日的生活中，我仍然能感觉到在做着喜欢的工作，而且能帮助到有困难的用户。金钱是很有吸引力的一个东西，但不是至高无上的。</p>

<p>然而，这种方式任然存在很多问题。</p>

<p>我们的开源软件变得越来越模块化，而且相互依赖，“开发者”会变得很难追踪。这可能很快就会导致相互指责。假如你和某一个依赖我的代码的开发者签了合同，他们可能就会为了修改我的bug而迁怒于我，而且他们通常与我的想法不同。这种“分包”管理的方式看起来并不是很行之有效。</p>

<p>其次，大部分开源软件开发者并不擅长做顾问。擅长Javascript，运维或C语言不表示你就做给出最好的客户支持，或者你该做出那些改动。结果就是，开发者被大公司牵着鼻子走。软件变得越来越大而臃肿。这并不是一件很可怕的事，反正有大公司为它买单。但是它却忽略了中小型公司做需要的效率问题。</p>

<p>我们的软件变得越来越模块化和互相依赖，而且大部分开发者并不擅长推销他们的服务，那么第三个问题产生了。服务提供者必须很清楚明白自己能提供那些服务。比方说，你能对Node提供支持，但是你肯定不能保证对npm中的所有模块提供支持。</p>

<p>在理想世界中，这些都是可以解决的问题。这里有一大堆的问题，而且有无数的社会和技术问题等着人来解决。一个用户怎么可能找到合适的人来解决这些问题？又如何为这些问题公平的买单？你怎么才能避免开发者们在合作问题上起争端呢？</p>

<p>分出合理的技术水平，合理的分配收入，给正确的开发者分配任务，这是一个综合性的复杂问题。假设这不是很难而且现在已经有人能解决这个问题，是不现实的。</p>

<h2 id="section-3">未来</h2>

<p>我希望开源软件在某一天能被看成是一个“吃香的”职业，尤其是当你并没有在公司里获得一个“真正的”职位时。假如更多的人能享受自由的生活方式，而不用为他们的财政问题担心，这就更好了。这也可能应发更多的有趣的争论，像是为一个项目兼职，或是为开源软件的工作做出一些改变。</p>

<p>在技术行业中，人们始终能找到一起合作或创业的机会，或者给公司打工。我有很多很好的工作经历，通常是在不完全封闭的公司。然而，我并不认为这是让我们作为社会的一员而做出最大贡献的最佳方法。</p>

<p>那些自由软件开发者所得比不上其所付出，这是很可悲的。而更可悲的是某些人对这些做出巨大奉献的开发者的苛求。他们做出了巨大的贡献，而大部分却入不敷出。</p>

<p>大部分人都能做这类工作，而且可能会更有效率。但是，为了满足经济需要，他们最后还是找了份工作，这看起来是一种低效的做法。假如开源软件开发者能获得足够的动力和激励，谁能想象我们的发展会有多迅速？</p>

<h2 id="section-4">附录：没有提及的话题</h2>

<ol>
  <li>
    <p>为什么我做开源软件的时候更有创造力也更快乐？</p>
  </li>
  <li>
    <p>为什么开源软件对技术行业有帮助？</p>
  </li>
  <li>
    <p>对开放才算开源？“开放源代码” 对比 “开放式开发”</p>
  </li>
</ol>

<p>我不能对这些问题做出解答，应为这篇文章已经够长的了。我的目的不是在这里卖开源软件。请在今后的文章中关注这些话题。</p>

<h1 id="section-5">参考</h1>

<p><a href="https://medium.com/building-gittip/d44a1953749c">Money and Open Source</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[金钱与开源(part1)]]></title>
    <link href="http://jingxin.me/blog/blog/2013/12/08/jin-qian-yu-kai-yuan-part1/"/>
    <updated>2013-12-08T14:24:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2013/12/08/jin-qian-yu-kai-yuan-part1</id>
    <content type="html"><![CDATA[<blockquote>
  <p>注：本文作者是npm的作者<a href="http://blog.izs.me/">Isaac Z. Schlueter</a>，也是nodejs的主要作者之一</p>
</blockquote>

<p>“我们需要找到更好的方法来为开源软件筹资”，这是我近几年反复思考的一个问题，下面我要说的或许是一种解决方案。</p>

<p>大部分开发者在传统的合作方式下都干得不错。激励方式也很简单：努力工作，改善产品，帮助团队完成产品，然后取得共赢。当一切正常时，这种方式很好。你会发现自己很有归属感，而且在不断的自我提高。</p>

<p>但这并不适用于所有人。出于愚蠢的安全性考虑，你可能需要牺牲一些灵活性和创造力。至少，它会限制你的软件的适用范围，因此它能提供的价值也仅止于此。</p>

<p>自从我开始全身心投入编写开源软件，我感觉非常愉快，而且更有创造力了。事实上，我不会接受一份要求我放弃编写开源软件的工作，我也很有幸能有足够的资本来避免做出这种荒唐的决定。当然，这也可能导致很坏的结果，但是我很幸运的用这些时间来写了<a href="https://npmjs.org/">npm</a>，然后<a href="http://www.joyent.com/">Joyent</a>和<a href="http://nodejs.org/">Node.js</a>开始迅速发展起来，现在我在干的正是这些。</p>

<h2 id="section">艺术家和浪客</h2>

<p>可悲的是，很多有望成为开源软件界超级明星的人并没有我这么幸运。没有钱是万万不能的，而最实际的赚钱方式就是找一个工作。</p>

<p>很多雇主希望“让”雇员用“私人的”时间来处理自己的项目，或者至少能贡献给公司的项目（通着这些项目会带有一份公司的保密条款）。这并不是很明智，“自由(free)”时间并不“免费(free)”，将精力全花在工作上会让你失去应有的生活。</p>

<p>有些人则放弃了在公司工作的机会，成为了一个自由职业者，换句话说，一个挨着饿的艺术家。他们用最少的时间来接一些活，然后将剩余的时间和创造力花在开发开源软件上。但这是一种很窘迫的生活方式，特别是需要供孩子上学的时候，甚至连抚养孩子都有困难。</p>

<p>这就是我们和社会面临的困境。开源软件给软件工业带来了巨大的好处，也就意味着，给所有工业领域提供了巨大的帮助。假如专注于开源软件的都是一些幸运和热情的人，那么这里面就存在很多未经发掘的潜力股。</p>

<p>假如我们想继续从开源软件中得到好处，特别是想让这种好处最大化的话，我们就得找出一种为它买单的方式。除了能让开源软件开发者吃饱喝足以外，付款也能将他们的努力与现实世界联系在一起。</p>

<p>下面我会提到一些这个领域的开发现状。每一个都一些致命的缺点，而且我还能找到解决这些问题的办法。我不认为这会让我们觉得悲观，这些需要解决的问题反而让我们觉得正朝着正确的方向前进。</p>

<h2 id="section-1">合同，训练，咨询……</h2>

<p>许多开发者通过签订短期合同来为喜欢的项目工作。虽然这有时是一个不错的赚钱养家的方式。但是我并不认为它从根源上解决了开源软件筹资的问题。</p>

<p>这与成为一个传统雇员，然后用空余时间来处理开源项目没什么不同。这并不能让开发者直接通过他们的开源项目来盈利。就像做培训和别的一些活一样，这并没有真正的为开源软件筹资，这只不过是你通过开源软件找到了一份工作而已。</p>

<p>话虽如此，合同当然可以资助一个人其他的开源活动，同样提供临时援助也能帮助创业者步入正轨。</p>

<h2 id="section-2">专职员工</h2>

<p>一种为开源软件筹资的方式是让雇员在工作时间为开源项目做贡献。这正是Node核心项目的运作方式。Joyent，StrongLoop, Voxer, Mozilla, LearnBoost, 和Microsoft的雇员都会将他们的部分工作时间花在Node上面。</p>

<p>（注：我没有在这里囊括那些用私人时间开发项目的人。这当然也很重要，但是“动用你的私人时间来做项目”正是这里遇到的问题。）</p>

<p>这样的效果相当好，事实上带来的好处是，能让软件更符合他们大部分用户的需求。当公司付给你薪水的时候，你就会觉得有必要为自己的代码负责。假如一个团队完全不考虑用户需求的开发软件，这会显得相当的不靠谱。</p>

<p>任何能给开源软件生态系统带来益处的方法都值得鼓励。
但是这种方式也存在一些问题。</p>

<p>当一个社区项目由现实中的企业驱动时，往往企业会利用它的优势地位，来做出一些符合自己利益的改变。从长远来看，这会损害项目的可靠性和预期目标。Joyent的高级副总裁Bryan Cantrill对这些事情可能导致的严重后果有一个很精彩的演讲：<a href="http://smartos.org/2012/07/27/corporate-open-source-anti-patterns-doing-it-wrong/">企业反开源模式：大错特错</a></p>

<p>就算企业能考虑尽量避免上面的情况发生（这样做得很少），表面上（对企业）的优待条件也会给社区带来损害。开源社区的很多人认为企业的利益本质上就是邪恶的。这样说并不客观，但是考虑到这些企业的反开源模式，这样说也并不是毫无道理。</p>

<p>此外，这种解决方案的可能性微乎其微，作为企业雇员，开源项目完全符合企业利益的情况是微乎其微的。当然，大多数使用Node的公司可能不能让Nodejs核心开发者雇员做出一个像样的商业应用，嗯~，可能是运气的问题吧。</p>

<blockquote>
  <p>实在太长了，未完待续… :)</p>
</blockquote>

<h1 id="section-3">参考</h1>

<p><a href="https://medium.com/building-gittip/d44a1953749c">Money and Open Source</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[软件极简主义]]></title>
    <link href="http://jingxin.me/blog/blog/2013/09/17/ruan-jian-ji-jian-zhu-yi/"/>
    <updated>2013-09-17T21:03:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2013/09/17/ruan-jian-ji-jian-zhu-yi</id>
    <content type="html"><![CDATA[<p>今天回家的路上，竟然刮起了大风，虽然骑行艰难，但是想想公交中的闷热，倒是觉得凉爽多了。</p>

<p>在路上的时间是无聊的，于是就喜欢胡思乱想，很多自以为很棒的点子其实都是在这种不经意间想到的，办公室里的久坐反而显得效率低下了。回味一下最近做的几个项目，高屋建瓴的想想当初的设计，突然很想写一些关于软件设计的文章。就着饮料和巧克力（来点酒么？），今天就来写写软件极简主义吧。</p>

<p>Google了一圈，也没找到对“软件极简主义”的定义，姑且当做是我的独创吧。一般认为“极简主义”是设计界的一种风潮，但是软件发展至今，好像也渐渐有了这样的趋势，甚至我认为这是未来的必然，我们经常听人说“flexible”这个词，字面上来看就是“灵活的”，但是具体到这个软件是否灵活，就不太好判断了。但是，简单的软件，一定是灵活的。</p>

<h2 id="section">极简主义的的大敌</h2>

<p>软件极简主义的三个大敌：配置文件，冗余的参数，和大量复杂的接口。</p>

<p>很多人热爱配置，迷恋配置，认为越多的配置项意味着软件越强大，适用范围越广，但这是九十年代的事了。实际我们仔细翻翻常用的软件，90%的配置都是多余，没有人明白他是做什么的，也没有人希望去改变他。比方很多软件的configure文件，常常能列出上百个配置项，但是我们真的需要这么多吗？不，我们需要默认的那些值就行了。何谓默认？因为软件的设计者觉得这些是最优化也最有可能被选择的配置，那么既然是最优配置，我们又有什么理由去改变他们？</p>

<p>再说说冗余的参数，linux中有一个非常强大的命令’tar’，从man文件看来他起码有二十来个参数，但是我真的需要这么多参数吗？其实我只要记住压缩是<code>-c</code>，解压是<code>-x</code>就可以了，那么何必为了1%的功能而去加上这99%的参数呢。</p>

<p>最后是复杂的接口，举个栗子，全文搜索引擎solr非常强大，能满足我们对于文档索引的各种需求。但是他使用起来可不简单，原因我想就是因为他那种sql式的查询接口，把一件很单纯的事情搞复杂了。我们来设想一下，需要找出包含某几个关键词的文章，必要的条件是什么？关键词，文档，没了。而文档是存储在服务器的，为什么我们提供了关键词之后，仍需加上各种条件，他才能告诉我们想要的答案呢？我想软件发展到一定的智能，他就应该像一部能说话的百科全书，提问，然后告诉我们答案即可。</p>

<p>凡事都要对比着看，所以我们找点软件来对比一下。</p>

<h2 id="redis--sql">redis 与 sql</h2>

<p>redis很灵巧，所有源代码加起来不满5M，但是他很强大，hash结构能取代我们80%对于sql的需求。他也有配置文件，但是选项很少，而且每一项都有详尽的注释，并且使用默认配置就可以应对大部分的情况。唯一值得诟病的就是他的接口种类繁多，但好在这些接口很有规律可循，你只需了解了redis的基础数据结构，那么跟着官网的文档就很容易搞懂所有接口的用途，而且大部分的接口都只接受3个以内的参数，这可好记多了。我刚接触redis的时候，只花了半个小时就能玩得起来，我想面对sql恐怕没人能这么轻松的掌握吧。</p>

<h2 id="cake--grunt">cake 与 grunt</h2>
<p><a href="https://github.com/jashkenas/coffee-script/blob/master/src/cake.coffee">cake</a>和<a href="https://github.com/gruntjs/grunt">grunt</a>是nodejs中两个管理任务的模块，后者的名声更大一些，前者甚至不能说是一个模块，他只是coffeescript中附带的一个小工具。我曾尝试使用grunt来做任务管理，但是当我看到grunt官网那长长的一段initConfig时，就望而却步了。就像是我希望在墙里敲个钉子，你却给了我一台破城锤。我只不过想要给每个任务起个名字方便我以后调用和查阅而已，所以cake的一行命令足矣。</p>

<h2 id="zmq--rabbitmq">zmq 与 rabbitmq</h2>
<p>zmq是我见过的最具有极简主义风格的软件（组件）。一方面他要面对的任务非常繁杂，在异步通信中所有我们可能遇到的情况，他都为我们考虑到了，但是他又将底层的复杂问题掩盖起来，让我们看到一个光滑的表面，深藏功与名。同样来看看他的同行rabbitmq，关键词：中心服务，多线程，模式单一，最后一个特点，慢！而仅有1.7M的zmq，快是最直观的感觉，而分布式和扩展性则是锦上添花。有人说zmq就像乐高积木，每个人都能搭出他想要的形状，这话一点都不错。</p>

<h2 id="section-1">不是结束的结语</h2>
<p>软件的设计日新月异，将来肯定会接触到更多优秀的软件，也许哪天我想法变了，也许哪天遇到了更神奇的方案，可能我会补充在这里。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[介绍 coffeescript 中的列表推导式]]></title>
    <link href="http://jingxin.me/blog/blog/2013/08/17/jie-shao-coffeescript-zhong-de-lie-biao-tui-dao-shi/"/>
    <updated>2013-08-17T16:58:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2013/08/17/jie-shao-coffeescript-zhong-de-lie-biao-tui-dao-shi</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/List_comprehension">列表推导式</a>是一个很著名的语法结构，它的特点是能让代码更简短，优雅，而且易于阅读。捎带些函数式编程特点的语言都支持这种语法结构，例如lisp家族和python。coffeescript作为一门年轻的语言，自然而然的继承了这个特点。</p>

<p>我们先看看这种语法和普通循环的区别：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="nv">arr = </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">v</span> <span class="k">of</span> <span class="nx">arr</span>  <span class="c1"># use for..of loop</span>
</span><span class="line">    <span class="nx">arr1</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">v</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class="line">
</span><span class="line"><span class="nv">arr2 = </span><span class="p">(</span><span class="nx">v</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">v</span> <span class="k">of</span> <span class="nx">arr</span><span class="p">)</span>  <span class="c1"># use list comprehension</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以看到本来需要两行的代码变成了一行，这对于略有装逼犯情结的码农来说，心理上的满足感自然是无与伦比的。优点也是显而易见的，就是可读。在有些语言中，这种语法还会产生一个新的作用域，不会污染外界的变量，比方说ruby。</p>

<p>我们再来看看一些进阶用法，下面是带上<code>if</code>条件的列表推导式：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="nv">arr = </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class="line"><span class="nv">arr1 = </span><span class="p">(</span><span class="nx">v</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">v</span> <span class="k">of</span> <span class="nx">arr</span><span class="p">)</span> <span class="k">if</span> <span class="nx">arr</span><span class="o">?</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>一般的列表推导式返回的结果是一个一维数组，这在我们需要对某个<code>object</code>中的值做转换时会产生不便（<code>key</code>会丢失），这个时候我们可以采用一种变通的方法：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="nv">obj = </span><span class="p">{</span><span class="nv">a: </span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="nv">b: </span><span class="s">&#39;b&#39;</span><span class="p">}</span>
</span><span class="line"><span class="nx">obj1</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">=</span> <span class="nx">v</span> <span class="o">+</span> <span class="nx">v</span> <span class="k">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span> <span class="k">of</span> <span class="nx">obj1</span> <span class="k">if</span> <span class="nx">obj1</span><span class="o">?</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>没加两边的括号和加了括号是有区别的，像上面这种结构，可以理解为将<code>for..of</code>结构中的第二行搬到了等号左边，其中的临时变量<code>k, v</code>当然也是可以直接使用的，而且后面<code>if</code>条件是对整个循环生效的，而不是单独加在每个循环中的，比较好理解吧。</p>

<p>熟练掌握了列表推导式之后，编写代码的时候会更加得心应手，对于代码重构，想必也是极好的。</p>

<h2 id="section">相关文档</h2>

<ul>
  <li><a href="http://userinexperience.com/?p=753">CoffeeScript Object Comprehensions </a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个例子验证 do 在 coffeescript 中干了什么]]></title>
    <link href="http://jingxin.me/blog/blog/2013/08/07/yi-ge-li-zi-yan-zheng-do-zai-coffeescript-zhong-gan-li-shen-me/"/>
    <updated>2013-08-07T17:20:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2013/08/07/yi-ge-li-zi-yan-zheng-do-zai-coffeescript-zhong-gan-li-shen-me</id>
    <content type="html"><![CDATA[<p>使用jslint的时候有可能会见到这样的提示</p>

<blockquote>
  <p>Don’t make functions within a loop</p>
</blockquote>

<p>一直没有太在意这个警告，直到最近做项目的时候还真的碰到了因为这个问题产生的bug。</p>

<p>那么下面就用一个例子来看看在循环中定义方法会产生什么样的后果吧。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="nv">array = </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class="line"><span class="k">for</span> <span class="nx">num</span> <span class="k">in</span> <span class="nx">array</span>
</span><span class="line">  <span class="nx">setTimeout</span> <span class="p">(</span><span class="o">-&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">num</span><span class="p">),</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>得到的结果是’3,3,3’，而不是预期的’1,2,3’，先不说为什么，我们来看看coffeescript给出的解决方案。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="nv">array = </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class="line"><span class="k">for</span> <span class="nx">num</span> <span class="k">in</span> <span class="nx">array</span>
</span><span class="line">    <span class="nx">do</span> <span class="nf">(num) -&gt;</span>
</span><span class="line">        <span class="nx">setTimeout</span> <span class="p">(</span><span class="o">-&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">num</span><span class="p">),</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在这里不得不佩服<a href="https://github.com/jashkenas">Jeremy Ashkenas</a>的无限创造力，短短一个<code>do</code>，就解决了这么让人纠结的问题。下面来看看编译成javascript之后的结果</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">array</span><span class="p">,</span> <span class="nx">num</span><span class="p">,</span> <span class="nx">_fn</span><span class="p">,</span> <span class="nx">_i</span><span class="p">,</span> <span class="nx">_len</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">  <span class="nx">_fn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">setTimeout</span><span class="p">((</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">num</span><span class="p">);</span>
</span><span class="line">    <span class="p">}),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="nx">_i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">_len</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">_i</span> <span class="o">&lt;</span> <span class="nx">_len</span><span class="p">;</span> <span class="nx">_i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">num</span> <span class="o">=</span> <span class="nx">array</span><span class="p">[</span><span class="nx">_i</span><span class="p">];</span>
</span><span class="line">    <span class="nx">_fn</span><span class="p">(</span><span class="nx">num</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="p">}).</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面我们来解释一下为什么上面的代码会有问题，以及这个<code>do</code>为我们做了些啥。</p>

<p>关于javascript的作用域，我们可以看一下<a href="http://rzrsharp.net/2011/06/27/what-does-coffeescripts-do-do.html">这篇文章的引用</a></p>

<blockquote>
  <p>JavaScript’s scopes are function-level, not block-level, and creating a closure just means that the enclosing scope gets added to the lexical environment of the enclosed function.</p>
</blockquote>

<p>大意是说</p>

<blockquote>
  <p>JavaScript的作用域是方法级别，而非块级的。创造一个闭包可以将作用域限定在这个封闭的方法中</p>
</blockquote>

<p>这里的<code>for..in</code>循环在其他语言中就是一个块级的作用域，但是Javascript并不买它的帐，于是最后在方法中调用的num就变成了整个作用域中最后的状态(3)。解决的办法就是在循环中创建闭包，让num当成参数传入闭包，那么它在方法作用域中就不会受外部的变化而改变(实际上完全可以当成一个新的变量，不信你传个object进去，在闭包中的任何修改，都不会对外部作用域的object产生影响的)。</p>

<p>coffeescript用<code>do</code>关键字为我们将这种操作最简化，所以，尝试一下吧。</p>

<h2 id="section">参考文档</h2>

<ul>
  <li><a href="http://stackoverflow.com/questions/10810815/variable-scope-in-coffeescript-for-loop">Variable scope in coffeescript for loop?</a></li>
  <li><a href="http://rzrsharp.net/2011/06/27/what-does-coffeescripts-do-do.html">What Does Coffeescript’s “Do” Do?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于公司架构的一些吐槽]]></title>
    <link href="http://jingxin.me/blog/blog/2013/07/12/guan-yu-gong-si-jia-gou-de-yi-xie-tu-cao/"/>
    <updated>2013-07-12T09:42:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2013/07/12/guan-yu-gong-si-jia-gou-de-yi-xie-tu-cao</id>
    <content type="html"><![CDATA[<p>写了这么多文章，技术屌丝味太浓了，以前每次想写点随想也是<a href="http://jingxin.me/blog/blog/2012/07/29/jing-ji-de-le-qu/">起了个标题就没下文了</a>，正好今天早上看到了一篇<a href="http://www.36kr.com/p/204557.html">喷技术创业的文章</a>，文中观点不敢苟同，趁着早晨清醒的时刻，咱也文艺范一次，写点有感而发的文字。</p>

<p>很多公司，无论大小，都想将部门划分的细之又细。所谓麻雀虽小，五脏俱全。随意拉一张公司的组织结构图出来看看 – 总裁办，行政部，人力资源部，技术部，产品部，市场部，客服部，运营部。。。别人有的我们就得有，别人没有的我们也得有，不论有些部门是不是必须，只要一两个人也能成立个部门。不明真相的人跑来一看，瞧，多正规，高端洋气上档次。</p>

<p>且不论其他职能部门，我就来说说跟研发关系最大的一些部门，以及如何显得他们的工作是不可或缺的。</p>

<h2 id="section">产品部</h2>

<p>产品部本身就是一个比较扯的部门，因为这个词打击面太大，整天挖空心思想点子的，想的是不是产品？没日没夜扣腚的，做的是不是产品？上线后胆战心惊监测的，维护的是不是产品？我们尊崇’less is more’，谁也说不清产品到底是个啥玩意，但是就有这样一个部门，叫做“产品部”。</p>

<p>再回到<a href="http://www.36kr.com/p/204557.html">这篇文章</a>的观点，技术人员过于注重技术，而忽略了对产品的思考，所以需要专门设置这样一个产品经理的职位来构思整个产品的走向。看似有理，但是他的前提是“技术人员不会思考产品”，这就是一个弥天大谎，我见过的大部分技术人员，对于项目的细节，业务逻辑的理解都比普通产品高出不知道多少个档次，我们不能纸上谈兵，只有真正理解了产品实现的业务逻辑，才能提出更有建设性和创新性的意见，这叫站在巨人的肩膀上。但是我看到的很多产品是，进入公司一个礼拜都不到，以前从来没有用过公司的产品，就能洋洋洒洒写出一大篇设计文档来，而问到为什么要这样改，则又支支吾吾，说不出个所以然，最后来一句我看到某某网站也是这样做的，所以我们也要这样做。</p>

<p>回到技术人员的自我修养上来，我认为每个研发应该视自己开发的产品如孩子一般，在关注技术进步之余，能花时间来培养这个孩子，让其更健壮，更优雅，更招人待见。同时，也要多看看外面的世界，试用别人的产品，包括竞争对手的，以和自己创造的孩子进行对比。技术人员提出的产品改进意见往往更务实，更切中要害。</p>

<p>将这种视如己出的概念再推广到所有员工身上，其实人人都可以为产品添砖加瓦出谋划策，那么，产品部门存在的价值何在？</p>

<h2 id="section-1">测试部</h2>

<p>测试可以分为好多类：1.做黑盒的。2.做白盒的。3.自动化测试。
我们一一道来。</p>

<p>先说第一种，做黑盒的。很多公司曲解了黑盒的意思，认为做黑盒就是一个功能开发好了，你拿去用，不出问题就行了。这样就把软件开发变成了一个劳动密集型行业，这样的测试与拿到内测账号的用户有什么区别。更何况我们有些测试人员的使用经验可能还不如用户。这样的测试，效率既低下，效果还不明显。</p>

<p>再说第二种，做白盒的。一些公司有白盒测试，其实就是看看代码。很多公司认为，这个人写代码不行，就让他做测试吧。这是一个大大的误区，对测试人员的要求应该比研发更高，因为我认为<a href="http://blogs.msdn.com/b/ericlippert/archive/2004/06/14/reading-code-is-hard.aspx">读代码往往比写代码更难</a>。上面这种做法的后果就是，一些人做白盒测试的时候，一旦看到不明白的地方，就跑来问研发，需要研发手把手的一条条教来，这不光是浪费双方的时间，也是在做无用功。我相信任意一个合格的研发人员，在提测之前应该都对代码做完整细致的自测。</p>

<p>最后说说第三种，做自动化测试的。这个其实要求较高，很多公司没有，即使有也是认为装个hudson写写配置文件就算自动化测试了。而我认为的自动化测试应该有很强的编码能力，能写出简单有效的单元测试用例，能配置不同的运行环境来确保软件的跨平台性，能进行性能测试，来保证软件的工作效率。这都对测试人员提出了较高的要求，这种人少之又少，而我见到的大多数测试人员连apache的vhost文件都不会写。</p>

<p>真正的测试人员应该得到相当的尊敬，因为他们需要对业务和代码都有很深的理解，他们比程序员更细心，既能防止程序员犯一些低级的错误，又能在一些容易忽略的问题是上保持警惕。</p>

<p>假如找不到这样合适的测试人员，测试部就没有存在的意义。</p>

<h2 id="ued">UED部</h2>

<p>UED这个词是个舶来品，你甚至很难找到合适的中文替代词，只能用“用户体验”这种虚无缥缈的词来囊括。很多公司的UED，其实就是美工。</p>

<p>我自认为对设计和绘画不在行，所以我很尊重设计师的工作。设计师负责原型和效果设计，程序员负责实现，这是由人的左右半脑分工决定的，而且一个好的设计师，简而美的设计，应该是先在公司内部群体中产生认同感，才能让更多的用户认可。</p>

<p>下面是我的吐槽，一些我见过的设计师，可能读过一本<a href="http://book.douban.com/subject/1440223/">Don’t Make Me Think</a>，就能自诩得到了设计的精髓，接着就对页面开始做大刀阔斧的改革，也不需要其他人的意见，因为设计师都有一些自负天才的心理在作怪（嗯，其实程序员也有）。更有甚者，是一天一小改，三天一大改，也没有统一的风格，去别的网站东边抄一块，西边抄一块，就变成了咱家的东西。别人做瀑布流，我们也搞瀑布流，别人做下拉刷新，我们也用下拉刷新，可是从来没有独创的功能被人认可，这也是“一直在模仿，从未被超越”的典型了。</p>

<p>再说到“用户体验”这个词上，世界上恐怕再也找不到这样一个百搭的词了。一个按钮加大点可以叫用户体验，换个字体也叫用户体验，但是众口难调，<a href="http://lesswrong.com/lw/dr/generalizing_from_one_example/">人的大脑是很奇怪的</a>，你喜欢的未必是人家喜欢的。所以真正需要做到的是在公司这个小范围内赢得众人的认同，然后将风格延续下去，这样才能让更多的用户接受乃至迷恋这种风格。有个很成功的例子就是苹果。</p>

<p>这里又要说到关于设计师和程序员两类人的区别了。我认为一个好的设计师和一个好的程序员应该是可以互补并相互学习的。我以前的一个研发经理，技术上肯定是毋庸置疑的，但是也做得一手好画，从鼠绘到原型到效果图，无所不能。这样的人才非常难得，但并不是没有，一个诸葛亮是远远高于三个臭皮匠的。而更多的人可以在学习中达到这个高度。</p>

<h2 id="section-2">理想中的组织架构</h2>

<p>任何组织发展壮大之后，人员就会变得复杂，管理难度相应也会增大。职场如战场，公司就是一个缩小的社会，我们不妨就从历史中找个例子出来。清廷倒台之前，曾有一番关于“共和”还是“立宪”的争论，两派人争得不可开交，最后的结果我们知道，共和派取得了胜利。</p>

<p>“共和”和“立宪”的根本区别还是权力集中在何处。相比帝制的独裁，“立宪”在名义上是说君主也要遵纪守法，权力还是集中于小部分人（真正的“立宪”君主只是个象征，内阁还是要选举的）。而“共和”则将权力下放于大众，政府则是大众意志的集中。</p>

<p>开源软件的圣经<a href="http://en.wikipedia.org/wiki/The_Cathedral_and_the_Bazaar">《大教堂与市集》</a>其实也表达了这样一种思想。软件开发由自上而下的瀑布流发展到今天的开源模式，最有代表性的就是<a href="http://scottchacon.com/2011/08/31/github-flow.html">github flow</a>。就是任何人都有权利对产品提出改进意见，并且可以亲自来实现这些功能，而项目的管理者(owner)在更新自己的产品之余，还需要接受来自四面八方的(pull request)。owner有权力决定这些功能的加入，也有义务鉴定这个功能的风险。</p>

<p>同样对公司的管理也是这样，权力不应该集中于个人，每个员工都应该有发言权。每个员工都应该有自由发挥的空间，来实现自己需要的功能。同时也不能忽略了合作的重要性，所以在日常的工作中，需要三两人一组，作为一个cell，可以是同一个部门中志同道合的人，也可以是不同部门中可以互补的人(比如设计师和程序员)。以cell为最小单位，来完成每个任务。最基本的目标：追求效率，追求自我提高，追求快乐工作。</p>

<p>这对个人也是有要求的，就是每个人都需要能独当一面。我想谁都不会愿意与一个一无所知和整日拖沓的同事合作吧（MM除外）。同时，管理层(owner)的责任就是协调cell之间的工作，有权力决定cell提出的功能的去留，也有义务听取大家的意见。</p>

<p>这也是我觉得创业公司比大公司好的一个原因，就是你有决定权，或者能将意见直接反馈到管理层，而不需要经过大公司死板结构的层层汇报。同样，这样的办事效率也是很多公司望尘莫及的。赠人玫瑰手有余香，以开放的心态接受他人，那么他人也会以同样的姿态来回报你。</p>

<p>最后贴一个豆瓣上的小段子，娱乐一下。<a href="http://www.douban.com/note/157604143/">不同部门员工吃饭时聊些什么</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript并行计算： web worker]]></title>
    <link href="http://jingxin.me/blog/blog/2013/07/10/javascript-bing-xing-ji-suan-web-worker/"/>
    <updated>2013-07-10T12:09:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2013/07/10/javascript-bing-xing-ji-suan-web-worker</id>
    <content type="html"><![CDATA[<p>最近发现了chrome下面的一个奇特现象，像下面这样的一段代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="nb">document</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">title</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nb">document</span><span class="p">.</span><span class="nx">title</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line"><span class="p">},</span> <span class="mi">300</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这段代码本来是为了让标签栏内容出现滚动的效果，每300毫秒变化一次，这本来没什么问题，但是偶然切换的其他标签时，这个滚动的速度就会变慢，网上查了一下，原来<a href="https://codereview.chromium.org/6577021">chrome设计如此</a>，当标签页不活动时，chrome会将所有定时任务的最小间隔设置为1秒，这样来减轻浏览器的压力，会影响所有带有timer的方法，如<code>setInterval</code>和<code>setTimeout</code>。像上面这样的任务，间隔就被提高到了1秒。</p>

<p>由此引发的思考是，假如这个任务实时性要求很高，不容许这种时间机器的出现怎么办。stackoverflow也有人给出了<a href="http://stackoverflow.com/questions/5927284/how-can-i-make-setinterval-also-work-when-a-tab-is-inactive-in-chrome">一种解答</a>，不使用内置的timer，而是在代码中主动计算时间差，来模拟<code>setInterval</code>的行为。这种方法能解决问题，但是总觉得不够“优雅”。更好的方法是使用html5的<a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/workers.html">web worker</a>。</p>

<p>web worker目前支持的浏览器包括Firefox 3.5+，Chrome和Safari 4+。你用IE6？那自求多福吧。</p>

<p>搞过消息队列和异步计算的人对worker这个词应该不陌生，html5为我们提供了web worker这样一个优秀的特性，旨在将后台任务和前台交互分开，worker中的任务不会阻塞页面事件。我们先来解决上面提出的问题。</p>

<p>由于不隶属于任意页面，所以chrome不会将worker中的进程timer也改成1秒。所以我们可以对上面的代码稍作修改，拆分成worker和main两部分。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">worker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Worker</span><span class="p">(</span><span class="s1">&#39;worker.js&#39;</span><span class="p">);</span>
</span><span class="line"><span class="nx">worker</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nb">document</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">title</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nb">document</span><span class="p">.</span><span class="nx">title</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>worker.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">self</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">();</span>
</span><span class="line"><span class="p">},</span> <span class="mi">300</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样触发更新title的任务就由worker来完成了。</p>

<p>上面只是一个粗浅的demo，worker真正的意义应该还是在并行计算，不过目前的web应用中前端基本没有大运算量的任务，所以worker在这里就没用武之地了。我们可以设想下面一种情况。</p>

<p>md5是很多网站用于保存密码的方式，由此也产生了很多md5解码的工具，由于md5是一种不可逆的加密算法，解密的方法除了使用字典以外，还有一种简单粗暴的方法，就是暴力破解，而这是非常耗时间的。我们拿到了一个加密过的字符串’77b3e6926e7295494dd3be91c6934899’，而且知道明文是一个六位的数字，那么可以用数字循环来制造碰撞(里面的md5方法是引入外部库，这里及不贴出来了)：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">cipher</span> <span class="o">=</span> <span class="s1">&#39;77b3e6926e7295494dd3be91c6934899&#39;</span><span class="p">;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">start</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
</span><span class="line"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">999999</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">if</span> <span class="p">(</span><span class="nx">md5</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="o">===</span> <span class="nx">cipher</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;plain text: &#39;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">);</span>
</span><span class="line">    <span class="k">break</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;time cost: &#39;</span> <span class="o">+</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()</span> <span class="o">-</span> <span class="nx">start</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>跑下来时间大概是12330毫秒。下面我们用十个worker来分担任务，实现相同的功能。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>main.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">cipher</span> <span class="o">=</span> <span class="s1">&#39;77b3e6926e7295494dd3be91c6934899&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">workerList</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class="line">    <span class="nx">start</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
</span><span class="line"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// init 10 workers</span>
</span><span class="line">  <span class="nx">workerList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">Worker</span><span class="p">(</span><span class="s1">&#39;worker.js&#39;</span><span class="p">));</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">workerList</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">worker</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// send task to each worker</span>
</span><span class="line">  <span class="nx">worker</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;plain text: &#39;</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
</span><span class="line">    <span class="nx">workerList</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">_worker</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">_worker</span><span class="p">.</span><span class="nx">terminate</span><span class="p">();</span>  <span class="c1">// terminate all workers after task finished</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;time cost: &#39;</span> <span class="o">+</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()</span> <span class="o">-</span> <span class="nx">start</span><span class="p">));</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line">  <span class="nx">worker</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">({</span>
</span><span class="line">    <span class="nx">start</span><span class="o">:</span> <span class="nx">index</span> <span class="o">*</span> <span class="mi">100000</span><span class="p">,</span>
</span><span class="line">    <span class="nx">end</span><span class="o">:</span> <span class="nx">index</span> <span class="o">*</span> <span class="mi">100000</span> <span class="o">+</span> <span class="mi">99999</span><span class="p">,</span>
</span><span class="line">    <span class="nx">cipher</span><span class="o">:</span> <span class="nx">cipher</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>worker.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">self</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">start</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">end</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nx">md5</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="o">===</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">cipher</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">self</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class="line">      <span class="k">break</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最佳期望是总时间的十分之一，实际执行下来用了2792毫秒，这与给worker分配任务的方式有关，假如我们给worker随机指派计算值，那么得到的结果会更平均，而不会因为密文的变化而有大的波动。</p>

<p>web worker对于javascript全局对象的访问也是有一些限制的，比如window，document，parent对象，这也是不能用worker取代所有页面script的一个原因。</p>

<p>关于worker的具体介绍，<a href="http://www.html5rocks.com/en/tutorials/workers/basics/">这篇文章</a>讲的很好，里面还提供了几个现实的例子，非常详细。</p>

<h2 id="section">参考文档</h2>
<ul>
  <li><a href="http://www.html5rocks.com/en/tutorials/workers/basics/">The Basics of Web Workers</a></li>
  <li><a href="http://robertnyman.com/2010/03/25/using-html5-web-workers-to-have-background-computational-power/">Using HTML5 Web Workers To Have Background Computational Power</a></li>
  <li><a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/workers.html#creating-a-dedicated-worker">9 Web workers</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[几款压力测试工具]]></title>
    <link href="http://jingxin.me/blog/blog/2013/07/05/ji-kuan-ya-li-ce-shi-gong-ju/"/>
    <updated>2013-07-05T16:45:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2013/07/05/ji-kuan-ya-li-ce-shi-gong-ju</id>
    <content type="html"><![CDATA[<p>压力测试工具林林总总，数不胜数，这里只列举几个命令行下常用的工具，来看看那种用的比较顺手，纯粹个人意见。</p>

<ul>
  <li>ab (apache benchmark，因为是apache自带的工具，所以用的人比较多)</li>
  <li>siege (一个不错的开源压力测试工具，简单，好用)</li>
  <li>httperf (据说很强大，但参数实在繁琐，不考虑)</li>
</ul>

<h1 id="ab">ab</h1>
<p>ab是apache自带的测试工具，很多情况下我们要测试一个网站在并发100下的响应速度，用下面的命令就行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ab -n1000 -c100 http://domain.com/</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可不要少了最后的那个’/’，ab接受的url必须是schema, domain, path一个不少的。</p>

<p>其他像添加header，post参数等等的，man一下ab的手册吧。</p>

<p>长久以来我一直以ab作为webserver性能的一个指标，因为使用确实简单，直到遇见了siege。</p>

<h1 id="siege">siege</h1>

<p>siege应该也有些年头了，2000年的时候就已经有这个软件了，直到最近更新了3.0.1版本。在第一次使用的时候，需要用siege.config在主目录下面生成一个配置文件.siegerc。这类文件常用linux的人应该很清楚了，里面每个选项都有明确的注释。需要注意的是delay这个值，做一般测试的时候会按照这个设定的时间间隔停顿，那么这样压力测试出来的结果就不准了，所以在做压测的时候需要加上’-b’参数，或者直接将这个参数设置为0。下面是一个100并发测试10秒钟的例子。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">siege -b -c100 -t10S http://domain.com/</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>siege的一个缺点是没法设置总请求数，但是可以通过重复数和并发数组合来求出总请求数，例如我们要在100并发下发送1000个请求，就用下面的命令，当然这个时候就不能用’-t’参数了</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">siege -b -c100 -r10 http://domain.com/</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>结果与ab差不多，但是他会将历次测试的结果保存在一个文件中供以后比较。</p>

<h1 id="section">测试</h1>

<p>这里我分别用nodejs和php写了两个server脚本，响应值都是’hello world’，都用单一进程作为web server。（php5.4之后用-S参数来启动服务）。</p>

<p>测试结果:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">(request/second)        php     nodejs
</span><span class="line">siege                   2500    2000
</span><span class="line">ab                      4880    3480</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>测试软件的评判标准不一样，所以测试结果有差距也比较合理，不能由此说明谁比谁更准确。但是在测试中nodejs的性能比php要慢20%这个倒是让我觉得比较惊讶，看来nodejs在运算效率上并不占优势。但是在复杂的web应用中，更多的时间开销在io中，nodejs合理的将这部分等待时间利用了起来，才会让人感觉比较快吧。</p>

<p>很早就有人对这几款测试软件做了<a href="http://lionet.livejournal.com/99984.html">横向的对比</a>，有兴趣可以看一下，其中keepalive和no-keepalive的效率差距比较大，我自己测试时觉得并不明显，可能是写的例子比较单一吧。</p>

<p>今后假如需要做简单的压力测试，我还是比较倾向于使用siege。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php 闭包：并不像看上去那么美好]]></title>
    <link href="http://jingxin.me/blog/blog/2013/07/05/php-bi-bao-bing-bu-xiang-kan-shang-qu-na-me-mei-hao/"/>
    <updated>2013-07-05T10:27:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2013/07/05/php-bi-bao-bing-bu-xiang-kan-shang-qu-na-me-mei-hao</id>
    <content type="html"><![CDATA[<p>最近一个叫<a href="http://laravel.com/">laravel</a>的php框架在社区讨论的风生水起，号称php界的rails，试用了一下，确实非常新鲜，但是又有种似曾相识的感觉。</p>

<p>例如路由中的一段代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="cp">&lt;?php</span>
</span><span class="line"><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>兄弟，你走错了，隔壁javascript出门左拐。</p>

<p>laravel号称将php5.3中新引入的闭包发扬光大，让代码变得更加灵活优雅，趣味十足。</p>

<p>在我看来，坑更多了。</p>

<p>为什么说php闭包没有看上去那么美好，因为他的生搬硬套。</p>

<p>闭包这个概念早已不新鲜，在函数是语言中被早已被用烂了，以至于现在lisp教徒抨击其他语言时都避而不谈closure和lambda，转而讨论currying，otp，metaprogramming等等更玄乎的东西。</p>

<p>php的闭包不能说引入的太晚，没有跟上编程发展的脚步，其实在php4时代，就已经有了这样的概念，<code>call_user_func</code>，<code>array_map</code>等等方法都是支持callback方法的。但是时至今日，它依然是不完善的。</p>

<p>在发展的过程中，php引入了很多舶来品，例如接口，命名空间，异常控制等等，每种都是对自身语言已有编程风格的颠覆，以至于现在同样是编写php，不同的人能写出完全不同风格的代码。自然闭包也非原创，同样很怪异。</p>

<h1 id="section">作用域</h1>

<p>在javascript中，闭包内的变量是继承上层的，这是一种很自然的做法，也相当的灵活。但是php有自身的一套作用域规则，于是在闭包中使用变量就变得非常怪异，例如下面的例子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="cp">&lt;?php</span>
</span><span class="line"><span class="nv">$v</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="nv">$arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span><span class="line"><span class="nb">array_map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$n</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$v</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nv">$n</span> <span class="o">==</span> <span class="nv">$v</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">echo</span> <span class="s1">&#39;exist&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class="line"><span class="p">},</span> <span class="nv">$arr</span><span class="p">);</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个<code>use</code>就是用来解决作用域的问题的，使用时可得瞧准咯，每个要用到的变量都得用<code>use</code>引入哦。然后当闭包身处类中时，情况又不一样了，下面的做法在php5.3中是错误的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="cp">&lt;?php</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Demo</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="k">protected</span> <span class="nv">$val</span> <span class="o">=</span> <span class="s1">&#39;v&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">public</span> <span class="k">function</span> <span class="nf">getClosure</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="k">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">val</span><span class="p">;</span>
</span><span class="line">        <span class="p">};</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nv">$d</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Demo</span><span class="p">();</span>
</span><span class="line"><span class="k">echo</span> <span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$d</span><span class="o">-&gt;</span><span class="na">getClosure</span><span class="p">()),</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>因为php5.3不支持在闭包中使用<code>$this</code>或<code>self</code>关键字，但是在php5.4中得到了支持，所以上面的代码是可运行的，但是这让上面第一个例子情何以堪呢。</p>

<h1 id="section-1">绑定</h1>

<p>在5.4之后，php开始支持将一个闭包绑定到别的对象上，以便能直接调用这个对象的成员：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="cp">&lt;?php</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Clo</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$val</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">val</span> <span class="o">=</span> <span class="nv">$val</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">function</span> <span class="nf">getClosure</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="k">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">            <span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">val</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class="line">        <span class="p">};</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Wrap</span> <span class="p">{</span>
</span><span class="line">    <span class="k">protected</span> <span class="nv">$val</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">public</span> <span class="k">function</span> <span class="nf">bar</span><span class="p">(</span><span class="nv">$foo</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$foo</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nv">$a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Clo</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line"><span class="nv">$wrap</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Wrap</span><span class="p">();</span>
</span><span class="line"><span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$a</span><span class="o">-&gt;</span><span class="na">getClosure</span><span class="p">());</span>
</span><span class="line"><span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$a</span><span class="o">-&gt;</span><span class="na">getClosure</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">bindTo</span><span class="p">(</span><span class="nv">$wrap</span><span class="p">,</span> <span class="nv">$wrap</span><span class="p">));</span>
</span><span class="line"><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这在某些场景下有用武之地，不过也要注意作用域，<code>bindTo</code>方法中的第二个参数是设置作用域的，向上面<code>Wrap</code>类中的变量<code>$val</code>是私有的，假如没有<code>bindTo</code>的第二个参数，是行不通滴。</p>

<h1 id="generator">Generator</h1>

<p>顺便再提一下php5.5中新增的Generator，其中的yield支持运行时自定义方法，这显然又是从隔壁python借鉴来的，调用方式同样不是很自然，foreach承担了迭代的责任，相比于ruby中yield的强大功能，更是差之千里了。</p>

<p>不过有总比没有要好，将来一定有创意丰富的人能玩出更多花样，哦，貌似又多了一种编程风格。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[TDWTF] 我们相信傻瓜]]></title>
    <link href="http://jingxin.me/blog/blog/2013/06/20/tdwtf-wo-men-xiang-xin-sha-gua/"/>
    <updated>2013-06-20T16:06:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2013/06/20/tdwtf-wo-men-xiang-xin-sha-gua</id>
    <content type="html"><![CDATA[<p>一天早上，Stan去找他的上级Monty，他正在疯狂地的敲着键盘。这意味着两件事：明天他会收到一封讨厌的设计文档，而且那个设计中会用到一个从没用过的数据库。Monty是一个数据库“砖家”，没什么问题是他不能搞定的。Stan在这家公司的第一年，照做了Monty描述的每个设想，因为他不知道有哪些更好的办法。现在他对公司系统有了更多的了解，他渴望有个机会来做一些正确的事。</p>

<p>Stan在邮箱里找到了一份客户发给Monty的需求副本，要求两个ASP.NET应用之间能互相通信。Stan喜上心头，这是一个简单的web服务，既然他们用.NET，那么只要用<a href="http://en.wikipedia.org/wiki/Windows_Communication_Foundation">WCF</a>就行了。</p>

<p>Monty的介入绝对不可能玷污这个方案，他连.NET的基础都不懂。自从入职的第一天起，Stan就想着能对系统的设计有些话语权，这样才像一个“真正的开发”。最后，这个机会来了！</p>

<p>第二天，Monty的设计发到了Stan的邮箱。Stan心不在焉的打开它，就像一个验尸官掀开一张裹尸布。他翻开这份足足45页的“可扩展性数据库驱动进程内通讯框架”。这有点难理解，而且看起来有点像是重复造轮子。里面几乎没有提及客户的应用，因为它看起来想要将任意应用连接在一起。</p>

<p>这个设计需要用到11张数据表来传递元数据（发送，接收，时间戳，用户id，等等）和应用数据（统统被转成字符串并且储存在类似列1，列2等等的字段中）。当一个应用想要给另一个发送消息，它需要发送所有的会话/消息数据给一个存储过程。这个存储过程接收75个参数，大部分是可选的。另一个类似的存储过程允许发送者附加特殊的应用数据。而对于一个接收者，它需要调用<code>SP_CHECK_FOR_MESSAGES_POLLING_PROCEDURE</code>存储过程并传入它的<code>PK_INT_APPLICATION_IDENTIFIER</code>标识。当它消费完这条消息，还要调用<code>SP_MESSAGE_TRANSACTION_COMPLETE_PROCEDURE</code>存储过程来从“收件箱”中清除消息。Monty的系统会将这个事务中的所有数据移到一个结构相同的log表中，但是没有任何完整性可言。</p>

<p>在Stan砸碎屏幕之前，他听到Monty得意洋洋的说：“我对这事很兴奋，我希望这个能用在任何事上！”</p>

<p>“任何事？”Stan抑制住汹涌而来的恶心感。是时候让他坚持自己的原则，来表明他不再是那个毫无主见的职场新人了。“这个实现。。。很有趣，但是没必要用数据库来实现它”。</p>

<p>Monty一笑置之。</p>

<p>“.NET有个叫WCF的框架可以来帮助我们实现这个功能，”Stan继续说，“我们只需要写很少-”</p>

<p>“不行，”Monty不容置疑的说，虽然Stan知道假如他问Monty什么是“WCF”，Monty肯定会顾左右而言他。“我们在调试系统时会碰到一堆的问题。我们需要知道应用和应用之间是怎么通信的，谁，在什么时候，发送了消息。而且我们会将它储存在一个安全的地方。”</p>

<p>“但是，有一大堆的工具可以用来调试WC-”</p>

<p>“请实现我设计的系统。”Monty不留余地的走开了，以防Stan再有什么说辞。</p>

<p>Stan在与内心抗争中，花了几个礼拜的时间来实现这个冒牌的规范。错误不断的冒出来，而且没有什么好办法来解决强数据类型和同步性的问题。加入这种预防措施会让这庞然大物跑的更慢，虽然它已经够慢的了，而且仍然没法保证它按照预期工作。同时，Monty与客户的沟通不畅导致需求不断的变化。他的设计一天天的变化，最后成了一个64页的设计文档，需要14个数据表。</p>

<p>Stan受够了。他最后只能求助Monty的老板David。David实行开门迎客政策。Stan向David描述了现状。</p>

<p>“这不仅仅走了弯路，而且也不是客户想要的。用WCF的话我本来可以在几个礼拜前就完工，但是Monty不想这么干。”Stan总结到，“我觉得现在改正还为时不晚，但是Monty不赞成这样做。您能向他解释一下吗？”</p>

<p>David叹息道：“我知道了”。</p>

<p>终于！Stan兴奋地想他的建议成功了。</p>

<p>David停顿了一小会儿，然后像一个先知布道一样说，“你叫Stan是吧？Monty。。。有一些怪癖，有时候他会让你做一些毫无意义的事。我需要你继续下去并且相信一切都会好起来。他从公司成立时就在这儿了，我们的系统就像他的孩子一样，所以他知道哪种方式最合适。”</p>

<p>Stan明白现在最理智的是什么事情，他一言不发的回到自己的座位，经过一个小时的沉思，永远的离开了这个办公室。</p>

<h2 id="section">后记</h2>

<p>故事归故事，但很多公司的现状如此，如果不能在工作中提高自己，那么就想办法提高工作。后面的的<a href="http://thedailywtf.com/Comments/In-Fool-We-Trust.aspx">评论</a>也很有意思，可以看一下。</p>

<p>原文链接：<a href="http://thedailywtf.com/Articles/In-Fool-We-Trust.aspx">In Fool We Trust</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[start-stop-daemon]]></title>
    <link href="http://jingxin.me/blog/blog/2013/06/19/start-stop-daemon/"/>
    <updated>2013-06-19T13:44:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2013/06/19/start-stop-daemon</id>
    <content type="html"><![CDATA[<p>很多软件不提供init脚本，或者提供的脚本不合胃口，难免要自己动手丰衣足食。下面就推荐一个用来启动守护进程的神器。</p>

<p><code>start-stop-daemon</code>是<a href="http://www.gentoo.org/proj/en/base/openrc/">OpenRC</a>计划的一部分，这个程序最先出现在Debian系的Linux发行版中，这里有个比较古老的<a href="http://man.he.net/man8/start-stop-daemon">手册</a>页面，更详细更直观的办法当然是通过<code>man start-stop-daemon</code>来查看手册了。我使用的是”start-stop-daemon (OpenRC) 0.10 (Funtoo Linux)”版本，大部分功能是差不多的。</p>

<p><code>start-stop-daemon</code>最基本的两个功能就是<code>--start</code>和<code>--stop</code>，简写为<code>-S</code>和<code>-K</code>，然后再加上一个<code>-s|--signal</code>来给进程发送信号，功德圆满。</p>

<p>至于其中比较常用的一些参数，我列出来参考一下，以免忘了：</p>

<ul>
  <li><code>-x, --exec daemon</code>，daemon就是真正要执行的进程脚本，比方说启动nginx，那么就是<code>start-stop-daemon -x nginx</code>。</li>
  <li><code>-p, --pidfile pidfile</code>，指定pid文件，至于pid文件的用途就多了，stop,status都少不了它。</li>
  <li><code>-n, --name</code>，如果没有指定pid文件，那么就要通过指定name来停止进程了。</li>
  <li><code>-u, --user user[:group]</code>，指定脚本用哪个用户或用户组执行，init脚本是必须使用<code>root</code>权限来执行的，但是它fork出来的子进程我们一般会选择一个权限较低的用户。</li>
  <li><code>-b, --background</code>，强制脚本在后台执行。</li>
  <li><code>-m, --make-pidfile</code>，这个一般和<code>-b</code>配合，用于生成pid文件</li>
  <li><code>-d, --chdir path</code>，切换进程的主目录，这个在构建守护进程的时候是很常用的。</li>
  <li><code>-r, --chroot path</code>，在某些安全性要求较高的情况下，我们就需要用到<code>chroot</code>将进程工作环境与物理环境完全隔离开来。</li>
  <li><code>-1, --stdout logfile</code>，将标准输出记录到log文件，与之相对应的就是<code>-2, --stderr</code>标准错误流。</li>
  <li><code>-w, --wait milliseconds</code>，进程启动后，有这个参数会等待几毫秒来检测进程是否仍然存活。</li>
</ul>

<p>参数说完，下面就是一些需要注意的地方了。</p>

<h2 id="b"><code>-b</code>与守护进程</h2>

<p><code>-b</code>是一个很常用的参数，我们使用<code>start-stop-daemon</code>的目的就是为了实现守护进程。但是有些程序自身也实现了守护进程的功能，比方说mongodb中有一个fork选项就是将自己在后台执行，这个时候假如搭配的<code>-b</code>参数，是得不到正确的pid的，因为<code>start-stop-daemon</code>只能得到最初启动的父进程pid，而父进程在fork完之后就自动退出了，那么<code>start-stop-daemon</code>就永远找不到正确的pid来结束进程了。所以使用<code>-b</code>的时候，一定要保证程序是在前台运行的。</p>

<h2 id="section">其他参数</h2>

<p><code>-x daemon</code>后面跟的执行脚本必须只能是一个文件名，有些程序运行时还需要指定一些参数，比如<code>nginx -c file</code>来指定nginx的配置文件，使用<code>start-stop-daemon -x "nginx -c file"</code>是会报错的，这些程序内的参数以另一种方式加载，<code>start-stop-daemon -x daemon -- $ARGV</code>，这里的双横线<code>--</code>后面跟的所有参数就会被带到程序中了，比如<code>start-stop-daemon -x nginx -c /etc/nginx.conf</code>。</p>

<p>下面是mongodb的一个init脚本，用<code>start-stop-daemon</code>是非常简单的。（貌似源代码中没有提供init脚本，只能自己动手了）。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/sbin/runscript</span>
</span><span class="line"><span class="c"># Distributed under the terms of the GNU General Public License v2</span>
</span><span class="line">
</span><span class="line"><span class="nv">MONGO_HOME</span><span class="o">=</span>/usr/local/mongo
</span><span class="line"><span class="nv">MONGO_USER</span><span class="o">=</span>mongo
</span><span class="line"><span class="nv">MONGO_PID_FILE</span><span class="o">=</span>/var/run/mongo/mongo.pid
</span><span class="line">
</span><span class="line">depend<span class="o">()</span> <span class="o">{</span>
</span><span class="line">    need net
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">start<span class="o">()</span> <span class="o">{</span>
</span><span class="line">    ebegin <span class="s2">&quot;Starting Mongodb&quot;</span>
</span><span class="line">    start-stop-daemon --start       <span class="se">\ </span>
</span><span class="line">        --chdir  <span class="s2">&quot;${MONGO_HOME}&quot;</span>    <span class="se">\ </span>
</span><span class="line">        --user <span class="s2">&quot;${MONGO_USER}&quot;</span>      <span class="se">\ </span>
</span><span class="line">        -m -p <span class="s2">&quot;${MONGO_PID_FILE}&quot;</span>   <span class="se">\ </span>
</span><span class="line">        -b --exec <span class="s2">&quot;${MONGO_HOME}/bin/mongod&quot;</span> -- --config<span class="o">=</span>/etc/mongodb.conf
</span><span class="line">    eend <span class="nv">$?</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">stop<span class="o">()</span> <span class="o">{</span>
</span><span class="line">    ebegin <span class="s2">&quot;Stopping Mongodb&quot;</span>
</span><span class="line">    start-stop-daemon --stop        <span class="se">\ </span>
</span><span class="line">        --chdir <span class="s2">&quot;${MONGO_HOME}&quot;</span>     <span class="se">\ </span>
</span><span class="line">        --user <span class="s2">&quot;${MONGO_USER}&quot;</span>      <span class="se">\ </span>
</span><span class="line">        -p <span class="s2">&quot;${MONGO_PID_FILE}&quot;</span>      <span class="se">\ </span>
</span><span class="line">    eend <span class="nv">$?</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 coffeescript 的注意点]]></title>
    <link href="http://jingxin.me/blog/blog/2013/06/13/shi-yong-coffeescript-de-zhu-yi-dian/"/>
    <updated>2013-06-13T14:48:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2013/06/13/shi-yong-coffeescript-de-zhu-yi-dian</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/jashkenas/coffee-script">coffeescript</a>是javascript的一个方言，随着javascript在前后端的流行，它在<a href="https://github.com/languages">github</a>的排名也扶摇直上，最近终于挤掉高帅富<a href="https://github.com/languages/Objective-C">Objective-C</a>跻身前十，可喜可贺。</p>

<p>虽然coffeescript号称”It’s just javascript”，但是相比较而言，仍然是添加了很多有趣的特性，大部分特性都是去粗取精，去伪存真，让js玩家喜闻乐见，让旁观路人不明觉厉，但是也随之带来了一些容易忽视的问题，不得不提一下，以免以后碰到后不知所措。</p>

<h1 id="section">重载的符号</h1>

<p>coffeescript重载了javascript中的一些符号和语法结构，最常用的就是<code>==</code>和<code>in</code>。</p>

<h2 id="section-1"><code>==</code></h2>
<p>在js中最为人诟病的就是<code>==</code>符号表意不明，所以很多严谨的js开发者就强迫自己在比较时尽可能的使用<code>===</code>，coffeescript在这一点上做的更绝，你不能使用<code>===</code>，因为它将所有的<code>==</code>都转化成了<code>===</code>。这样对于一些经常需要在两种语言之间切换的码农来说，就是一种考验了。</p>

<h2 id="in"><code>in</code></h2>
<p>在js中，遍历一个数组或hash对象可以使用<code>for(var i in arr)</code>的语言结构，这个时候遍历得到的<code>i</code>其实是数组的下标或者hash的key。coffeescript对<code>in</code>做了重载，使其更符合自然语义，遍历出的是数组的值和hash的value。同时引入<code>of</code>操作符，可以用它来代替原生的<code>in</code>，遍历出数组的下标，如<code>for i of arr</code>。</p>

<h1 id="class">class</h1>

<p>原生的js中是没有class的概念的，但是有经验的码农会用prototype模型来将方法打包成class，以实现代码的重复利用。coffeescript中提供了class关键词，让类的实现和继承更加简单，但是也由此引发一些问题。假如说上面的问题只是人所共知的新特性的话，下面这些就是需要在编码时注意绕行的坑了。</p>

<h2 id="section-2">变量名与类名</h2>

<p>coffeescript对于类型和变量名并没有强制性的格式要求，这在其他语言中也不会出现问题，因为可以通过类型检查来区分两者，但是在coffeescript中，其实类和变量都是通过<code>var</code>关键词生成的变量，而在coffeescript语法中又禁用了<code>var</code>（这样就无法人为的指定变量的作用域，虽然coffeescript会比较智能的分配的作用域）。这在一般情况下也没有问题，直到碰到了下面的代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="k">class</span> <span class="nx">demo</span>
</span><span class="line">  <span class="nv">foo1: </span><span class="o">-&gt;</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">demo</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">@</span>
</span><span class="line">  <span class="nv">foo2: </span><span class="o">-&gt;</span>
</span><span class="line">    <span class="nv">demo = </span><span class="p">[]</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">@</span>
</span><span class="line">
</span><span class="line"><span class="k">new</span> <span class="nx">demo</span><span class="p">().</span><span class="nx">foo1</span><span class="p">().</span><span class="nx">foo2</span><span class="p">().</span><span class="nx">foo1</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="o">==&gt;</span> <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">demo</span><span class="p">]</span>
</span><span class="line"><span class="o">==&gt;</span> <span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>同样的两次调用foo1方法，得到的结果却是不同的，这是因为foo2中的变量与类名冲突了，而且他们处于同一个作用域，这样foo2方法就变成了一个隐藏的地雷，踩到就爆炸。避免这种情况的一种做法是在命名上做区分，比如类命名必须以大字母开头，变量必须以小写字母开头，这样就不会造成这两者的混淆。</p>

<h2 id="section-3">类成员变量</h2>

<p>使用类的一个好处就是可以初始化一些变量，让这个类的所有方法共享，而又不会影响外层作用域。但是需要注意的是，javascript中对于数组和对象是引用传递，在coffeescript类中使用这两种类型作为成员变量时，就会产生一些不曾期待的后果。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="k">class</span> <span class="nx">Demo</span>
</span><span class="line">  <span class="nv">member: </span><span class="p">[]</span>
</span><span class="line">  <span class="nv">setMember: </span><span class="nf">(str) -&gt;</span>
</span><span class="line">    <span class="nx">@member</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nv">a = </span><span class="k">new</span> <span class="nx">Demo</span>
</span><span class="line"><span class="nx">a</span><span class="p">.</span><span class="nx">setMember</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">a</span><span class="p">.</span><span class="nx">member</span>  <span class="c1"># [&#39;a&#39;]</span>
</span><span class="line"><span class="nv">b = </span><span class="k">new</span> <span class="nx">Demo</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">b</span><span class="p">.</span><span class="nx">member</span>  <span class="c1"># [&#39;a&#39;]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当我们使用<code>new</code>关键词的时候，希望得到的是一个干干净净的对象，可是在初始化b的时候我们发现他的成员变量member已经变成了<code>['a']</code>，这是我们不希望看到的。究其原因就是member是一个数组。解决办法是将这些变量的初始化放在coffeescript的构造方法<code>constructor</code>中。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="k">class</span> <span class="nx">Demo</span>
</span><span class="line">  <span class="nv">constructor: </span><span class="o">-&gt;</span>
</span><span class="line">    <span class="vi">@member = </span><span class="p">[]</span>
</span><span class="line">  <span class="nv">setMember: </span><span class="nf">(str) -&gt;</span>
</span><span class="line">    <span class="nx">@member</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nv">a = </span><span class="k">new</span> <span class="nx">Demo</span>
</span><span class="line"><span class="nx">a</span><span class="p">.</span><span class="nx">setMember</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">a</span><span class="p">.</span><span class="nx">member</span>  <span class="c1"># [&#39;a&#39;]</span>
</span><span class="line"><span class="nv">b = </span><span class="k">new</span> <span class="nx">Demo</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">b</span><span class="p">.</span><span class="nx">member</span>  <span class="c1"># []</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>至于为什么这两种写法会产生不一样的效果，可以将coffeescript编译成js来分析。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line">    <span class="p">(</span><span class="nx">use</span> <span class="nx">constructor</span><span class="p">)</span>                                             <span class="o">|</span>    <span class="p">(</span><span class="nx">not</span> <span class="nx">use</span> <span class="nx">constructor</span><span class="p">)</span>
</span><span class="line">    <span class="mi">5</span>   <span class="nx">Demo</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>                                      <span class="o">|</span>    <span class="mi">5</span>   <span class="nx">Demo</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="mi">6</span>     <span class="kd">function</span> <span class="nx">Demo</span><span class="p">()</span> <span class="p">{</span>                                       <span class="o">|</span>    <span class="mi">6</span>     <span class="kd">function</span> <span class="nx">Demo</span><span class="p">()</span> <span class="p">{}</span>
</span><span class="line">    <span class="mi">7</span>       <span class="k">this</span><span class="p">.</span><span class="nx">member</span> <span class="o">=</span> <span class="p">[];</span>                                     <span class="o">|</span>    <span class="mi">7</span>
</span><span class="line">    <span class="mi">8</span>     <span class="p">}</span>                                                       <span class="o">|</span>    <span class="mi">8</span>     <span class="nx">Demo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">member</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class="line">    <span class="mi">9</span>                                                             <span class="o">|</span>    <span class="mi">9</span>
</span><span class="line">   <span class="mi">10</span>     <span class="nx">Demo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setMember</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>              <span class="o">|</span>   <span class="mi">10</span>     <span class="nx">Demo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setMember</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">   <span class="mi">11</span>       <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">member</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>                         <span class="o">|</span>   <span class="mi">11</span>       <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">member</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>
</span><span class="line">   <span class="mi">12</span>     <span class="p">};</span>                                                      <span class="o">|</span>   <span class="mi">12</span>     <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面是vimdiff对比出的两种不同写法，第一种是使用构造方法<code>constructor</code>的，可以看到member作为Demo方法的私有变量，在没有用<code>new</code>实例化的时候，这个<code>member</code>是不存在的，所以每一次实例化我们都能得到一个全新未开箱的<code>member</code>。但是第二种写法则不同，在没有实例化Demo类的时候，<code>member</code>对象就已经存在，所有无论你实例化Demo多少次，调用的都是同一个<code>member</code>，也就造成了在多个Demo实例中共用一个<code>member</code>的结果。</p>

<h1 id="section-4">后记</h1>

<p>假如让我在javascript和coffeescript两种语言之间选择，我仍然倾向于coffeescript，抛开上面的问题不说，它给人编码的时候带来的愉悦是无法衡量的。So just try it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql 中的 date datetime 和 timestamp]]></title>
    <link href="http://jingxin.me/blog/blog/2013/06/05/mysql-zhong-de-date-datetime-he-timestamp/"/>
    <updated>2013-06-05T11:02:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2013/06/05/mysql-zhong-de-date-datetime-he-timestamp</id>
    <content type="html"><![CDATA[<p>mysql中用于表示时间的三种类型date, datetime, timestamp (如果算上int的话，四种) 比较容易混淆，下面就比较一下这三种类型的异同</p>

<h1 id="section">相同点</h1>

<ul>
  <li>都可以用于表示时间</li>
  <li>都呈字符串显示</li>
</ul>

<h1 id="section-1">不同点</h1>

<ul>
  <li>顾名思义，date只表示’YYYY-MM-DD’形式的日期，datetime表示’YYYY-MM-DD HH:mm:ss’形式的日期加时间，timestamp与datetime显示形式一样。</li>
  <li>date和datetime可表示的时间范围为’1000-01-01’到’9999-12-31’，timestamp由于受32位int型的限制，能表示’1970-01-01 00:00:01’到’2038-01-19 03:14:07’的UTC时间。</li>
  <li>mysql在存储timestamp类型时会将时间转为UTC时间，然后读取的时候再恢复成当前时区。
假如你存储了一个timestamp类型的值之后，修改了mysql的时区，当你再读取这个值时就会得到一个错误的时间。而这种情况在date和datetime中不会发生。</li>
  <li>timestamp类型提供了自动更新的功能，你只需要将它的默认值设置为CURRENT_TIMESTAMP。</li>
  <li>除了date是保留到天，datetime和timestamp都保留到秒，而忽略毫秒。</li>
</ul>

<h1 id="section-2">时间格式</h1>

<p>mysql提供了一种比较宽松的时间字符串格式用于增删改查。参考<a href="http://wwp.greenwichmeantime.com/info/iso.htm">iso时间格式</a>，一般习惯于写成’2013-06-05 16:34:18’。但是你也可以简写成’13-6-5’，但是这样容易造成混淆，比如mysql也会把’13:6:5’也当做年月日处理，而当’13:16:5’这种形式，则被mysql认为是不正确的格式，会给出一个警告，然后存入数据库的值是’0000-00-00 00:00:00’。</p>

<p>手册中还特意提到了一种情况，就是当年的值是0~69时，mysql认为是2000~2069，而70~99时则认为是1970~1999。我感觉是一种画蛇添足了。</p>

<p>总之，以不变应万变，使用’YYYY-MM-DD HH:mm:ss’格式总是不会错的。</p>

<p>原文链接：<a href="http://dev.mysql.com/doc/refman/5.1/en/datetime.html">datetime</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascript 中使用 callback 控制流程]]></title>
    <link href="http://jingxin.me/blog/blog/2013/06/05/javascript-zhong-shi-yong-callback-kong-zhi-liu-cheng/"/>
    <updated>2013-06-05T10:49:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2013/06/05/javascript-zhong-shi-yong-callback-kong-zhi-liu-cheng</id>
    <content type="html"><![CDATA[<p>javascript中随处可见的callback对于流程控制来说是一场灾难，缺点显而易见：</p>

<ul>
  <li>没有显式的<code>return</code>，容易产生多余流程，以及由此引发的bug。</li>
  <li>造成代码无限嵌套，难以阅读。</li>
</ul>

<p>下面就来说说怎么<del>解决</del>避免上述的问题。</p>

<p>第一个问题是一个习惯问题，在使用callback的时候往往会让人忘了使用<code>return</code>，这种情况在使用coffee-script的时候尤甚（虽然它在编译成javascript时会自行收集最后的数据作为返回值，但是这个返回值并不一定代表你的初衷）。看看下面的例子。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="nv">a = </span><span class="nf">(err, callback)-&gt;</span>
</span><span class="line">  <span class="nx">callback</span><span class="p">()</span> <span class="k">if</span> <span class="nx">err</span><span class="o">?</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&#39;you will see me&#39;</span>
</span><span class="line">
</span><span class="line"><span class="nv">b = </span><span class="o">-&gt;</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&#39;I am a callback&#39;</span>
</span><span class="line">
</span><span class="line"><span class="nx">a</span><span class="p">(</span><span class="s">&#39;error&#39;</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在这种所谓”error first”的代码风格中，显然我们不希望出错时方法<code>a</code>中的后续代码仍然被执行，但是又不希望用<code>throw</code>来让整个进程挂掉（要死也得优雅的死嘛~），那么上面的代码就会产生bug。</p>

<p>一种解决方案就是老老实实的写<code>if...else...</code>，但是我更倾向于下面的做法：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="nv">a = </span><span class="nf">(err, callback)-&gt;</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">callback</span><span class="p">()</span> <span class="k">if</span> <span class="nx">err</span><span class="o">?</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&#39;you will not see me&#39;</span>
</span><span class="line">
</span><span class="line"><span class="nv">b = </span><span class="o">-&gt;</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&#39;I am a callback&#39;</span>
</span><span class="line">
</span><span class="line"><span class="nx">a</span><span class="p">(</span><span class="s">&#39;error&#39;</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>javascript异步方法中的返回值大多没什么用处，所以这里用<code>return</code>充当一个流程控制的角色，比<code>if...else...</code>更少的代码，但是更加清晰。</p>

<p>第二个问题是娘胎里带来的，很难根除。</p>

<p>一种不错的方法是使用一些流程控制模块来将代码显得更加有条理，比如<a href="https://github.com/caolan/async">async</a>就是一个不错的模块，提供了一系列的接口，包括迭代，循环，和一些条件语句，甚至还包含了一个队列系统。下面的例子可以表名两种写法的优劣</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="c1">#normal</span>
</span><span class="line">
</span><span class="line"><span class="nv">first = </span><span class="nf">(callback)-&gt;</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&#39;I am the first function&#39;</span>
</span><span class="line">  <span class="nx">callback</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="nv">second = </span><span class="nf">(callback)-&gt;</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&#39;I am the second function&#39;</span>
</span><span class="line">  <span class="nx">callback</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="nv">third = </span><span class="nf">()-&gt;</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&#39;I am the third function&#39;</span>
</span><span class="line">
</span><span class="line"><span class="nx">first</span> <span class="o">-&gt;</span>
</span><span class="line">  <span class="nx">second</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="nx">third</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c1"># use async</span>
</span><span class="line">
</span><span class="line"><span class="nv">async = </span><span class="nx">require</span><span class="p">(</span><span class="s">&#39;async&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nx">async</span><span class="p">.</span><span class="nx">waterfall</span> <span class="p">[</span>
</span><span class="line">  <span class="nx">first</span><span class="p">,</span>
</span><span class="line">  <span class="nx">second</span><span class="p">,</span>
</span><span class="line">  <span class="nx">third</span>
</span><span class="line"><span class="p">],</span> <span class="nf">(err)-&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>作为睿智的你，会选择哪一种呢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[nginx] if is evil]]></title>
    <link href="http://jingxin.me/blog/blog/2013/05/15/nginx-if-is-evil/"/>
    <updated>2013-05-15T17:36:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2013/05/15/nginx-if-is-evil</id>
    <content type="html"><![CDATA[<p>最近用nginx配置中使用if遇到一些问题，碰巧想起以前在wiki中看到的这个页面，虽然我的问题可能和wiki中提到的不同，但是if还是能避免就避免吧</p>

<p>下面的内容翻译自<a href="http://wiki.nginx.org/IfIsEvil">IfIsEvil</a></p>

<h1 id="ifisevil-">IfIsEvil (标题就不翻了，保持原汁原味的比较带感)</h1>

<h2 id="section">简介</h2>

<p><a href="http://wiki.nginx.org/NginxHttpRewriteModule#if"><code>if</code></a>指令在使用在<code>location</code>上下文中时有一些问题。有时候它不能如你所愿，而是做一些完全相反的事情。有时候甚至会引发分段错误。通常来说应该尽量避免使用<code>if</code>。</p>

<p>唯一100%可以安全的在<code>location</code>上下文中使用<code>if</code>的场景是：</p>

<ul>
  <li><a href="http://wiki.nginx.org/NginxHttpRewriteModule#return">return</a> …;</li>
  <li><a href="http://wiki.nginx.org/NginxHttpRewriteModule#rewrite">rewrite</a> … last;</li>
</ul>

<p>任何其他情况都可能引发不可预知的行为，包括潜在的分段错误。</p>

<p>需要注意的是<code>if</code>的行为并不是始终如一的。两个相同的请求不会在其中一个上失败而在另一个上成功，通过完善的测试并且对<code>if</code>有深刻理解的话，它可以使用。但是仍然强烈建议使用其他指令来代替。</p>

<p>这些情况下可能你不能轻易的避免使用<code>if</code>，比如说你想测试一个变量，就没有类似的指令可以替代。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="nginx"><span class="line"><span class="k">if</span> <span class="s">(</span><span class="nv">$request_method</span> <span class="p">=</span> <span class="s">POST</span> <span class="s">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kn">return</span> <span class="mi">405</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">if</span> <span class="s">(</span><span class="nv">$args</span> <span class="p">~</span> <span class="sr">post=140)</span><span class="p">{</span>
</span><span class="line">  <span class="kn">rewrite</span> <span class="s">^</span> <span class="s">http://example.com/</span> <span class="s">permanent</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-1">用什么替代</h2>

<p>在符合你的需求前提下，可以用<a href="http://wiki.nginx.org/NginxHttpCoreModule#try_files"><code>try_files</code></a>代替。在其他情况下用”return …“或”rewrite … last”。在有些情况下可以将<code>if</code>移动到server级别（在这里它是安全的，只有其他重写模块指令允许写在它里面）。</p>

<p>例如，下面的的用法在处理请求时可以安全的修改<code>location</code>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="nginx"><span class="line"><span class="k">location</span> <span class="s">/</span> <span class="p">{</span>
</span><span class="line">    <span class="kn">error_page</span> <span class="mi">418</span> <span class="p">=</span> <span class="s">@other</span><span class="p">;</span>
</span><span class="line">    <span class="kn">recursive_error_pages</span> <span class="no">on</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kn">if</span> <span class="s">(</span><span class="nv">$something</span><span class="s">)</span> <span class="p">{</span>
</span><span class="line">        <span class="kn">return</span> <span class="mi">418</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># 一些配置</span>
</span><span class="line">    <span class="kn">...</span>
</span><span class="line"><span class="err">}</span>
</span><span class="line">
</span><span class="line"><span class="s">location</span> <span class="s">@other</span> <span class="p">{</span>
</span><span class="line">    <span class="c1"># 其他配置</span>
</span><span class="line">    <span class="kn">...</span>
</span><span class="line"><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>有些情况下，使用嵌入式脚本模块（<a href="http://wiki.nginx.org/EmbeddedPerlModule">嵌入式perl</a>，或其他<a href="http://wiki.nginx.org/3rdPartyModules">第三方模块</a>）来写这些脚本。</p>

<h2 id="section-2">例子</h2>

<p>下面是一些例子用来解释为什么”if is evil”。不要在家里尝试这些，你被警告过了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
</pre></td><td class="code"><pre><code class="nginx"><span class="line"><span class="c1"># 下面用一些意想不到的bug来说明在location块中if is evil</span>
</span><span class="line"><span class="c1"># 只有第二个header会被输出到响应，这事实上不是bug，它就是这样工作的。</span>
</span><span class="line">
</span><span class="line"><span class="k">location</span> <span class="s">/only-one-if</span> <span class="p">{</span>
</span><span class="line">    <span class="kn">set</span> <span class="nv">$true</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class="line">        <span class="kn">add_header</span> <span class="s">X-First</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class="line">        <span class="kn">add_header</span> <span class="s">X-Second</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kn">return</span> <span class="mi">204</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 请求会被发送到后端但是uri不会改变为&#39;/&#39;，这是if造成的</span>
</span><span class="line">
</span><span class="line"><span class="k">location</span> <span class="s">/proxy-pass-uri</span> <span class="p">{</span>
</span><span class="line">    <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:8080/</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kn">set</span> <span class="nv">$true</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class="line">        <span class="c1"># nothing</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 因为if的问题，try_files不会起作用</span>
</span><span class="line">
</span><span class="line"><span class="k">location</span> <span class="s">/if-try-files</span> <span class="p">{</span>
</span><span class="line">     <span class="kn">try_files</span>  <span class="s">/file</span>  <span class="s">@fallback</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">     <span class="kn">set</span> <span class="nv">$true</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">     <span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class="line">         <span class="c1"># nothing</span>
</span><span class="line">     <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1"># nginx会引发段冲突</span>
</span><span class="line">
</span><span class="line"><span class="k">location</span> <span class="s">/crash</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="kn">set</span> <span class="nv">$true</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class="line">        <span class="c1"># fastcgi_pass here</span>
</span><span class="line">        <span class="kn">fastcgi_pass</span>  <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">9000</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class="line">        <span class="c1"># no handler here</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 捕获的别名在if创造的嵌套location中不会被正确的继承</span>
</span><span class="line">
</span><span class="line"><span class="k">location</span> <span class="p">~</span><span class="sr">*</span> <span class="s">^/if-and-alias/(?&lt;file&gt;.*)</span> <span class="p">{</span>
</span><span class="line">    <span class="kn">alias</span> <span class="s">/tmp/</span><span class="nv">$file</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kn">set</span> <span class="nv">$true</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kn">if</span> <span class="s">(</span><span class="nv">$true</span><span class="s">)</span> <span class="p">{</span>
</span><span class="line">        <span class="c1"># nothing</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>假如你发现了一个没有在上面列出来的例子 - 请将它报告给<a href="http://wiki.nginx.org/User:MaximDounin">MaximDounin</a>。</p>

<h2 id="section-3">为什么这些问题存在但没有被修复</h2>

<p><code>if</code>指令是重写模块的一部分而且是必须的。从另一方面说，nginx的配置通常来说是说明式的。有些用户希望尝试在<code>if</code>指令中使用非重写的指令，这造成了这种处境。它大部分时间是有效的，但是。。。瞧上面。</p>

<p>看起来唯一正确的方式就是完全避免在<code>if</code>中使用非重写指令。这会破坏很多已存在的配置，所以这没有被实施。</p>

<h2 id="if">假如你还是想用<code>if</code></h2>

<p>假如你读了上面的内容仍然想用<code>if</code>：</p>

<ul>
  <li>请确保你知道它是怎么工作的。一些基础知识可以<a href="http://agentzh.blogspot.com/2011/03/how-nginx-location-if-works.html">看这里</a></li>
  <li>做完整的测试</li>
</ul>

<p>你被警告过了。</p>

<p><a href="http://wiki.nginx.org/IfIsEvil">原文链接</a></p>
]]></content>
  </entry>
  
</feed>
