<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[CodeBean]]></title>
  <link href="http://jingxin.me/blog/atom.xml" rel="self"/>
  <link href="http://jingxin.me/blog/"/>
  <updated>2016-11-15T18:01:22+08:00</updated>
  <id>http://jingxin.me/blog/</id>
  <author>
    <name><![CDATA[Xu Jingxin]]></name>
    <email><![CDATA[sailxjx@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用 GitLab + Docker 搭建持续交付系统]]></title>
    <link href="http://jingxin.me/blog/blog/2016/10/28/shi-yong-gitlab-da-jian-chi-xu-jiao-fu-xi-tong/"/>
    <updated>2016-10-28T16:01:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2016/10/28/shi-yong-gitlab-da-jian-chi-xu-jiao-fu-xi-tong</id>
    <content type="html"><![CDATA[<h1 id="section">环境要求</h1>

<ul>
  <li>GitLab CE &gt; 8.0</li>
  <li>Docker &gt; 1.0</li>
</ul>

<h1 id="runner">步骤一，开启 Runner</h1>

<p>Runner 是 GitLab CI 的任务执行单位，GitLab 以服务发现的方式来将 Runner 分布在不同的主机上。根据<a href="https://docs.gitlab.com/runner/install/">官方文档的说明</a>，你可以选择任何系统的主机来部署 Runner。这里我为了图方便就直接采用 Debian 源来安装了。</p>

<p>由于我们需要让 Runner 在 Docker 中运行，所有首先安装 Docker</p>

<p><code>curl -sSL https://get.docker.com/ | sh</code></p>

<p>然后安装 Runner</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.deb.sh | sudo bash
</span><span class="line">sudo apt-get install gitlab-ci-multi-runner</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后我们需要启动 Runner 并提交它的服务信息给自己的 GitLab 站点</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo gitlab-ci-multi-runner register
</span><span class="line">
</span><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com ) （如果是私有部署的 GitLab，填写自己的域名地址）
</span><span class="line">https://gitlab.com
</span><span class="line">Please enter the gitlab-ci token for this runner （在 http://{your.gitlab.domain}/admin/runners 下可以找到共享 token，这样注册的 Runner 可以给所有项目共享，你也可以在项目配置中找个每个项目专属的 token，这样注册的 Runner 就只能由这个项目独享了）
</span><span class="line">xxx
</span><span class="line">Please enter the gitlab-ci description for this runner （描述）
</span><span class="line">my-runner
</span><span class="line">INFO[0034] fcf5c619 Registering runner... succeeded
</span><span class="line">Please enter the executor: shell, docker, docker-ssh, ssh? （我们用 docker）
</span><span class="line">docker
</span><span class="line">Please enter the Docker image (eg. ruby:2.1): （Docker 镜像，也是该 Runner 的运行环境，如果你有一些特殊的需求，例如添加 ssh 访问私钥，配置预安装软件等，可以自己做一个镜像提交到 docker hub 上面）
</span><span class="line">ruby:2.1
</span><span class="line">INFO[0037] Runner registered successfully. Feel free to start it, but if it's
</span><span class="line">running already the config should be automatically reloaded!</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="runner-1">步骤二，分配 Runner</h1>

<p>然后下一步我们就可以在 <code>http://{your.gitlab.domain}/admin/runners</code> 下找到刚刚注册的 Runner 了，这时候 Runner 处于共享状态，我们可以通过编辑来指派 Runner 的特定项目，或者给 Runner 加标签来方便以后更灵活的分配这些 Runner。</p>

<p>然后再看一下项目的配置，将 Build 选项开启，这样每次提交时 GitLab 机会自动调用 Runner 来执行任务了。</p>

<h1 id="gitlab-ciyml">步骤三，编写 .gitlab-ci.yml</h1>

<p><a href="https://docs.gitlab.com/ce/ci/yaml/README.html">.gitlab-ci.yml</a> 是 GitLab 提供的一种配置文件，对于熟悉 travis 这类 SaaS 型持续集成服务的开发者来说这种配置是相当亲切的了，而且文件跟着代码库，编辑起来非常方便。</p>

<p>下面就这个简单的配置文件说明一下各部分的作用</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class=""><span class="line">before_script:  # 在所有任务之前执行下面的脚本
</span><span class="line">  - node -v &amp;&amp; npm -v
</span><span class="line">
</span><span class="line">services:  # 使用 docker 时，runner 会自动下载这些镜像并以 link 的方式将它们连接进来
</span><span class="line">  - elasticsearch:1.6.2
</span><span class="line">  - mongo:3.4
</span><span class="line">  - redis
</span><span class="line">
</span><span class="line">stages:  # 指定任务阶段，在一个阶段中可以配置多个任务，各阶段按顺序依次执行
</span><span class="line">  - test
</span><span class="line">  - deploy
</span><span class="line">
</span><span class="line">cache:  # 在各任务间缓存文件
</span><span class="line">  paths:
</span><span class="line">  - node_modules/
</span><span class="line">
</span><span class="line"># 一下非关键词开头的配置就代表各个任务了
</span><span class="line">test:
</span><span class="line">  stage: test  # 任务可以通过阶段来决定执行顺序
</span><span class="line">  script:      # 任务的执行脚本
</span><span class="line">    - npm prune &amp;&amp; npm install &amp;&amp; npm run test-gitlab
</span><span class="line">  tags:        # 通过 tag 可以指定由相应的 runner 来执行这个任务
</span><span class="line">    - docker
</span><span class="line">
</span><span class="line"># 由于是为了搭建持续交付系统，所以我配置了两个任务阶段，测试阶段结束后进入到发布阶段。
</span><span class="line"># 因各人发布环境的不同可以选择不同的命令发布代码，填写在 script 中即可
</span><span class="line">deploy:
</span><span class="line">  stage: deploy
</span><span class="line">  script:  
</span><span class="line">    - env &amp;&amp; pwd &amp;&amp; ls -a
</span><span class="line">  tags:
</span><span class="line">    - docker</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样，我们就实现了在每次代码提交时自动测试，通过后将代码发布到服务器环境的目的。</p>

<h1 id="section-1">遇到的问题</h1>

<ol>
  <li>使用 Docker runner 时，<code>git clone</code> 或 <code>npm install</code> 有时候会遇到「检测到未知的 host key」提示，而中断 build 进程</li>
</ol>

<p>这个问题有两种方法可以解决，一种是用 <code>ssh -o "StrictHostKeyChecking no" user@host</code> 关闭指定用户和域名的检测。另一种是 <code>ssh-keyscan host &gt;&gt; /root/.ssh/known_hosts</code> 将检测结果写入。上面在 Dockerfile 中用了第二种方式：</p>

<p><code>RUN ssh-keyscan github.com &gt;&gt; /root/.ssh/known_hosts</code></p>

<ol>
  <li>Container 遇到 <code>Couldn't resolve host</code> 问题</li>
</ol>

<p>这个问题我没有找到真正的解决办法，因为它是个偶发的问题，可能你什么都没干，过段时间再试试它就自己恢复了，可能与 Host 主机的 DNS 设置有关。我的解决方案之一是删除所有由 GitLab 创建的运行状态或等待状态的 Container，再重新开始任务。这里提供一个便捷的命令来删除所有由 GitLab 创建的 Container</p>

<p><code>docker ps -a | grep gitlab | awk '{print $1}' | xargs docker rm</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[假期学习计划]]></title>
    <link href="http://jingxin.me/blog/blog/2016/09/26/jia-qi-xue-xi-ji-hua/"/>
    <updated>2016-09-26T09:27:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2016/09/26/jia-qi-xue-xi-ji-hua</id>
    <content type="html"><![CDATA[<p>看到这个标题，有人要以为是一篇计划清单了，然而，我恰恰是反对罗列清单的，尤其是学习。</p>

<p>不管在哪个时期，总有人感叹，没有时间学习，看着一山比一山高，人家学英语，学编程，不亦乐乎，心里却早给自己找好了理由，无外乎工作忙啦，家里事多啦，环境不利啦。好不容易到了一个假期，可不能浑浑噩噩荒废咯，想起买了几年包装都没拆的书，终于有重见天日的一天了。</p>

<p>实际到了假期，大抵就成了两类</p>

<ol>
  <li>没计划，没行动，随随便便就过去了</li>
  <li>有计划，没行动，感叹理想终究输给了现实</li>
</ol>

<p>很明显，还有两种情况怎么丢了呢。因为我觉得「没计划，有行动」实属天赐良缘，可遇不可求，概率太小，不足以作为讨论的条件。而「有计划，有行动」，这样的人，平日里一定是十分自律的，断没有到了假期突然努力充电的理由。这种人也许就是平日里大家所说的「学霸」，可闻而不可见了。</p>

<p>那么剩下的两类情况，就构成了我看法的依据了，假期学习计划，是多么的不靠谱。</p>

<p>假期是什么，于国，是刺激消费，拉动内需，于己，是调整节奏，放松身心。任何人都明白张弛有道的道理。在假期一开始就给自己列了一个必学清单，平白给日子加了一层压力，结果心心念念着这些事，学没学好，玩没玩好，又留下了一堆的惋惜。</p>

<p>学习是个循序渐进的过程，仅靠假期的那点时间，就算天天投入，收效也高不到哪里去。不如在平日里，养成一些小习惯，例如每天留一个小时读读写写，一年就是 365 小时，相当于一个半月的假期了。</p>

<p>在 APP 当道的时代，也可以利用一些小工具来帮助自己养成习惯，在这里我推荐一下<a href="https://itunes.apple.com/en/app/streaks/id963034692?mt=8">Streaks</a>，满足了我的所有需求，最重要的一点是，没有社交。</p>

<p>最后，我的假期学习安排：无</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎样和开发者交流]]></title>
    <link href="http://jingxin.me/blog/blog/2016/09/19/zen-yang-he-kai-fa-zhe-jiao-liu/"/>
    <updated>2016-09-19T21:14:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2016/09/19/zen-yang-he-kai-fa-zhe-jiao-liu</id>
    <content type="html"><![CDATA[<p>项目做多了，总会碰到很多争论，特别是在需求交接的时候。今天说一说如何与开发者交流的话题。</p>

<h1 id="section">通俗易懂</h1>

<p>人懂得多了，难免会有点掉书袋，一方面是习惯使然，另一方面也有卖弄的嫌疑。譬如海龟喜欢聊天中蹦几个外语单词，产品会找来一堆方法论和缩写，程序员也喜欢说术语。</p>

<p>当面交流不像书面，阅读者遇到不懂的时候可以随时 Google。遇到有人听不懂的时候，就需要停下来解释这些词是什么意思，打断了本来需要表达的内容。大多数时候，没听懂的会装作听懂，然后在心里骂了千百遍。</p>

<p>通俗易懂是基本原则，把意思表达的小孩子也能听懂，没有人会觉得啰嗦，反而会避免不少误解。</p>

<p>可能的话，边画边说。</p>

<h1 id="section-1">逻辑清晰</h1>

<p>开发者对逻辑的敏感程度非常的高，如果有自相矛盾的地方，可不是用一两句话就可以糊弄过去的，一定要注意逻辑清晰。</p>

<p>开会中我听到最多的一句话就是，「这里走不通啊」。开发者的思维就像水流，总是尽可能的流向每条支流，如果哪一条无路可达，就会揪着不放。</p>

<p>所以，请一定将逻辑思考清楚，为了达到目标，少绕弯子，找到捷径是最好的方式。如果一个问题自己都没想清楚，就不要忙着公开讨论。</p>

<h1 id="coding">学会 Coding</h1>

<p>如今的代码世界已经不是一群胡子拉碴头发很长的大叔们的专利了，在未来，编写代码可能会变得和使用锤子一样平常，我很好奇有人会因为太难或没有必要而拒绝使用锤子。</p>

<p>开发的学习成本已经降得非常低，有很多不错的网站和文档可以查询，如果你想做互联网应用开发，入门 JS 也不过就是一周的事情。</p>

<p>学会 Coding 带来的好处是显而易见的，忽略语法的因素，任何语言都是单纯的逻辑表达，如果你能通过代码将思考过程表达出来，胜过写上一千页的 PRD。同时，和开发者找到了一门共同语言，就不会让他们将你拒之门外。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[纯粹的 API]]></title>
    <link href="http://jingxin.me/blog/blog/2016/09/06/chun-cui-de-api/"/>
    <updated>2016-09-06T09:38:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2016/09/06/chun-cui-de-api</id>
    <content type="html"><![CDATA[<p>前不久有同事和我谈论起现下 API 维护的困难，抱怨诸多，总结起来大概就是两点，一是需求考虑不完善，很多地方需要在开发中补充条件，二是向前兼容困难，很多历史遗留无法修改，代码臃肿。</p>

<p>在我看来，这些问题的产生，都只有一个原因，就是现有 API 的设计和开发理念，不够「纯粹」。API 的设计就好比凿山开路，必须沿着最短的途径到达目标。有些人为了「Flexible」，喜欢在开发中「留一手」，假象出很多未来可能出现的情况，用额外的代码来做兼容。例如设计一套简单的权限系统，本来简单的 ACL 就能实现，非要觉得以后可能会增加更多的管理员类型，而去赋予各种角色，关系，权限表，这是需求上的多余。再比如设计一套 CURD API，在刚起步的时候就考虑缓存，异步，Job 等等，这是架构上的多余。</p>

<p>如今的 Web 设计趋势是去芜存菁，去掉繁复的视觉效果，注重排版，留白，突出内容，因为 Web 最重要的功能还是让用户获取信息。API 设计有相通之处，一个「纯粹」的 API，应始终保持单纯与直观，一个叫「Create user」的 API，目的就只有一个，创建这条用户信息。至于是否要给这个人发邮件，要帮他初始化哪些业务资料，这些统统都拆分到 Service 中去做，如果需求中没提到这些，那么这个 Service 更没必要存在。这样简单设计的代码将具有更长的生命力，在历经无数次需求修改之后，这些代码能像水中冲刷的基石一样，屹立不倒。</p>

<p>现实已经如此复杂，API 还是让它单纯一些吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[工具软件的未来]]></title>
    <link href="http://jingxin.me/blog/blog/2016/08/08/gong-ju-ruan-jian-de-wei-lai/"/>
    <updated>2016-08-08T16:25:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2016/08/08/gong-ju-ruan-jian-de-wei-lai</id>
    <content type="html"><![CDATA[<p>上一篇<a href="http://jingxin.me/blog/blog/2016/08/08/gong-ju-ruan-jian-de-kun-jing/" title="工具软件的困境">工具软件的困境</a>分析了我对工具软件现状的看法，归纳一下就是两个问题：1. 使用体验难创新。2. 用户需求难覆盖。下面说一下我的解法。</p>

<h1 id="section">新的平台</h1>

<p>颠覆性的创新更容易出现在新的平台上，移动设备的普及让人们习惯了手势操作。但在今天，移动设备上做交互创新已然不是一个明智的选择，而新的平台其实就在我们身边。</p>

<p>一个叫 Pokemon GO 的游戏火遍了全世界，其最大的特点就是利用了增强现实技术，让人们在现实世界中寻找游戏的乐趣。</p>

<p>增强现实和虚拟现实之所以有吸引力，是因为他能给人带来新奇的同时又不感到陌生，天然的容易上手。工具软件在这个领域大有作为，例如，如今许多人喜欢用电子名片，或者把自己的信息发布在互联网上，如果软件能通过摄像头识别出对方并且显示信息的话，对于我这种永远记不住陌生人名字的人来说，实在算是一种福音。同样适用这种技术还有地图，视频，社交，以及很多意想不到的地方，充斥着生活的方方面面。</p>

<p>如果觉得新的平台实验性太强，那么在旧的平台上，也可以用新的方式来创新。在我看来，语音在移动平台上还没有完全发挥出应有的作用，目前的技术对于语音识别的准确率已经完全没有问题，难点在于对语义的分析和揣测用户的目的。Siri 大家都觉得好玩，但是不好用，问题就在于人们不知道能用它干什么，Siri 也「听」不懂你想干什么。而这在目标比较单一的工具软件中就能得到很好的应用。如果有一款应用是用来推荐餐馆的，那么我更乐于通过自然语言的方式让他为我推荐附近好吃的餐馆，而不是每次想好了关键词再写在输入框里。</p>

<h1 id="section-1">海纳百川</h1>

<p>工具软件需要应对用户提出的各种需求，这些需求零散，独立，无法整合在一个应用中，然而对于留住用户又必不可少。传统软件的做法是自己开发，然后发行一款配置无限繁琐的软件，或者针对大客户做定制化开发。这种做法在工具匮乏的时代可以在市场中站稳脚跟，如今成本这么高的做法是走不通了。</p>

<p>于是就出现了开放 API，各个软件将自己的 API 开放出来，供其他软件接入。这在工具类软件中尤其鲜明。一款好用的软件，只需要做好自己的核心功能，并接入其他优秀软件。</p>

<p>仔细想一想，这其实就是各种软件在做的「应用平台」。但是我不愿意将它称作「平台」，而更乐意称作「协议」。「平台」意味着大家只能加入到我的软件生态中来，「协议」则表明了一种开放的态度，大家可以自由的选择与我的协议对接，或选择其他应用的协议，甚至利用我的协议，和其他第三方应用对接。</p>

<h1 id="section-2">服务至上</h1>

<p>软件作为一种看不见摸不着的产品，天然的隔绝了用户和开发者，用户看不到开发软件背后的付出，于是很容易低估软件的成本。现实的软件发行方式也增强了用户的这种观念，大部分软件都以免费的方式发行，软件变得和说明书一样，成为了「载体」的附庸。</p>

<p>而在其他领域，用户的付费意愿则比软件高得多，用户拿到一台相机，很容易通过做工和质感估算出这台相机的成本，而其附带的软件则看起来一文不值。甚至改变了世界的 iPhone，大部分用户还是直接将它和手里的手机划上等号，而很少有人去了解 iOS 的成本。</p>

<p>这种观念根深蒂固，那么工具软件该从另一个角度出发，找到自己的「载体」。如果工具软件没有对应的硬件，可以将与软件配套的服务作为「载体」来出售。例如给用户的咨询，培训，发展线下的社区，一方面可以给开发者带来直接的收益，同时也大大提高了用户粘性。一款软件能否和竞争者拉开差距，更多的是看与软件配套的服务，我想这也是「软件即服务」的定义。</p>

<h1 id="section-3">写在最后</h1>

<p>在软件这个行业，每天都能看到很多很棒的点子，希望这些点子能尽早变成现实，而不是像我这样的拖延症患者，挖了<a href="https://github.com/sailxjx/Cycle" title="Cycle">一堆</a>的<a href="https://github.com/sailxjx/storyship" title="Storyship">坑</a>，离完成却遥遥无期。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[工具软件的困境]]></title>
    <link href="http://jingxin.me/blog/blog/2016/08/08/gong-ju-ruan-jian-de-kun-jing/"/>
    <updated>2016-08-08T14:07:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2016/08/08/gong-ju-ruan-jian-de-kun-jing</id>
    <content type="html"><![CDATA[<p>这个话题改成「软件的困境」，我觉得也没什么不妥，但是船小好调头，从一个领域说起，总能更有说服力。平时写的最多，用的最多的就是工具软件，现在来分析一下工具软件的困境。</p>

<p>工欲善其事，必先利其器。随着互联网的普及，软件从一个专业领域的工具，飞入寻常百姓家，成为了人们生活的一部分。软件界的摩尔定律依然有效，曾经动辄上百万的解决方案，如今也能找到免费的替代品。而这些成熟的软件背后，是几百人在键盘面前的敲敲打打，软件的人力成本节节攀升，盈利就成了一个很大的问题。</p>

<h1 id="section">匮乏的盈利模式</h1>

<p>软件的收费模式基本可分两类，一类贩售软件本身的价值，给软件一个定价，由人去下载，例如 App store 上的一票收费软件。另一类是贩售软件附带的服务，例如依靠购买会员，道具等虚拟物品盈利的网站。</p>

<p>上面这两类盈利方式都有局限性，第一类本身造就了一个很高的门槛，大部分人不肯为素未谋面的软件买单，而且这类软件如果能在自己的行业内做到占有量第一，也就意味着触到了天花板，难以发展新用户，老用户也不再买单，这时的出路就只有推出新产品或进行大版本升级，接下来造就的产品，要么华而不实，要么臃肿不堪。</p>

<p>第二类收费模式通常会带一个免费版，满足 80% 用户的需求，然后让另外 20% 用户为软件买单，养活所有的用户和开发者自己。这就很容易造成需求的失衡，为了追求「转化率」，开发者肯定优先考虑付费端的需求，对于大部分用户需要的功能则被「列入计划」迟迟得不到开发。开发者大部分时间在做的都是给需求排优先级，而忘了考虑软件本身的定位。这也是为什么很多软件刚面世时非常惊艳，迭代了几个版本之后却变得平庸。</p>

<h1 id="section-1">固化的使用体验</h1>

<p>工具软件如何从一并同僚中脱颖而出，使用体验起到了相当重要的作用。软件的发展过程就是一个去繁化简的过程，早期糟糕的软件培养了糟糕的用户习惯，例如常见的顶部菜单就是一个错误的存在，懒惰的开发者将所有的功能藏在菜单里面，让用户通过反复点击去寻找。如果当初的工具设计者能够合理的布置空间，用户使用软件的效率必能得到一个极大的提升。因为用户已经习惯了这种操作，往后的所有桌面端软件都沿袭了顶部菜单的模式，因为改变习惯需要冒较大的风险，体验好坏很难说的清楚，于是用户继续忍耐着打开一个文件需要点击 4 次的操作。</p>

<p>好在如今的移动端应用已经很少用到菜单模式，工具软件很容易在一个新的平台上面找到创新点，例如 Clear 就靠着方便的手势操作获得了大批拥趸。而到了今天，经过了大量 App 的锻炼之后，用户在移动端的使用习惯也已经固化，新的软件将很难再依赖使用体验来吸引用户。</p>

<h1 id="section-2">难以满足的需求</h1>

<p>关于工具软件应该是大而全还是专注于一个功能，一直难下定论。有意思的是，这个问题在国内外呈现出完全不同的两派做法，在国外我们发现了很多小而美的工具软件，例如前面提到的 Clear, sunrise, paper 等，在国内知名的软件都是功能完备的，例如做支付的微信和做社交的支付宝，似乎每家都觉得能把自家的软件做成操作系统。</p>

<p>一个软件获得了一批种子用户，证明了这个软件的价值，也带来了各种稀奇古怪的需求。工具应用本身的目标是提高用户效率，而如果每个软件只能满足一个需求，用户就不得不在一大堆的软件中频繁切换来满足日常所需，这本身就非常低效。所以我认为工具软件迭代了几个周期之后，免不了加入很多不曾计划的功能，以至于同质化越来越重，竞争对手越来越多，想要脱颖而出，光靠软件自身的素质是非常难的了。</p>

<h1 id="section-3">写在最后</h1>

<p>如今想要盈利，开发工具软件实在不能算是一门好生意。固化的使用习惯，难以满足的个性化需求，都会让开发者入不敷出。然而市场依然在，需求依然强烈，仔细思考一下<a href="http://jingxin.me/blog/blog/2016/08/08/gong-ju-ruan-jian-de-wei-lai/" title="工具软件的未来">工具软件的未来</a>，成为这个领域的黑马也未可知。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[生活的品质]]></title>
    <link href="http://jingxin.me/blog/blog/2016/07/14/sheng-huo-de-pin-zhi/"/>
    <updated>2016-07-14T11:13:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2016/07/14/sheng-huo-de-pin-zhi</id>
    <content type="html"><![CDATA[<p>说起程序员，在众人眼中可能是最不注重生活品质的群体了，每天穿着印有各种 Logo 的T恤，头发乱糟糟，工作在显示器的包围中，这大概就是对这些人的固有印象了。</p>

<p>现实中，其实每个人心里都有着自己对生活品质的追求。我认识的很多程序员，在工作之余也有着丰富的生活，有的喜欢健身，有的喜欢远足，还有的可能觉得吃烧烤就是最大的乐趣。懂得生活的人，在工作中表现也不会差，因为这些人有着积极乐观的态度，知道去追求更好的生活，也知道工作是提高生活品质的基础。</p>

<p>下面来说说我对于生活品质的理解。</p>

<h2 id="section">舒适</h2>

<p>平时所用未必需要美酒佳肴香车豪宅，舒适是基本的标准。</p>

<p>前不久我在某粗粮品牌电商上买了几条毛巾，号称使用了更好的原料，达到了 A 类的标准。到手之后感觉果然比以前用的好很多，柔软度和吸水性都很好，价格也不贵。以小见大，在购买每件日常用品时，多考虑一下舒适性，比以前的标准提高一点点，那么整个生活品质就有了极大的提升。</p>

<h2 id="section-1">便捷</h2>

<p>学生时代没有钱，但有时间去折腾。所以需要用一些软件或玩游戏的时候，就会想方设法的去找破解，实在找不到破解时，宁可使用质量较差的免费替代品，也不愿意出钱去购买。我想大多数 80 后都有同样的体验，也逐渐形成了国内软件必须免费才有人用的大环境。</p>

<p>然而不同的时代有不同的消费观，如今软件影响到生活的方方面面，如果一款软件将你每天的计划事项安排的井井有条，节省了大量的时间。如果一款游戏让你爱不释手，陪你度过了大量无聊的时光。那么就它们带来的价值而言，价格就显得微不足道了。</p>

<p>与其花大量的时间在寻找破解上面，不如花少量的钱，获得更好，更早的体验。在虚拟世界如此，现实生活中亦是。</p>

<h2 id="section-2">兴趣</h2>

<p>就如上面所说，有人喜欢运动，有人喜欢宅，这与性格相关。每天能有几个小时自由的时间，做着自己爱做的事，就是最大的乐趣了。</p>

<p>小的时候，为了融入集体，发展自己兴趣的时候往往也要受别人看法的影响。就拿足球这项运动来说，很多人为其痴迷，也有很多人认为这是一项无聊的运动，但是一旦到了某些大赛的时候，足球就变成了每个人的话题，仿佛所有人都成了球迷。其实大可不必如此，既然是兴趣，就得由自己做主。我喜欢 RTS，喜欢看书，喜欢台球，有段时间还迷过 F1，即使同好的人再少，也能乐在其中。</p>

<p>生活的品质需要以经济作为基础，但是品质的提升却发自内心。如果没有了对美好生活的期待和追求，那么即使腰缠万贯，不过就是金钱的奴隶，成不了生活的主人。</p>

<p>好好享受每一天吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[存在的意义]]></title>
    <link href="http://jingxin.me/blog/blog/2016/07/04/cun-zai-de-yi-yi/"/>
    <updated>2016-07-04T16:14:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2016/07/04/cun-zai-de-yi-yi</id>
    <content type="html"><![CDATA[<p>外公走的时候 79 岁，从我上次见到外公已经有一段时间了，对于亲人的突然离去，本以为会是一件很难接受的事情，然而真的到了那时，内心却是非常的平静，仿佛一瞬间参透了生命存在的意义。</p>

<p>人这一生，大部分时间都是为别人活着。在社交中在意别人的眼光，在家庭中考虑家人的感受，很少有完全出于自主意愿的生活。这在心理学上也早已有了解释，只有在婴幼儿时期人们才会完全由「本我」驱使，而一旦进入了社会这个大熔炉，大部分的日常行为就由「超我」来驱使。</p>

<p>对于长生不老，自古以来就是人们的终极追求之一，而往常所说的长生基本等同于「本我」的长生。现代医学的发展确实也让人类的平均寿命在不断的提高，但是人力终须遵循自然的规则，生老病死也是人生完整的一个组成部分。与其期待形体的长生不老，不如常常思考怎样让自己的「超我 - 精神」绵延不绝。</p>

<p>纵观历史，有很多人确实做到了死而不朽，例如到现在还在折磨着广大考生的牛顿高斯等辈，让江山如此多娇的各代能人志士们。他们的思想和事迹传颂了千百年，而且想必还能传递到更久的将来。可以说他们的「超我」已经达到了永恒。</p>

<p>然而毕竟不是每个人都能达到这样的高度，即使有人有这样的天赋，也未必时运能济。所以我觉得只要让自己的行为能真实的符合「自我」的意愿，又能实现「超我」做出一点点努力，那么已经算是实现了自己的价值。</p>

<p>在生活和工作中，如果能保持高产，让家人和朋友感受到有你存在的快乐，自己也能在日常中发现自己的价值，那么这一生就是有意义的。</p>

<p>祝外公在天堂安息。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[竞技的乐趣]]></title>
    <link href="http://jingxin.me/blog/blog/2016/06/16/jing-ji-de-le-qu/"/>
    <updated>2016-06-16T13:51:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2016/06/16/jing-ji-de-le-qu</id>
    <content type="html"><![CDATA[<p>这本是在 <a href="http://jingxin.me/blog/blog/2012/07/29/jing-ji-de-le-qu/">2012 年的时候准备写的一篇文章</a>，当时写了个标题就没下文了，现在想来，应该是忙着「竞技」去了，哪有这功夫来写文章嘛。</p>

<p>时过三年，最近开始常玩星际2，于是又想起这个主题，终于可以补全这篇文章。</p>

<p><a href="https://www.zhihu.com/question/39789792">打星际你快乐吗</a>，这是知乎上面的一个提问，回答的都是星际爱好者，答案自然是一边倒。如果是半年前，我的答案是模棱两可，因为水平实在是菜，被虐是常有的事情，自然也就很难体会到游戏的快乐。好在一段之后之后，总算入了门，也能和同一分组的人打的有来有回，并且开始思考战术，运营，操作，这个时候仿佛才真正感受到这个游戏的魅力，这种快乐不来自于游戏本身，来自和你对战的人，而最终则是来自自己的满足。</p>

<p>RTS 中你的对手是电脑和人，是两种截然不同的体验，电脑循规蹈矩，打的多了，你就会对什么时候会发生什么事情一清二楚，好比是参与考试，努力总能获得回报。而一旦对手换成了真人，变数就增加了很多，总能在一些比赛中出现意想不到的战术，也就是俗称的大招，将每场游戏的体验都变得不同，就好比是工作中遇到难解的问题，很多无法从书中找到答案，以往的知识解决不了，就要强迫你去思考和尝试。</p>

<p>星际2不是一个适合放松休闲的游戏，一场十分钟的游戏就包含了早中晚三个阶段，必须时时刻刻洞察局势调整战略。当战局陷入僵局时，又需要足够的耐心来等待胜利的时机，有无数次我的对手因为耐不住性子强冲而全军覆没，反之亦是如此。我本是一个不服输的人，然而在游戏过程中，却是胜负各半才能让人真正感受到竞技的挑战和乐趣。现在的游戏阶段中，我学到了耐心，尝到了胜利的喜悦，希望以后还能从游戏中得到更多。</p>

<p>只要比赛还没结束，永远不知道下一秒将发生什么。</p>

<p>最后推荐一个歌单，在上班时听着<a href="http://music.163.com/#/playlist?id=125968298">这张专辑</a>写代码，感觉真是爽到飞起。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OKR 解读]]></title>
    <link href="http://jingxin.me/blog/blog/2016/04/11/okr-jie-du/"/>
    <updated>2016-04-11T18:10:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2016/04/11/okr-jie-du</id>
    <content type="html"><![CDATA[<h1 id="okr">什么是 OKR</h1>

<p>关于 OKR（Objectives and Key Results）是什么，网上的资料实在是太多了，为了节省时间，在这里简短的概括一下：</p>

<ol>
  <li>目标（Objectives），为未来的某个节点（通常为三个月）设定几个目标，这些目标需要可量化，有相关性，并且有一定的挑战性</li>
  <li>关键成果（Key Results），为了达成和量化这些目标，为每个目标设置一些关键成果，例如为了完成早晨起床出门的目标，需要完成穿衣，刷牙，洗脸等关键成果。</li>
</ol>

<p>从我的了解来看，一个好的 OKR 必须具备的三个特征：周期，创新，关联性</p>

<h2 id="section">周期</h2>

<p>周期是指目标需要在有效的时间内达成，之所以把时间放在第一位考虑，因为任何人面对一个没有明确时间的计划是没有执行力可言的。</p>

<p>一个长久的愿景，适合作为理想，而目标则要求我们只争朝夕。</p>

<p>明确的结束时间可以很好的帮助你回顾和开启下一轮任务，形成一个良好的任务周期能让你的工作习惯更为健康。</p>

<h2 id="section-1">创新</h2>

<p>好的目标应该能激发你的动力，所以必须有一定的挑战性，而创新则能鼓励你走出自己的舒适区，去挑战陌生的领域，激发自己的潜能。</p>

<h2 id="section-2">关联性</h2>

<p>目标要有关联性，团队中各人的目标都是可见的，在制定目标时，不妨与其他人交流一下，看看自己的目标是否与团队的战略方向一致，是否目标与他人有重合的地方。如果自己的目标与任何人都无法重合，则很有可能是自己跑偏了方向。</p>

<p>一般而言，上级的 Key Results 很可能会与下属的 Objectives 一致，由此在公司中可以形成一个瀑布式的目标关系链，源头就是公司的总体战略。</p>

<h1 id="okr-upon-smart">OKR upon SMART</h1>

<p>SMART 是八十年代提出的一种任务制定方式，OKR 也是源自于此。它要求制定任务时参考下面五个指标：</p>

<ol>
  <li>明确性（Specific）</li>
  <li>可量化（Measurable）</li>
  <li>可实现性（Attainable）</li>
  <li>相关性（Relevant）</li>
  <li>有时间限制（Time-bound）</li>
</ol>

<p>可以看到 OKR 对于目标的大部分要求都与上述条件契合，但是弱化了”可实现性”，提升了”挑战性”的比重，以激发成员对任务目标的追求。因为 OKR 强调与绩效考核分离，成员在制定更有挑战性的目标时也会少一些顾忌。</p>

<blockquote>
  <p>然而我却觉得绩效仍然是不可缺少的一环，如果 OKR 不能作为绩效的评估依据，则需要寻找其他的方式来评估绩效，例如 Peer Review 或 Focal Review。但是这又增加了成员的负担和时间成本。而且，无关绩效的目标，实现的动力也将大打折扣了。</p>
</blockquote>

<h1 id="okr-vs-kpi">OKR vs KPI</h1>

<p>OKR 和 KPI 最大的区别就在于 OKR 分离了绩效考核的部分，而 KPI 则使用更突出的量化标准将目标与绩效严格挂钩。这也是 KPI 最为人诟病的一个地方，会导致成员只关注绩效而忽略了本该有的创造性工作，甚至出现绩效造假的情况。</p>

<p>不管 OKR 还是 KPI，让每个成员各尽所长才是制度的目的，而且，找到合适的人，比任何制度更有效。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IM 同步之路]]></title>
    <link href="http://jingxin.me/blog/blog/2015/12/16/im-tong-bu-zhi-lu/"/>
    <updated>2015-12-16T16:01:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2015/12/16/im-tong-bu-zhi-lu</id>
    <content type="html"><![CDATA[<p>关于 IM 的同步，首先需要提的应当是协议，选择一个好的协议，对系统的扩展性，稳定性都有帮助。我们先来说一说协议的事。</p>

<h2 id="vs-">公有协议 vs 私有协议</h2>

<p>几乎所有 IM 开发起初都会考虑一下公有协议，即使最后没有选用，也会先对比一下各种协议的优劣。选用公有协议的好处显而易见，开发简单，兼容性好，很多协议也考虑了安全性。下面是两个比较流行的 IM 协议：</p>

<ol>
  <li>XMPP，实现多，体积大，对移动端不友好</li>
  <li>MQTT，轻量级，移动端友好，消息送达率高</li>
</ol>

<p>然而，选择了一个公有协议，也意味着更多的掣肘，协议的臃肿会让你的应用被迫实现很多不必要的接口。另外，扩展上面也不能随性所欲。所以，很多开发者或应用在积累了一定的基础之后，转而制定自己的私有协议。</p>

<p>反观私有协议，可以让应用更轻量，传输更少的数据，但是同时它也增加了开发的难度。我们粗略的看一下实现一个私有协议需要考虑哪些点。</p>

<h3 id="section">连接协议</h3>

<p>首先，选择使用什么连接协议，是你的私有协议的基石，QQ 在互联网萌芽时代选择了 UDP 连接，以支持大规模用户在线，而现代 IM 协议基本被 TCP 协议一统江湖，而且现在各类语言对应的 TCP 库也非常丰富。</p>

<h3 id="section-1">信息载体</h3>

<p>在信息的编码格式上有二进制和纯文本两种选择，序列化方式则有 xml, json, msgpack 等，综合下来，我认为使用纯文本+json，可读性和消息体积上面都比较理想。</p>

<h3 id="section-2">连接/订阅/广播/断线</h3>

<p>这四个步骤是一个 IM 协议最基础的功能，也是一个会话从开始到结束的最简单流程，协议中需要明确定义这四个步骤的接口</p>

<h3 id="section-3">其他需要考虑的问题</h3>

<ol>
  <li>QOS(quality of service)，一个好的 IM 协议应该可以为消息设定不同的等级，以便在效率和送达率上面找到一个平衡点，开发者也可以根据实际需求为消息选择是必须确认送达还是可容忍一定的丢失率</li>
  <li>安全性，消息是否需要加密，使用什么加密算法，也是可以在协议中约定的，不过加密必然导致效率降低，如果消息重要程度不高，则可以不为消息加密，据说 QQ 多年以来一直使用明文传输消息（未考证哦）</li>
</ol>

<h2 id="restful-vs-">Restful vs 消息队列</h2>

<p>从前后端分离的架构上来看，Restful 是一种理想的方式，接口相对标准化，有规律可循。但是从节约流量的角度看，这并不是一种很理想的方案。</p>

<p>IM 应用对数据同步的实时性要求较高，如果使用 Restful 接口，就会存在需要反复查询同一接口，得到的结果重复率较高的问题。例如简聊的用户信息接口 <code>https://jianliao.com/v2/users/me</code>，在每次进入应用的时候都会查询这个接口，每次得到的数据几乎 99% 都是和上次请求的时候相同的，而为了这 1% 的区别，又不得不反复查询。</p>

<p>而如果将数据离线存储，通过消息队列的方式来更新，则会让请求数量大大减少，加载效率就会得到大幅提升。</p>

<p>简聊在 3.0 的更新中同时也改变了以往 Restful 同步数据的方式，将每次最新的数据对象保存在队列中，客户端则通过队列去同步本地数据，从目前的实现方案来说，改善了频繁抓取热数据的情况，但是仍然有一些遗留问题值得优化和解决：</p>

<ol>
  <li>队列中保存的数据为完整对象，而不是操作记录，这样做是因为保存完整数据可以避免客户端在同步状态异常时出现无法恢复的脏数据，然而这样在流量上面开销就大得多了。</li>
  <li>队列只追加不更新，这样的一个结果就是导致在队列内部也会出现重复数据，增加了服务端存储的空间，也增加了流量的开销。</li>
</ol>

<h2 id="section-4">数据库同步</h2>

<p>最近研究同步的问题，还发现了另一种很有意思的方案，我感觉在未来会成为一种趋势，值得关注。</p>

<p>同步存在于我们开发中的方方面面，在服务端，我们使用数据库集群，以达到横向扩展的需求。做版本控制，我们选择 git，push 和 pull 也是在做同步。是通过版本管理和操作记录，客户端实现增量的同步服务端数据，最后达到保存镜像的目的。</p>

<p>其实做 IM 应用，客户端和服务端的同步，也同样可以借鉴这种思想。现在的移动客户端都使用本地数据库，Web 也有 LocalStorage 可用，所以在离线存储上面不存在问题。于是有人想到了一个方法，来使客户端和服务端保持数据同步，那么在业务上面，前后端就分离的更加清楚了，这就是 <a href="http://pouchdb.com/">PouchDB</a>。</p>

<p>PouchDB 借鉴了 CouchDB 的分布式思想，是一个 JavaScript 版本的实现，以便能在客户端利用和 CouchDB 一模一样的接口，由于在数据层进行同步，与业务逻辑无关，双方只需要协商好需要的数据表结构，就可以安心的去做自己平台的事了。</p>

<p>但是同时也留下值得思考的问题：</p>

<ol>
  <li>怎样将服务端的多用户关系表转换成客户端的单用户数据</li>
  <li>因为同步是双向的，怎样将客户端的单用户数据转换为服务端的多用户关系表</li>
  <li>当服务端数据结构升级时，怎样解决兼容性问题</li>
  <li>大数据量时，diff 的效率非常低下，大量的 diff 会拖慢应用的速度</li>
</ol>

<h2 id="section-5">拓展</h2>

<ul>
  <li><a href="http://blog.yld.io/2015/11/30/building-realtime-collaborative-offline-first-apps-with-react-redux-pouchdb-and-web-sockets/">Building realtime collaborative offline-first apps with React, Redux, PouchDB and WebSockets</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何写出好爬虫]]></title>
    <link href="http://jingxin.me/blog/blog/2015/12/07/ru-he-xie-chu-hao-pa-chong/"/>
    <updated>2015-12-07T18:21:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2015/12/07/ru-he-xie-chu-hao-pa-chong</id>
    <content type="html"><![CDATA[<p>写爬虫可以说是一个程序员必修课，因为上手简单，成效明显，深受各大培训机构和教学材料的青睐。于是无数新手也加入了造轮子的队列，写的爬虫满天飞。</p>

<p>说爬虫上手简单，是有原因的，只要了解了 http 请求和 html/xml 结构，谁都能做出一个可用的爬虫，再辅以一个好用的请求库和解析库，完成老板的任务简直就是分分钟的事情，老婆孩子再也不用担心我加班了有木有？</p>

<p>———————- 下面是转折的分割线 ———————-</p>

<p>但是，这样写出来的爬虫真的达到了生产级别吗，答案是否定的。码农界常说的一个词是 Robust，来看看怎样让我们的爬虫变得更加 Robust</p>

<h2 id="section">编码问题</h2>

<p>互联网上存在各种各样的编码，虽然现代的浏览器都能智能的识别编码，但是对于爬虫来说它们却是需要跨过的第一道坎。</p>

<p>多数网站都会在响应头中给出本站编码，我们只需要检测响应头中 content-type encoding 就能准确的得到站点的编码。再不济也会在 html meta 中标识出编码内容，检测 meta 中的 charset 属性就行了，例如 <code>&lt;meta http-equiv="Content-Type" content="text/html" charset="utf-8"&gt;</code> 就表示该网页使用的是 utf8 编码。</p>

<p>如果站长丧心病狂到什么提示都不给，那么我们就只能靠猜了，iconv 是一个不错的库，可以检测文本内容的编码，而且准确率比较高，在各种语言中也能找到对应的 iconv 模块。</p>

<p>如果最后还是检测不出对应的编码，那就默认当做目前最常见的 utf8 编码吧，<a href="https://github.com/danmactough/node-feedparser/blob/master/examples/iconv.js">这段简单的代码片段</a>可以说明检测编码的过程。</p>

<h2 id="section-1">压缩问题</h2>

<p>某些网站会在响应内容是使用 gzip 压缩以便节约流量（例如整天被爬的知乎同学），遇到这种站点，爬虫也需要做特殊的解析才能得到最后的纯文本内容。</p>

<p>解析的过程与检测编码类似，先通过响应头检测网站使用的是什么压缩编码，然后使用对应的解压缩方法解压内容即可，使用压缩的网站会在响应头 Content-Encoding 中加上压缩编码，例如 Content-Type: gzip 就表示该网页使用的是 gzip 压缩，<a href="https://github.com/danmactough/node-feedparser/blob/master/examples/compressed.js">这段代码</a>可以说明检测压缩编码的过程</p>

<h2 id="user-agent">添加 User-Agent</h2>

<p>下面的问题就是与内容提供者斗智斗勇的过程了，有些站点会识别爬虫行为然后屏蔽掉一些爬虫的请求。我们要做的就是尽量让我们的爬虫看起来，像个人。</p>

<p>首先请求头中必须添加 User-Agent，如果你还不知道 user-agent 是什么，出门左转看了wiki再回来。由于 ip 轻易无法修改，但是 user-agent 却是可以任意修改的，如果内容网站条件较宽，只使用 user-agent 识别爬虫的话，那么我们就乖乖的写上一些常用浏览器的 user-agent，如果你不知道有哪些，<a href="http://www.useragentstring.com/pages/All/">去这里</a>可以查到所有的 ua。</p>

<p>至于专业的搜索引擎，内容网站欢迎还来不及，怎么会屏蔽呢。所以它们一般都会使用自己的特定 ua 标识，例如 Baidu spider，Google spider 等，普通野生的爬虫就不要参考了。</p>

<h2 id="section-2">合并相同请求</h2>

<p>如果我们的内容提供者地址是由用户添加的，难免碰到会有重复地址的情况，这时最好就是将这些链接给合并掉，以免重复请求。例如 A 和 B 同时添加了链接 abc，那么我们的爬虫只需请求一次 abc 然后将内容分别返回给 A 和 B 就行了，或者请求 abc 之后缓存一段时间，当其他用户添加这个链接时，返回缓存内容就行了。我们的宗旨就是用最少的请求干最多的事。</p>

<h2 id="section-3">错误</h2>

<p>有的时候爬虫在请求网站时会碰到一些错误，这些有的是由于内容网站的错误，有些是由于权限或受到了屏蔽，在大多数情况下面这些错误都可以通过 http status code 来分辨（如果不知道什么是 http status code，再出门去看一遍 wiki）。</p>

<p>如果区分每个 http status code 太麻烦，有一个基本的原则就是看 code 前缀，例如：</p>

<ul>
  <li>3xx 开头的表示这个地址被跳转到其他地址了，爬虫可以根据响应头跟进，很多库自动做了跳转跟进，返回最终网址的内容，所以找到合适的请求库最重要，例如<a href="https://github.com/request/request">request</a></li>
  <li>4xx 表示内容网站拒绝了你的请求，有可能是你的 ip 被屏蔽，或者这个地址需要验证。遇到这种情况，可以等待一段时间再次请求，并逐渐增加请求间隔，直到返回的响应头为 2xx。一般的屏蔽会在一段时间后解除。</li>
  <li>5xx 表示内容网站挂了或你的服务器网络挂了，遇到这种情况，我们能做的就只能等，等内容网站修复错误。</li>
</ul>

<p>连续错误次数过多的网站就不要再爬取了，以便节约带宽资源</p>

<h2 id="section-4">请求频率</h2>

<p>上面提到了错误重试的问题，这一节我们聊一下调整请求频率以防止被屏蔽。</p>

<p>如果你的爬虫现在可以正常访问内容网站，不要玩的太 high，尽量约束一下自己的请求频率，一分钟一次已经是很多网站能够忍耐的底线了，如果内容更新不频繁，可以设置为 20 分钟一次。</p>

<p>此外，还能制定一些比较聪明的策略，例如发现网站内容较上次没有更新，那么下次请求间隔设置为 1.5 倍，依次递增，直到你设定的请求间隔上限。如果内容有了更新，再把请求间隔重置为最小值。这样既不影响及时得到网站的更新，也会尽量减小被屏蔽的风险。</p>

<p>如果你的爬虫 ip 已经被屏蔽了（怎样判断被屏蔽请参考上文），那么就消停一会儿，设定一个较长的请求间隔再尝试，直至解除屏蔽。</p>

<h2 id="section-5">分布式</h2>

<p>爬虫受制于单台服务器的带宽和请求数限制，往往在高配置的机器中也无法发挥最大的效能。所以将爬虫分布在多台低配高带宽的服务器上是比较合理的做法。至于如果分布式，这个话题聊起来就没完了，可以使用最基础的消息队列（例如 zmq, rabbitmq 或 redis）和经典的 master/worker 结构，来实现多台机器协同工作。</p>

<h2 id="section-6">大数据</h2>

<p>大数据没有以前那么火了，但是为了提高这篇文章的逼格，仍然是一个值得一提的话题。</p>

<p>我们知道互联网的世界是开放的，很多内容其实不需要我们亲自去爬取，搜索引擎已经帮我们收录了这些网站内容，合理利用搜索引擎的 site: 命令，有时候可以得到比亲自爬取更满意的结果。</p>

<h2 id="dont-be-evil">Don’t be evil</h2>

<p>大部分网站会在站点根目录下包含一个 robots.txt 文件，可以通过 http://域名/robots.txt 来访问，里面的内容表明了站长对于爬虫的限定，如果发现某些内容是站长不希望你爬取的，那么还是乖乖绕过吧。如果不知道 robots.txt 是什么，再去一次 wiki。</p>

<h2 id="section-7">结语</h2>

<p>以上简单介绍了一下我多年以来作为一名非大数据非分布式非社区明星开发的经验，抛砖引玉，希望能对读者有所帮助。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CEO 的坏习惯]]></title>
    <link href="http://jingxin.me/blog/blog/2015/09/30/ceo-de-pi-xi-guan/"/>
    <updated>2015-09-30T09:34:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2015/09/30/ceo-de-pi-xi-guan</id>
    <content type="html"><![CDATA[<h2 id="section">不计后果的答应客户</h2>

<p>在签约或谈合作时为了取得订单，不考虑现有能力和需要投入的成本，盲目的满足客户的要求，这样的做法，和乡下金属加工厂的老板没有任何区别，订单来了，增加机器和工人，加班加点，就能满足需求了。软件行业不是劳动力密集型产业，一步考虑不周，就需要投入更大的成本去弥补。国内那么多员工众多的软件公司，却开发不出好用的软件，UI 和交互都停留在上个世纪，很大一部分原因，都是由急功近利的老板造成的。</p>

<h2 id="section-1">无法保持专注</h2>

<p>很多 CEO 觉得自己的学习能力比别人强，还兴趣广泛，对公司里的所有工作都喜欢亲自参与。这本无可厚非，问题就出在他是 CEO。到了任何一个部门，都是公认的 Leader，员工很难在这样的关系下保持“有自己的意见”，创新更无从谈起。在 CEO 亲身投入到这个部门的时期，员工可能会斗志满满，一旦离开这个部门，立刻就会回到六神无主的状态。做任何工作，都需要保持专注，在很长的一段时间，Leader 都要和大家共进退，浅尝辄止不如放任自流。不管在哪个时期，这些工作，都有比 CEO 更合适的人或团队存在。</p>

<p>这一点同样体现在产品上，CEO 会比员工体验到更多的竞争对手压力，而这个时候如果忙于追赶竞争对手，而不再从产品自身的实用性和设计理念出发，那么员工就变成了竞争的牺牲品，心力憔悴的复制着对手的功能。我们常说“好产品不愁没市场”，不忘初心，保持专注，才是打造好产品的前提啊。</p>

<h2 id="section-2">屏蔽不感兴趣的声音</h2>

<p>每个人都有自己的兴趣点，甚至在不同的年龄和时间，兴趣也不一样。CEO 就像一个公布在社交网络上的收件箱，每时每刻都有不同的声音到来。我们常说兼听则明，偏信则暗。上文提到要常对客户的需求说不，但是对于员工的声音，则要时时去鼓励。员工的声音，与公司息息相关，一个建议可能挽救一个产品，一个创意可能占领一个市场，CEO 如果不能从内部的建议中博采众长，那么难免陷入到一意孤行的境地。</p>

<h2 id="section-3">不能知人善用</h2>

<p>创业公司常常出现的一种情况就是一人需要干几个人的事，在创业萌芽期，这样做只能说是万不得已，而且因为功能少，事情也不显得复杂，一个人干多件事情也是一种磨练。到了公司业务走上正轨，产品越来越庞杂，再让一个人干几个人的事情，就不是那么合理了。我想每个人都希望成为某个领域的专家，这样不仅是为了个人前途考虑，对公司也有好处，如果能将员工培养成某一方向的专家，那么遇到问题自然不愁没人解决。业务拓展了，资金充裕了，公司就更应该给员工创造培养提高的环境。这个时候让与系统架构息息相关的运维去给客户装机部署，让开发去做社区运营，就不再是一个有远见的 CEO 干的事了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于吃饭]]></title>
    <link href="http://jingxin.me/blog/blog/2015/07/26/guan-yu-chi-fan/"/>
    <updated>2015-07-26T18:00:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2015/07/26/guan-yu-chi-fan</id>
    <content type="html"><![CDATA[<p>最近好像有款叫 Soylent 的食物（？）突然在网上流行起来，到哪儿都能看到有人推荐这款产品。保守如我，在心理上实在接受不了每天就靠喝这种芝麻糊过日子。</p>

<h2 id="section">什么时候吃饭变成了一件麻烦事</h2>

<p>生活节奏越来越快，我已经不记得上次做饭是什么时候了。我倒是不太排斥烧菜的过程，真正的麻烦都在准备食材的阶段，如果手边有现成洗净的食材，我是很愿意煎炒蒸煮一下的。在身体健康的年纪，吃遍天下美食应该是一种美好的享受吧，食物和调料带来的快乐可不是一大杯蛋白质糊可以比拟的。</p>

<p>就算在快节奏的工作日，吃一顿饭也占用不了太多的时间。Soylent 貌似并不比去路边吃顿饭更省事，如果专为懒人设计，我建议他们将冲泡壶设计成一次性的，吃完就丢，岂不更方便。</p>

<h2 id="section-1">吃饭真的只是为了饱腹吗</h2>

<p>吃饭也是一种社交活动，吃饭的时候和别人聊聊热门话题，开拓一下视野，转移一下注意力，既是休息，也是增进了解的一种方式。大家围成一桌喝着芝麻糊聊天的场景，画面太美，实在不敢想想。</p>

<p>不过这年头新产品和新概念层出不穷，不断刷新人们的世界观，出现 Soylent，也算是科技和互联网发展的一种副产品。也许以后该转换一下思路，能保持独立思考，同时接受新事物。</p>

<p>为了这个写一篇文章确实慢蛋疼的，晚饭加个蛋压压惊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js 沙盒]]></title>
    <link href="http://jingxin.me/blog/blog/2015/06/18/node-dot-js-sha-he/"/>
    <updated>2015-06-18T16:36:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2015/06/18/node-dot-js-sha-he</id>
    <content type="html"><![CDATA[<h2 id="section">为什么要使用沙盒</h2>

<p>eval 在很多语言中都是一个很有用的方法，合理利用它可以编写出很多让人拍案叫绝的功能。但是由于它实在过于开放和危险，很多人给它冠上了 <strong>evil</strong> 的称号。</p>

<p>使用沙盒可以给 eval 类的功能增加一些条件限制，让它变得更加安全，而不丢失其灵活性。</p>

<p>Node.js 中提供的 vm 模块可以轻松实现沙盒的功能。</p>

<h2 id="vm-">如何使用 vm 模块</h2>

<h3 id="vmruninthiscontext"><code>vm.runInThisContext</code></h3>

<p><code>vm.runInThisContext</code> 可以执行代码并得到它的返回值，被执行的代码没有权限访问本地对象，但是可以访问全局对象。相比之下， eval 则有权限访问上下文中的对象。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">localVar</span> <span class="o">=</span> <span class="s1">&#39;initial value&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">vmResult</span> <span class="o">=</span> <span class="nx">vm</span><span class="p">.</span><span class="nx">runInThisContext</span><span class="p">(</span><span class="s1">&#39;localVar = &quot;vm&quot;;&#39;</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;vmResult: &#39;</span><span class="p">,</span> <span class="nx">vmResult</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;localVar: &#39;</span><span class="p">,</span> <span class="nx">localVar</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">evalResult</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;localVar = &quot;eval&quot;;&#39;</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;evalResult: &#39;</span><span class="p">,</span> <span class="nx">evalResult</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;localVar: &#39;</span><span class="p">,</span> <span class="nx">localVar</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// vmResult: &#39;vm&#39;, localVar: &#39;initial value&#39;</span>
</span><span class="line"><span class="c1">// evalResult: &#39;eval&#39;, localVar: &#39;eval&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="vmcreatecontext--vmrunincontext"><code>vm.createContext</code> 与 <code>vm.runInContext</code></h3>

<p><code>vm.createContext</code> 则是真正创造了一个沙盒对象，使用 <code>vm.runInContext</code> 可以完全让代码在这个沙盒环境中运行。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">util</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;util&#39;</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;vm&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">sandbox</span> <span class="o">=</span> <span class="nx">vm</span><span class="p">.</span><span class="nx">createContext</span><span class="p">({</span> <span class="nx">globalVar</span><span class="o">:</span> <span class="mi">1</span> <span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">vm</span><span class="p">.</span><span class="nx">runInContext</span><span class="p">(</span><span class="s1">&#39;globalVar *= 2;&#39;</span><span class="p">,</span> <span class="nx">sandbox</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">util</span><span class="p">.</span><span class="nx">inspect</span><span class="p">(</span><span class="nx">sandbox</span><span class="p">));</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">global</span><span class="p">.</span><span class="nx">globalVar</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// { globalVar: 1024 }</span>
</span><span class="line"><span class="c1">// undefined</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="vm--1">vm 的具体应用</h2>

<p><a href="https://github.com/teambition/configd"><code>configd</code></a> 是我为公司部署流程开发的一个小工具，功能是将各种来源的配置文件合并成一个 json 文件。由于它支持 <code>ssh</code>, <code>git</code>, <code>http</code> 等多种来源的配置或代码，所以需要在工具内部来执行这些代码以实现和本地 <code>require</code> 类似的效果。如果用 <code>eval</code>，那么除却风险问题，<code>module.exports</code> 也不能生效了。所以在工具中使用了 vm 模块来执行这些代码。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="nv">_eval = </span><span class="nf">(js, options = {}) -&gt;</span>
</span><span class="line">  <span class="nv">sandbox = </span><span class="nx">vm</span><span class="p">.</span><span class="nx">createContext</span><span class="p">()</span>
</span><span class="line">  <span class="nv">sandbox.exports = </span><span class="nx">exports</span>
</span><span class="line">  <span class="nv">sandbox.module = exports: </span><span class="nx">exports</span>
</span><span class="line">  <span class="nv">sandbox.global = </span><span class="nx">sandbox</span>
</span><span class="line">  <span class="nv">sandbox.require = </span><span class="nx">require</span>
</span><span class="line">  <span class="nv">sandbox.__filename = </span><span class="nx">options</span><span class="p">.</span><span class="nx">filename</span> <span class="o">or</span> <span class="s">&#39;eval&#39;</span>
</span><span class="line">  <span class="nv">sandbox.__dirname = </span><span class="nx">path</span><span class="p">.</span><span class="nx">dirname</span> <span class="nx">sandbox</span><span class="p">.</span><span class="nx">__filename</span>
</span><span class="line">
</span><span class="line">  <span class="nx">vm</span><span class="p">.</span><span class="nx">runInContext</span> <span class="nx">js</span><span class="p">,</span> <span class="nx">sandbox</span>
</span><span class="line">
</span><span class="line">  <span class="nx">sandbox</span><span class="p">.</span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span>
</span><span class="line">
</span><span class="line"><span class="nv">data = </span><span class="nx">_eval</span> <span class="nx">js</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-1">参考资料</h2>

<p><a href="https://nodejs.org/api/vm.html">Executing JavaScript</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NCR 是什么]]></title>
    <link href="http://jingxin.me/blog/blog/2015/04/30/what-is-ncr/"/>
    <updated>2015-04-30T09:45:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2015/04/30/what-is-ncr</id>
    <content type="html"><![CDATA[<p>一直以来，对爬虫抓取的某些内容感到很费解，比如形似 <code>&amp;#x4e2d;&amp;#x56fd;</code> 的字符串，最初以为是经过编码的 unicode 字符，但是尝试了各种手段都无法解开。最近开始关注起这个问题，机缘巧合在知乎上搜到了<a href="http://www.zhihu.com/question/21390312">一个回答</a>，原来这些是叫做 <a href="http://en.wikipedia.org/wiki/Numeric_character_reference">numeric character reference (NCR)</a> 的转义序列，在这里记录一下，权作备忘。</p>

<p>以下一段引用自知乎梁海的<a href="http://www.zhihu.com/question/21390312/answer/18091465">回答</a>：</p>

<blockquote>
  <p>形如 ——</p>

  <p><code>&amp;#dddd;</code></p>

  <p><code>&amp;#xhhhh;</code></p>

  <p><code>&amp;#name;</code></p>

  <p>—— 的一串字符是 HTML、XML 等 SGML 类语言的转义序列（escape sequence）。它们不是「编码」。</p>

  <p>以 HTML 为例，这三种转义序列都称作 character reference：</p>

  <p>前两种是 numeric character reference（NCR），数字取值为目标字符的 Unicode code point；以「&amp;#」开头的后接十进制数字，以「&amp;#x」开头的后接十六进制数字。
后一种是 character entity reference，后接预先定义的 entity 名称，而 entity 声明了自身指代的字符。</p>

  <p>从 HTML 4 开始，NCR 以 Unicode 为准，与文档编码无关。</p>

  <p>「中国」二字分别是 Unicode 字符 U+4E2D 和 U+56FD，十六进制表示的 code point 数值「4E2D」和「56FD」就是十进制的「20013」和「22269」。所以 ——</p>

  <p><code>&amp;#x4e2d;&amp;#x56fd;</code></p>

  <p><code>&amp;#20013;&amp;#22269;</code></p>

  <p>—— 这两种 NCR 写法都会在显示时转换为「中国」二字。</p>
</blockquote>

<p>至于怎么去 <code>encode/decode</code> 这些字符，在网上找到了一个简单的 <a href="http://snipplr.com/view/772/encode-numeric-character-reference/"><code>Javascript</code> 版本</a>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">ncr2c</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="k">this</span>
</span><span class="line">    <span class="p">.</span><span class="nx">replace</span><span class="p">(</span> <span class="sr">/&amp;#x([\da-f]{2,4});/gi</span><span class="p">,</span>
</span><span class="line">    <span class="kd">function</span><span class="p">(</span> <span class="nx">$0</span><span class="p">,</span> <span class="nx">$1</span> <span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span> <span class="s2">&quot;0x&quot;</span> <span class="o">+</span> <span class="nx">$1</span> <span class="p">)</span> <span class="p">}</span> <span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">c2ncr</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="k">this</span> <span class="p">.</span><span class="nx">ncr2c</span><span class="p">(</span> <span class="p">).</span><span class="nx">replace</span><span class="p">(</span> <span class="sr">/./g</span><span class="p">,</span>
</span><span class="line">    <span class="kd">function</span><span class="p">(</span> <span class="nx">$0</span> <span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="s2">&quot;&amp;#x&quot;</span> <span class="o">+</span> <span class="nx">$0</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span> <span class="p">).</span><span class="nx">toString</span><span class="p">(</span> <span class="mi">16</span> <span class="p">).</span><span class="nx">toUpperCase</span><span class="p">(</span> <span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;;&quot;</span> <span class="p">}</span> <span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">alert</span><span class="p">(</span> <span class="s2">&quot;&amp;#x61;&amp;#x6A;&amp;#x61;&amp;#x78;&quot;</span><span class="p">.</span><span class="nx">ncr2c</span><span class="p">(</span> <span class="p">)</span> <span class="p">);</span>
</span><span class="line"><span class="c1">//ajax</span>
</span><span class="line">
</span><span class="line"><span class="nx">alert</span><span class="p">(</span> <span class="s2">&quot;a&amp;#x6A;ax&quot;</span><span class="p">.</span><span class="nx">c2ncr</span><span class="p">(</span> <span class="p">)</span> <span class="p">);</span>
</span><span class="line"><span class="c1">//&amp;#x61;&amp;#x6A;&amp;#x61;&amp;#x78;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>由于上面的方案是以修改 String 原型来实现的（一般不认为这是一个好做法），使用的时候可以改成两个方法。</p>

<p>而另一种更 robust 的方案则是使用第三方库，例如 <a href="https://github.com/mathiasbynens/he"><code>he</code> 模块</a>，轻松实现对很多转义序列的支持。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[multipart 到底是个啥玩意儿]]></title>
    <link href="http://jingxin.me/blog/blog/2014/12/21/multipart-dao-di-shi-ge-sha-wan-yi-er/"/>
    <updated>2014-12-21T11:16:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2014/12/21/multipart-dao-di-shi-ge-sha-wan-yi-er</id>
    <content type="html"><![CDATA[<p>在 POST 请求中，常见的几种请求头有 ‘application/x-www-form-urlencoded’， ‘application/json’，这些都很容易理解，唯独 ‘multipart/form-data’ 这种请求挺让我费解，下面就来详细说明一下，以作笔记备查。</p>

<p>在 GET 请求中，参数一般会以 ‘&amp;’ 为分割符号，比如 ‘http://api.example.com?name=tom&amp;friend=jerry’，在 ‘application/x-www-form-urlencoded’ 类的 POST 请求中，参数形式与此类似，只不过参数被写在了 body 中，以突破 url 中 2k 字节的限制。</p>

<p>而当我们想上传文件或其他二进制数据时，根据 form 标准，非字符串会被替换成 ‘%HH’，其中的 ‘HH’ 是两个十六进制数来表示当前这位的二进制数据。在上传大文件的时候，这种做法就显得非常浪费了。于是，我们经常会把 ‘multipart/form-data’ 来用在文件上传中。</p>

<p>我们来看一个完整的 ‘multipart/form-data’ 请求：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Content-Type: multipart/form-data; boundary=AaB03x
</span><span class="line">
</span><span class="line">--AaB03x
</span><span class="line">Content-Disposition: form-data; name="submit-name"
</span><span class="line">
</span><span class="line">Larry
</span><span class="line">--AaB03x
</span><span class="line">Content-Disposition: form-data; name="files"; filename="file1.txt"
</span><span class="line">Content-Type: text/plain
</span><span class="line">
</span><span class="line">... contents of file1.txt ...
</span><span class="line">--AaB03x--</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面 ‘boundary’ 的值，就与常见的 ‘application/x-www-form-urlencoded’ 中 ‘&amp;’ 的作用差不多了，在接收请求的服务器中，会将 body 以 ‘–AaB03x’ 分割出一个个 part，就能正常解析出参数类型，名称，文件名等等内容了。</p>

<h1 id="section">参考资料</h1>

<ul>
  <li><a href="http://www.w3.org/Protocols/rfc1341/7_2_Multipart.html">The Multipart Content-Type</a></li>
  <li><a href="http://www.w3.org/TR/html401/interact/forms.html">Forms</a></li>
  <li><a href="http://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data">application/x-www-form-urlencoded or multipart/form-data?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sort 的错误用法]]></title>
    <link href="http://jingxin.me/blog/blog/2014/11/27/sort-de-cuo-wu-yong-fa/"/>
    <updated>2014-11-27T14:07:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2014/11/27/sort-de-cuo-wu-yong-fa</id>
    <content type="html"><![CDATA[<p>前不久同事的代码中出了一个很神奇的问题，大致流程是对一个由对象组成的数组进行排序，其中属性 a 用于排序，属性 b 作为一个优选条件，当 b 等于 1 的时候无论 a 值是什么，都排在开头 。这本是一个很简单的问题，问题就在于他用两次 sort 实现在这次排序，先根据 a 的属性排序，然后再根据 b 的值来排序。问题就出在第二次排序中。</p>

<p>我们想当然的会认为在第一次排序中，数组已经根据 a 的属性由大到小排序，在第二次中我们只要不去动原数组的顺序就行（一般在方法中写成返回0或-1），只考虑单独把 b 等于 1 的元素提到前面去。但是其实这与语言所选用的排序算法有关，javascript （和一起其他语言）内置的 sort 方法采用的是几种排序算法的集合，有时并不能保证相同元素的位置保持一致。</p>

<p>下面是从 <a href="http://stackoverflow.com/questions/27071942/array-sort-is-producing-unexpected-results-when-elements-are-equal">stackoverflow</a> 上面找来的一个例子</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">arrayToSort</span> <span class="o">=</span> <span class="p">[</span>
</span><span class="line">  <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">strength</span><span class="o">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="nx">strength</span><span class="o">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="nx">strength</span><span class="o">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="nx">strength</span><span class="o">:</span> <span class="mi">1</span><span class="p">},</span>
</span><span class="line">  <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;e&#39;</span><span class="p">,</span> <span class="nx">strength</span><span class="o">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;f&#39;</span><span class="p">,</span> <span class="nx">strength</span><span class="o">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;g&#39;</span><span class="p">,</span> <span class="nx">strength</span><span class="o">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;h&#39;</span><span class="p">,</span> <span class="nx">strength</span><span class="o">:</span> <span class="mi">1</span><span class="p">},</span>
</span><span class="line">  <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;i&#39;</span><span class="p">,</span> <span class="nx">strength</span><span class="o">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;j&#39;</span><span class="p">,</span> <span class="nx">strength</span><span class="o">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;k&#39;</span><span class="p">,</span> <span class="nx">strength</span><span class="o">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;l&#39;</span><span class="p">,</span> <span class="nx">strength</span><span class="o">:</span> <span class="mi">1</span><span class="p">},</span>
</span><span class="line">  <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="nx">strength</span><span class="o">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="nx">strength</span><span class="o">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;o&#39;</span><span class="p">,</span> <span class="nx">strength</span><span class="o">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;p&#39;</span><span class="p">,</span> <span class="nx">strength</span><span class="o">:</span> <span class="mi">1</span><span class="p">},</span>
</span><span class="line">  <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;q&#39;</span><span class="p">,</span> <span class="nx">strength</span><span class="o">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="nx">strength</span><span class="o">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;s&#39;</span><span class="p">,</span> <span class="nx">strength</span><span class="o">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;t&#39;</span><span class="p">,</span> <span class="nx">strength</span><span class="o">:</span> <span class="mi">1</span><span class="p">}</span>
</span><span class="line"><span class="p">];</span>
</span><span class="line">
</span><span class="line"><span class="nx">arrayToSort</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">strength</span> <span class="o">-</span> <span class="nx">a</span><span class="p">.</span><span class="nx">strength</span><span class="p">;</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nx">arrayToSort</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们会以为最后元素的值还是从 a 到 t，但实际运行下来的结果却是乱序的，这是因为 sort 的算法并没有保留原数组的顺序，也即 <a href="http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.11">unstable</a>。</p>

<p>那么我们就该尽量避免这种情况发生，就我同事的例子，将两次 sort 的逻辑合并在一次中应该是个可行的办法，如果必须分为多次 sort，那么就把原数组的顺序记录在元素的属性上把。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 heredoc 写 mongo shell]]></title>
    <link href="http://jingxin.me/blog/blog/2014/11/23/yong-heredoc-xie-mongo-shell/"/>
    <updated>2014-11-23T12:24:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2014/11/23/yong-heredoc-xie-mongo-shell</id>
    <content type="html"><![CDATA[<p>mongo shell 给我们提供了很便捷的 mongodb 操作接口，很多人应该用过 <code>mongo</code> 命令执行 javascript 文件，或者通过 <code>mongo --eval</code> 执行脚本。两种方式各有千秋，使用 js 文件可编辑较复杂的代码逻辑，而且可以作为脚本储存以备重复使用。使用 <code>mongo --eval</code> 比较灵活，随取随用，但是当代码中有换行时，就蛋疼了。mongo <a href="http://docs.mongodb.org/v2.6/administration/scripting/">官方的文档</a> 并没有提到 eval 在处理多行代码时的解决方案，好在最近发现用 heredoc 可以完美的解决这个问题。</p>

<h1 id="heredoc">heredoc</h1>

<p>heredoc 在 <a href="http://en.wikipedia.org/wiki/Here_document">wiki</a> 上解释为一段可被当做独立文件的代码片段，一般表现为下面这种形式：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">tr a-z A-Z <span class="s">&lt;&lt;END_TEXT</span>
</span><span class="line"><span class="s">one two three</span>
</span><span class="line"><span class="s">uno dos tres</span>
</span><span class="line"><span class="s">END_TEXT</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里的 <code>&lt;&lt;END_TEXT</code> 到 <code>END_TEXT</code> 就是 heredoc 了，虽然语法简单，用处可就大了。在这里正好解决了在 <code>mongo --eval</code> 中遇到的问题，由于这段字符串可被当成文件来使用，所以直接跟在 <code>mongo</code> 命令后面就行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">mongo localhost/test <span class="s">&lt;&lt;MONGO</span>
</span><span class="line"><span class="s">db.users.save({name: &quot;mongo&quot;})</span>
</span><span class="line"><span class="s">MONGO</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在编写 <a href="https://github.com/sailxjx/mms">mms</a> 这个迁移模块的时候，如果没有 heredoc，则不免需要生成一些 js 临时文件来给 mongo 执行，现在，<a href="https://github.com/sailxjx/mms/blob/master/src/mongo.coffee">直接拼接成字符串就行</a>。</p>

<p>最后，使用中不要忘了将一些字符转义掉，比如 ‘$’，以免被当成 shell 变量引用了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用 nginx 实现静态资源的反向代理]]></title>
    <link href="http://jingxin.me/blog/blog/2014/10/10/li-yong-nginx-shi-xian-jing-tai-zi-yuan-de-fan-xiang-dai-li/"/>
    <updated>2014-10-10T16:52:00+08:00</updated>
    <id>http://jingxin.me/blog/blog/2014/10/10/li-yong-nginx-shi-xian-jing-tai-zi-yuan-de-fan-xiang-dai-li</id>
    <content type="html"><![CDATA[<p>github 中很多项目都有一个 readme 文件，很多人喜欢在文件中添加自己的创作或封面图片，比如 <a href="https://github.com/substack">substack</a> 为他的每个项目绘制了一个 logo。这些图片在 github 中能直接在页面中显示出来，不过 url 被替换成了 github 自己的。比如在 <a href="https://github.com/substack/node-browserify/blob/master/readme.markdown">browserify</a> 项目中，logo 的链接变成了</p>

<blockquote>
  <p>https://camo.githubusercontent.com/e19e230a9371a44a2eeb484b83ff4fcf8c824cf7/687474703a2f2f737562737461636b2e6e65742f696d616765732f62726f777365726966795f6c6f676f2e706e67</p>
</blockquote>

<p>而我们通过查看 <a href="https://raw.githubusercontent.com/substack/node-browserify/master/readme.markdown">raw</a> 能发现原 url 是</p>

<blockquote>
  <p>http://substack.net/images/browserify_logo.png</p>
</blockquote>

<p>这样做的一个好处是防止因为在 https 网站中出现 http 链接，否则在客户端会得到一个风险警告。github 在细节上真是考虑的十分周到。</p>

<p>既然有需求，我们就来实现它。通常的做法是写一个应用去抓取远程的静态资源，然后反馈给前端，这就是一个简单地反向代理了。但是这样做比较繁琐，效率也未见得高，其实我们可以直接通过 nginx 来代理这些静态文件。</p>

<p>nginx 的 <code>proxy_pass</code> 支持填写任意地址，并且支持 dns 解析。所以我的思路是，将原 url 加密转成网站自身的 url。比如上面的</p>

<blockquote>
  <p>http://substack.net/images/browserify_logo.png</p>
</blockquote>

<p>可以加密成</p>

<blockquote>
  <p>764feebffb1d3f877e9e0d0fadcf29b85e8fe84ae4ce52f7dc4ca4b3e05bf1718177870a996fe5804a232fcae5b893ea (加密和序列化算法网上有很多，在此就不赘述了)</p>
</blockquote>

<p>然后放在我们自己的域名下：</p>

<blockquote>
  <p>https://ssl.youdomain.com/camo/764feebffb1d3f877e9e0d0fadcf29b85e8fe84ae4ce52f7dc4ca4b3e05bf1718177870a996fe5804a232fcae5b893ea</p>
</blockquote>

<p>解密的步骤用 nginx 会比较难实现，所以当用户通过上述链接请求时，先讲请求传递给解密程序，这里有一个 coffeescript 版本的例子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="nv">express = </span><span class="nx">require</span> <span class="s">&#39;express&#39;</span>
</span><span class="line"><span class="nv">app = </span><span class="nx">express</span><span class="p">()</span>
</span><span class="line"><span class="nx">app</span><span class="p">.</span><span class="nx">get</span> <span class="s">&#39;/camo/:eurl&#39;</span><span class="p">,</span> <span class="nf">(req, res) -&gt;</span>
</span><span class="line">  <span class="p">{</span><span class="nx">eurl</span><span class="p">}</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span>
</span><span class="line">  <span class="p">{</span><span class="nx">camoSecret</span><span class="p">}</span> <span class="o">=</span> <span class="nx">config</span>  <span class="c1"># 这里使用自己的密钥</span>
</span><span class="line">  <span class="nv">rawUrl = </span><span class="nx">util</span><span class="p">.</span><span class="nx">decrypt</span> <span class="nx">eurl</span><span class="p">,</span> <span class="nx">camoSecret</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">403</span><span class="p">).</span><span class="nx">end</span><span class="p">(</span><span class="s">&#39;INVALID URL&#39;</span><span class="p">)</span> <span class="nx">unless</span> <span class="nx">rawUrl</span>
</span><span class="line">  <span class="nx">res</span><span class="p">.</span><span class="nx">set</span> <span class="s">&#39;X-Origin-Url&#39;</span><span class="p">,</span> <span class="nx">rawUrl</span>
</span><span class="line">  <span class="nx">res</span><span class="p">.</span><span class="nx">set</span> <span class="s">&#39;X-Accel-Redirect&#39;</span><span class="p">,</span> <span class="s">&#39;/remote&#39;</span>
</span><span class="line">  <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
</span><span class="line"><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span> <span class="mi">3000</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后写入 <code>X-Accel-Redirect</code> 响应头做内部跳转，下面的步骤就由 nginx 完成了。</p>

<p>下面是一个完整的 nginx 配置文件例子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="nginx"><span class="line"><span class="k">server</span> <span class="p">{</span>
</span><span class="line">    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span><span class="line">    <span class="kn">server_name</span> <span class="s">ssl.youdomain.com</span><span class="p">;</span>
</span><span class="line">    <span class="kn">location</span> <span class="s">/camo/</span> <span class="p">{</span>
</span><span class="line">        <span class="kn">proxy_pass</span> <span class="s">http://localhost:3000</span><span class="p">;</span>
</span><span class="line">        <span class="kn">proxy_set_header</span> <span class="s">X-Real-IP</span> <span class="nv">$remote_addr</span><span class="p">;</span>
</span><span class="line">        <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span><span class="line">        <span class="kn">proxy_set_header</span> <span class="s">Host</span> <span class="nv">$http_host</span><span class="p">;</span>
</span><span class="line">        <span class="kn">proxy_set_header</span> <span class="s">X-NginX-Proxy</span> <span class="s">true</span><span class="p">;</span>
</span><span class="line">        <span class="kn">proxy_http_version</span> <span class="mi">1</span><span class="s">.1</span><span class="p">;</span>
</span><span class="line">        <span class="kn">proxy_set_header</span> <span class="s">Upgrade</span> <span class="nv">$http_upgrade</span><span class="p">;</span>
</span><span class="line">        <span class="kn">proxy_set_header</span> <span class="s">Connection</span> <span class="s">&quot;Upgrade&quot;</span><span class="p">;</span>
</span><span class="line">        <span class="kn">proxy_redirect</span> <span class="no">off</span><span class="p">;</span>
</span><span class="line">        <span class="kn">break</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="kn">location</span> <span class="s">/remote</span> <span class="p">{</span>
</span><span class="line">        <span class="kn">internal</span><span class="p">;</span>
</span><span class="line">        <span class="kn">resolver</span> <span class="mi">192</span><span class="s">.168.0.21</span><span class="p">;</span>  <span class="c1"># 必须加上 dns 服务器地址，否则 nginx 无法解析域名</span>
</span><span class="line">        <span class="kn">set</span> <span class="nv">$origin_url</span> <span class="nv">$upstream_http_x_origin_url</span><span class="p">;</span>
</span><span class="line">        <span class="kn">proxy_pass</span> <span class="nv">$origin_url</span><span class="p">;</span>
</span><span class="line">        <span class="kn">add_header</span> <span class="s">Host</span> <span class="s">&quot;file.local.com&quot;</span><span class="p">;</span>
</span><span class="line">        <span class="kn">break</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>nginx 的 upstream 模块会把所有的响应头加上 <code>$upstream_http_</code> 前缀当成一个变量保存，所以在上面的例子中我们将原 url 放在 <code>X-Origin-Url</code> 响应头中，在 nginx 就变成了 <code>$upstream_http_x_origin_url</code> 变量，但是在 proxy_pass 中不能直接引用，非要通过 set 来设置才能引用，这个我不是很理解，希望有高手能解答。</p>

<p>这样下来，每次当用户请求</p>

<blockquote>
  <p>https://ssl.youdomain.com/camo/764feebffb1d3f877e9e0d0fadcf29b85e8fe84ae4ce52f7dc4ca4b3e05bf1718177870a996fe5804a232fcae5b893ea</p>
</blockquote>

<p>时，nginx 就会去抓取</p>

<blockquote>
  <p>http://substack.net/images/browserify_logo.png</p>
</blockquote>

<p>的内容返回给用户。我们还可以在 nginx 之前加上 varnish，用以缓存静态文件的内容。这样就跟 githubusercontent 的做法更加一致了。</p>
]]></content>
  </entry>
  
</feed>
